

================================================================
== Vivado HLS Report for 'SHA1ProcessMessageBlock'
================================================================
* Date:           Mon Sep 12 23:57:15 2016

* Version:        2016.1 (Build 1538259 on Fri Apr 08 16:12:49 MDT 2016)
* Project:        sha1_hls
* Solution:       solution2
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.60|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |  165|  165|  166|  166| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 166, depth = 166


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 166
* Pipeline: 1
  Pipeline-0: II = 166, D = 166, States = {}
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
	157  / true
157 --> 
	158  / true
158 --> 
	159  / true
159 --> 
	160  / true
160 --> 
	161  / true
161 --> 
	162  / true
162 --> 
	163  / true
163 --> 
	164  / true
164 --> 
	165  / true
165 --> 
	166  / true
166 --> 
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: W [1/1] 0.00ns
.preheader8.preheader:4  %W = alloca [80 x i32], align 16

ST_1: context_Message_Block_addr [1/1] 0.00ns
.preheader8.preheader:6  %context_Message_Block_addr = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 0

ST_1: context_Message_Block_load [2/2] 2.39ns
.preheader8.preheader:7  %context_Message_Block_load = load i8* %context_Message_Block_addr, align 1

ST_1: context_Message_Block_addr_1 [1/1] 0.00ns
.preheader8.preheader:9  %context_Message_Block_addr_1 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 1

ST_1: context_Message_Block_load_1 [2/2] 2.39ns
.preheader8.preheader:10  %context_Message_Block_load_1 = load i8* %context_Message_Block_addr_1, align 1

ST_1: context_Intermediate_Hash_addr [1/1] 0.00ns
.preheader8.preheader:566  %context_Intermediate_Hash_addr = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 0

ST_1: A [2/2] 2.39ns
.preheader8.preheader:567  %A = load i32* %context_Intermediate_Hash_addr, align 4

ST_1: context_Intermediate_Hash_addr_1 [1/1] 0.00ns
.preheader8.preheader:568  %context_Intermediate_Hash_addr_1 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 1

ST_1: B [2/2] 2.39ns
.preheader8.preheader:569  %B = load i32* %context_Intermediate_Hash_addr_1, align 4


 <State 2>: 6.91ns
ST_2: context_Message_Block_load [1/2] 2.39ns
.preheader8.preheader:7  %context_Message_Block_load = load i8* %context_Message_Block_addr, align 1

ST_2: context_Message_Block_load_1 [1/2] 2.39ns
.preheader8.preheader:10  %context_Message_Block_load_1 = load i8* %context_Message_Block_addr_1, align 1

ST_2: context_Message_Block_addr_2 [1/1] 0.00ns
.preheader8.preheader:11  %context_Message_Block_addr_2 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 2

ST_2: context_Message_Block_load_2 [2/2] 2.39ns
.preheader8.preheader:12  %context_Message_Block_load_2 = load i8* %context_Message_Block_addr_2, align 1

ST_2: context_Message_Block_addr_3 [1/1] 0.00ns
.preheader8.preheader:13  %context_Message_Block_addr_3 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 3

ST_2: context_Message_Block_load_3 [2/2] 2.39ns
.preheader8.preheader:14  %context_Message_Block_load_3 = load i8* %context_Message_Block_addr_3, align 1

ST_2: A [1/2] 2.39ns
.preheader8.preheader:567  %A = load i32* %context_Intermediate_Hash_addr, align 4

ST_2: B [1/2] 2.39ns
.preheader8.preheader:569  %B = load i32* %context_Intermediate_Hash_addr_1, align 4

ST_2: context_Intermediate_Hash_addr_2 [1/1] 0.00ns
.preheader8.preheader:570  %context_Intermediate_Hash_addr_2 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 2

ST_2: C [2/2] 2.39ns
.preheader8.preheader:571  %C = load i32* %context_Intermediate_Hash_addr_2, align 4

ST_2: context_Intermediate_Hash_addr_3 [1/1] 0.00ns
.preheader8.preheader:572  %context_Intermediate_Hash_addr_3 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 3

ST_2: D [2/2] 2.39ns
.preheader8.preheader:573  %D = load i32* %context_Intermediate_Hash_addr_3, align 4

ST_2: tmp_4 [1/1] 4.52ns
.preheader8.preheader:576  %tmp_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A)


 <State 3>: 5.10ns
ST_3: W_addr [1/1] 0.00ns
.preheader8.preheader:8  %W_addr = getelementptr inbounds [80 x i32]* %W, i64 0, i64 0

ST_3: context_Message_Block_load_2 [1/2] 2.39ns
.preheader8.preheader:12  %context_Message_Block_load_2 = load i8* %context_Message_Block_addr_2, align 1

ST_3: context_Message_Block_load_3 [1/2] 2.39ns
.preheader8.preheader:14  %context_Message_Block_load_3 = load i8* %context_Message_Block_addr_3, align 1

ST_3: tmp_s [1/1] 0.00ns
.preheader8.preheader:15  %tmp_s = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load, i8 %context_Message_Block_load_1, i8 %context_Message_Block_load_2, i8 %context_Message_Block_load_3)

ST_3: stg_193 [1/1] 2.71ns
.preheader8.preheader:16  store i32 %tmp_s, i32* %W_addr, align 16

ST_3: context_Message_Block_addr_16 [1/1] 0.00ns
.preheader8.preheader:17  %context_Message_Block_addr_16 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 4

ST_3: context_Message_Block_load_16 [2/2] 2.39ns
.preheader8.preheader:18  %context_Message_Block_load_16 = load i8* %context_Message_Block_addr_16, align 1

ST_3: context_Message_Block_addr_17 [1/1] 0.00ns
.preheader8.preheader:20  %context_Message_Block_addr_17 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 5

ST_3: context_Message_Block_load_17 [2/2] 2.39ns
.preheader8.preheader:21  %context_Message_Block_load_17 = load i8* %context_Message_Block_addr_17, align 1

ST_3: C [1/2] 2.39ns
.preheader8.preheader:571  %C = load i32* %context_Intermediate_Hash_addr_2, align 4

ST_3: D [1/2] 2.39ns
.preheader8.preheader:573  %D = load i32* %context_Intermediate_Hash_addr_3, align 4

ST_3: context_Intermediate_Hash_addr_4 [1/1] 0.00ns
.preheader8.preheader:574  %context_Intermediate_Hash_addr_4 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 4

ST_3: E [2/2] 2.39ns
.preheader8.preheader:575  %E = load i32* %context_Intermediate_Hash_addr_4, align 4

ST_3: context_Intermediate_Hash_load [2/2] 2.39ns
.preheader8.preheader:1699  %context_Intermediate_Hash_load = load i32* %context_Intermediate_Hash_addr, align 4


 <State 4>: 8.30ns
ST_4: context_Message_Block_load_16 [1/2] 2.39ns
.preheader8.preheader:18  %context_Message_Block_load_16 = load i8* %context_Message_Block_addr_16, align 1

ST_4: context_Message_Block_load_17 [1/2] 2.39ns
.preheader8.preheader:21  %context_Message_Block_load_17 = load i8* %context_Message_Block_addr_17, align 1

ST_4: context_Message_Block_addr_18 [1/1] 0.00ns
.preheader8.preheader:22  %context_Message_Block_addr_18 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 6

ST_4: context_Message_Block_load_18 [2/2] 2.39ns
.preheader8.preheader:23  %context_Message_Block_load_18 = load i8* %context_Message_Block_addr_18, align 1

ST_4: context_Message_Block_addr_19 [1/1] 0.00ns
.preheader8.preheader:24  %context_Message_Block_addr_19 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 7

ST_4: context_Message_Block_load_19 [2/2] 2.39ns
.preheader8.preheader:25  %context_Message_Block_load_19 = load i8* %context_Message_Block_addr_19, align 1

ST_4: E [1/2] 2.39ns
.preheader8.preheader:575  %E = load i32* %context_Intermediate_Hash_addr_4, align 4

ST_4: tmp_5 [1/1] 0.00ns (grouped into LUT with out node tmp_8)
.preheader8.preheader:577  %tmp_5 = and i32 %C, %B

ST_4: tmp_6 [1/1] 0.00ns (grouped into LUT with out node tmp_8)
.preheader8.preheader:578  %tmp_6 = xor i32 %B, -1

ST_4: tmp_7 [1/1] 0.00ns (grouped into LUT with out node tmp_8)
.preheader8.preheader:579  %tmp_7 = and i32 %D, %tmp_6

ST_4: tmp_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:580  %tmp_8 = or i32 %tmp_7, %tmp_5

ST_4: tmp_9 [1/1] 1.97ns
.preheader8.preheader:581  %tmp_9 = add i32 %tmp_4, 1518500249

ST_4: tmp_10 [1/1] 1.97ns
.preheader8.preheader:582  %tmp_10 = add i32 %E, %tmp_9

ST_4: tmp_11 [1/1] 1.97ns
.preheader8.preheader:583  %tmp_11 = add i32 %tmp_8, %tmp_10

ST_4: temp_1 [1/1] 1.97ns
.preheader8.preheader:584  %temp_1 = add i32 %tmp_s, %tmp_11

ST_4: context_Intermediate_Hash_load [1/2] 2.39ns
.preheader8.preheader:1699  %context_Intermediate_Hash_load = load i32* %context_Intermediate_Hash_addr, align 4

ST_4: context_Intermediate_Hash_load_1 [2/2] 2.39ns
.preheader8.preheader:1702  %context_Intermediate_Hash_load_1 = load i32* %context_Intermediate_Hash_addr_1, align 4

ST_4: context_Intermediate_Hash_load_2 [2/2] 2.39ns
.preheader8.preheader:1705  %context_Intermediate_Hash_load_2 = load i32* %context_Intermediate_Hash_addr_2, align 4


 <State 5>: 5.10ns
ST_5: W_addr_1 [1/1] 0.00ns
.preheader8.preheader:19  %W_addr_1 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 1

ST_5: context_Message_Block_load_18 [1/2] 2.39ns
.preheader8.preheader:23  %context_Message_Block_load_18 = load i8* %context_Message_Block_addr_18, align 1

ST_5: context_Message_Block_load_19 [1/2] 2.39ns
.preheader8.preheader:25  %context_Message_Block_load_19 = load i8* %context_Message_Block_addr_19, align 1

ST_5: W_addr_157_loc_assign_1 [1/1] 0.00ns
.preheader8.preheader:26  %W_addr_157_loc_assign_1 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_16, i8 %context_Message_Block_load_17, i8 %context_Message_Block_load_18, i8 %context_Message_Block_load_19)

ST_5: stg_225 [1/1] 2.71ns
.preheader8.preheader:27  store i32 %W_addr_157_loc_assign_1, i32* %W_addr_1, align 4

ST_5: context_Message_Block_addr_20 [1/1] 0.00ns
.preheader8.preheader:28  %context_Message_Block_addr_20 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 8

ST_5: context_Message_Block_load_20 [2/2] 2.39ns
.preheader8.preheader:29  %context_Message_Block_load_20 = load i8* %context_Message_Block_addr_20, align 1

ST_5: context_Message_Block_addr_21 [1/1] 0.00ns
.preheader8.preheader:31  %context_Message_Block_addr_21 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 9

ST_5: context_Message_Block_load_21 [2/2] 2.39ns
.preheader8.preheader:32  %context_Message_Block_load_21 = load i8* %context_Message_Block_addr_21, align 1

ST_5: call_ret1 [1/1] 4.52ns
.preheader8.preheader:585  %call_ret1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A, i32 %B, i32 %C, i32 %D, i32 %temp_1)

ST_5: call_ret2 [1/1] 0.00ns
.preheader8.preheader:586  %call_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 0

ST_5: A_ret [1/1] 0.00ns
.preheader8.preheader:587  %A_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 1

ST_5: B_ret [1/1] 0.00ns
.preheader8.preheader:588  %B_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 2

ST_5: C_ret [1/1] 0.00ns
.preheader8.preheader:589  %C_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 3

ST_5: D_ret [1/1] 0.00ns
.preheader8.preheader:590  %D_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 4

ST_5: context_Intermediate_Hash_load_1 [1/2] 2.39ns
.preheader8.preheader:1702  %context_Intermediate_Hash_load_1 = load i32* %context_Intermediate_Hash_addr_1, align 4

ST_5: context_Intermediate_Hash_load_2 [1/2] 2.39ns
.preheader8.preheader:1705  %context_Intermediate_Hash_load_2 = load i32* %context_Intermediate_Hash_addr_2, align 4

ST_5: context_Intermediate_Hash_load_3 [2/2] 2.39ns
.preheader8.preheader:1708  %context_Intermediate_Hash_load_3 = load i32* %context_Intermediate_Hash_addr_3, align 4

ST_5: context_Intermediate_Hash_load_4 [2/2] 2.39ns
.preheader8.preheader:1711  %context_Intermediate_Hash_load_4 = load i32* %context_Intermediate_Hash_addr_4, align 4


 <State 6>: 8.46ns
ST_6: context_Message_Block_load_20 [1/2] 2.39ns
.preheader8.preheader:29  %context_Message_Block_load_20 = load i8* %context_Message_Block_addr_20, align 1

ST_6: context_Message_Block_load_21 [1/2] 2.39ns
.preheader8.preheader:32  %context_Message_Block_load_21 = load i8* %context_Message_Block_addr_21, align 1

ST_6: context_Message_Block_addr_22 [1/1] 0.00ns
.preheader8.preheader:33  %context_Message_Block_addr_22 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 10

ST_6: context_Message_Block_load_22 [2/2] 2.39ns
.preheader8.preheader:34  %context_Message_Block_load_22 = load i8* %context_Message_Block_addr_22, align 1

ST_6: context_Message_Block_addr_23 [1/1] 0.00ns
.preheader8.preheader:35  %context_Message_Block_addr_23 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 11

ST_6: context_Message_Block_load_23 [2/2] 2.39ns
.preheader8.preheader:36  %context_Message_Block_load_23 = load i8* %context_Message_Block_addr_23, align 1

ST_6: tmp_33_1 [1/1] 4.52ns
.preheader8.preheader:591  %tmp_33_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret)

ST_6: tmp_34_1 [1/1] 0.00ns (grouped into LUT with out node tmp_37_1)
.preheader8.preheader:592  %tmp_34_1 = and i32 %C_ret, %B_ret

ST_6: tmp_35_1 [1/1] 0.00ns (grouped into LUT with out node tmp_37_1)
.preheader8.preheader:593  %tmp_35_1 = xor i32 %B_ret, -1

ST_6: tmp_36_1 [1/1] 0.00ns (grouped into LUT with out node tmp_37_1)
.preheader8.preheader:594  %tmp_36_1 = and i32 %D_ret, %tmp_35_1

ST_6: tmp_37_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:595  %tmp_37_1 = or i32 %tmp_36_1, %tmp_34_1

ST_6: tmp_39_1 [1/1] 1.97ns
.preheader8.preheader:596  %tmp_39_1 = add i32 %tmp_33_1, 1518500249

ST_6: tmp_40_1 [1/1] 1.97ns
.preheader8.preheader:597  %tmp_40_1 = add i32 %call_ret2, %tmp_39_1

ST_6: context_Intermediate_Hash_load_3 [1/2] 2.39ns
.preheader8.preheader:1708  %context_Intermediate_Hash_load_3 = load i32* %context_Intermediate_Hash_addr_3, align 4

ST_6: context_Intermediate_Hash_load_4 [1/2] 2.39ns
.preheader8.preheader:1711  %context_Intermediate_Hash_load_4 = load i32* %context_Intermediate_Hash_addr_4, align 4


 <State 7>: 8.46ns
ST_7: W_addr_2 [1/1] 0.00ns
.preheader8.preheader:30  %W_addr_2 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 2

ST_7: context_Message_Block_load_22 [1/2] 2.39ns
.preheader8.preheader:34  %context_Message_Block_load_22 = load i8* %context_Message_Block_addr_22, align 1

ST_7: context_Message_Block_load_23 [1/2] 2.39ns
.preheader8.preheader:36  %context_Message_Block_load_23 = load i8* %context_Message_Block_addr_23, align 1

ST_7: W_addr_262_loc_assign_1 [1/1] 0.00ns
.preheader8.preheader:37  %W_addr_262_loc_assign_1 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_20, i8 %context_Message_Block_load_21, i8 %context_Message_Block_load_22, i8 %context_Message_Block_load_23)

ST_7: stg_259 [1/1] 2.71ns
.preheader8.preheader:38  store i32 %W_addr_262_loc_assign_1, i32* %W_addr_2, align 8

ST_7: context_Message_Block_addr_24 [1/1] 0.00ns
.preheader8.preheader:39  %context_Message_Block_addr_24 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 12

ST_7: context_Message_Block_load_24 [2/2] 2.39ns
.preheader8.preheader:40  %context_Message_Block_load_24 = load i8* %context_Message_Block_addr_24, align 1

ST_7: context_Message_Block_addr_25 [1/1] 0.00ns
.preheader8.preheader:42  %context_Message_Block_addr_25 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 13

ST_7: context_Message_Block_load_25 [2/2] 2.39ns
.preheader8.preheader:43  %context_Message_Block_load_25 = load i8* %context_Message_Block_addr_25, align 1

ST_7: tmp_41_1 [1/1] 1.97ns
.preheader8.preheader:598  %tmp_41_1 = add i32 %tmp_37_1, %tmp_40_1

ST_7: temp_1_1 [1/1] 1.97ns
.preheader8.preheader:599  %temp_1_1 = add i32 %W_addr_157_loc_assign_1, %tmp_41_1

ST_7: call_ret47_1 [1/1] 4.52ns
.preheader8.preheader:600  %call_ret47_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret, i32 %B_ret, i32 %C_ret, i32 %D_ret, i32 %temp_1_1)

ST_7: call_ret23_1 [1/1] 0.00ns
.preheader8.preheader:601  %call_ret23_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 0

ST_7: A_ret_1 [1/1] 0.00ns
.preheader8.preheader:602  %A_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 1

ST_7: B_ret_1 [1/1] 0.00ns
.preheader8.preheader:603  %B_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 2

ST_7: C_ret_1 [1/1] 0.00ns
.preheader8.preheader:604  %C_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 3

ST_7: D_ret_1 [1/1] 0.00ns
.preheader8.preheader:605  %D_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 4


 <State 8>: 8.46ns
ST_8: context_Message_Block_load_24 [1/2] 2.39ns
.preheader8.preheader:40  %context_Message_Block_load_24 = load i8* %context_Message_Block_addr_24, align 1

ST_8: context_Message_Block_load_25 [1/2] 2.39ns
.preheader8.preheader:43  %context_Message_Block_load_25 = load i8* %context_Message_Block_addr_25, align 1

ST_8: context_Message_Block_addr_26 [1/1] 0.00ns
.preheader8.preheader:44  %context_Message_Block_addr_26 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 14

ST_8: context_Message_Block_load_26 [2/2] 2.39ns
.preheader8.preheader:45  %context_Message_Block_load_26 = load i8* %context_Message_Block_addr_26, align 1

ST_8: context_Message_Block_addr_27 [1/1] 0.00ns
.preheader8.preheader:46  %context_Message_Block_addr_27 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 15

ST_8: context_Message_Block_load_27 [2/2] 2.39ns
.preheader8.preheader:47  %context_Message_Block_load_27 = load i8* %context_Message_Block_addr_27, align 1

ST_8: tmp_33_2 [1/1] 4.52ns
.preheader8.preheader:606  %tmp_33_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_1)

ST_8: tmp_34_2 [1/1] 0.00ns (grouped into LUT with out node tmp_37_2)
.preheader8.preheader:607  %tmp_34_2 = and i32 %C_ret_1, %B_ret_1

ST_8: tmp_35_2 [1/1] 0.00ns (grouped into LUT with out node tmp_37_2)
.preheader8.preheader:608  %tmp_35_2 = xor i32 %B_ret_1, -1

ST_8: tmp_36_2 [1/1] 0.00ns (grouped into LUT with out node tmp_37_2)
.preheader8.preheader:609  %tmp_36_2 = and i32 %D_ret_1, %tmp_35_2

ST_8: tmp_37_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:610  %tmp_37_2 = or i32 %tmp_36_2, %tmp_34_2

ST_8: tmp_39_2 [1/1] 1.97ns
.preheader8.preheader:611  %tmp_39_2 = add i32 %tmp_33_2, 1518500249

ST_8: tmp_40_2 [1/1] 1.97ns
.preheader8.preheader:612  %tmp_40_2 = add i32 %call_ret23_1, %tmp_39_2


 <State 9>: 8.46ns
ST_9: W_addr_3 [1/1] 0.00ns
.preheader8.preheader:41  %W_addr_3 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 3

ST_9: context_Message_Block_load_26 [1/2] 2.39ns
.preheader8.preheader:45  %context_Message_Block_load_26 = load i8* %context_Message_Block_addr_26, align 1

ST_9: context_Message_Block_load_27 [1/2] 2.39ns
.preheader8.preheader:47  %context_Message_Block_load_27 = load i8* %context_Message_Block_addr_27, align 1

ST_9: W_addr_367_loc_assign_2 [1/1] 0.00ns
.preheader8.preheader:48  %W_addr_367_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_24, i8 %context_Message_Block_load_25, i8 %context_Message_Block_load_26, i8 %context_Message_Block_load_27)

ST_9: stg_289 [1/1] 2.71ns
.preheader8.preheader:49  store i32 %W_addr_367_loc_assign_2, i32* %W_addr_3, align 4

ST_9: context_Message_Block_addr_4 [1/1] 0.00ns
.preheader8.preheader:50  %context_Message_Block_addr_4 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 16

ST_9: context_Message_Block_load_4 [2/2] 2.39ns
.preheader8.preheader:51  %context_Message_Block_load_4 = load i8* %context_Message_Block_addr_4, align 1

ST_9: context_Message_Block_addr_28 [1/1] 0.00ns
.preheader8.preheader:53  %context_Message_Block_addr_28 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 17

ST_9: context_Message_Block_load_28 [2/2] 2.39ns
.preheader8.preheader:54  %context_Message_Block_load_28 = load i8* %context_Message_Block_addr_28, align 1

ST_9: tmp_41_2 [1/1] 1.97ns
.preheader8.preheader:613  %tmp_41_2 = add i32 %tmp_37_2, %tmp_40_2

ST_9: temp_1_2 [1/1] 1.97ns
.preheader8.preheader:614  %temp_1_2 = add i32 %W_addr_262_loc_assign_1, %tmp_41_2

ST_9: call_ret47_2 [1/1] 4.52ns
.preheader8.preheader:615  %call_ret47_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_1, i32 %B_ret_1, i32 %C_ret_1, i32 %D_ret_1, i32 %temp_1_2)

ST_9: call_ret23_2 [1/1] 0.00ns
.preheader8.preheader:616  %call_ret23_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 0

ST_9: A_ret_2 [1/1] 0.00ns
.preheader8.preheader:617  %A_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 1

ST_9: B_ret_2 [1/1] 0.00ns
.preheader8.preheader:618  %B_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 2

ST_9: C_ret_2 [1/1] 0.00ns
.preheader8.preheader:619  %C_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 3

ST_9: D_ret_2 [1/1] 0.00ns
.preheader8.preheader:620  %D_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 4


 <State 10>: 8.46ns
ST_10: context_Message_Block_load_4 [1/2] 2.39ns
.preheader8.preheader:51  %context_Message_Block_load_4 = load i8* %context_Message_Block_addr_4, align 1

ST_10: context_Message_Block_load_28 [1/2] 2.39ns
.preheader8.preheader:54  %context_Message_Block_load_28 = load i8* %context_Message_Block_addr_28, align 1

ST_10: context_Message_Block_addr_29 [1/1] 0.00ns
.preheader8.preheader:55  %context_Message_Block_addr_29 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 18

ST_10: context_Message_Block_load_29 [2/2] 2.39ns
.preheader8.preheader:56  %context_Message_Block_load_29 = load i8* %context_Message_Block_addr_29, align 1

ST_10: context_Message_Block_addr_30 [1/1] 0.00ns
.preheader8.preheader:57  %context_Message_Block_addr_30 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 19

ST_10: context_Message_Block_load_30 [2/2] 2.39ns
.preheader8.preheader:58  %context_Message_Block_load_30 = load i8* %context_Message_Block_addr_30, align 1

ST_10: tmp_33_3 [1/1] 4.52ns
.preheader8.preheader:621  %tmp_33_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_2)

ST_10: tmp_34_3 [1/1] 0.00ns (grouped into LUT with out node tmp_37_3)
.preheader8.preheader:622  %tmp_34_3 = and i32 %C_ret_2, %B_ret_2

ST_10: tmp_35_3 [1/1] 0.00ns (grouped into LUT with out node tmp_37_3)
.preheader8.preheader:623  %tmp_35_3 = xor i32 %B_ret_2, -1

ST_10: tmp_36_3 [1/1] 0.00ns (grouped into LUT with out node tmp_37_3)
.preheader8.preheader:624  %tmp_36_3 = and i32 %D_ret_2, %tmp_35_3

ST_10: tmp_37_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:625  %tmp_37_3 = or i32 %tmp_36_3, %tmp_34_3

ST_10: tmp_39_3 [1/1] 1.97ns
.preheader8.preheader:626  %tmp_39_3 = add i32 %tmp_33_3, 1518500249

ST_10: tmp_40_3 [1/1] 1.97ns
.preheader8.preheader:627  %tmp_40_3 = add i32 %call_ret23_2, %tmp_39_3


 <State 11>: 8.46ns
ST_11: W_addr_4 [1/1] 0.00ns
.preheader8.preheader:52  %W_addr_4 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 4

ST_11: context_Message_Block_load_29 [1/2] 2.39ns
.preheader8.preheader:56  %context_Message_Block_load_29 = load i8* %context_Message_Block_addr_29, align 1

ST_11: context_Message_Block_load_30 [1/2] 2.39ns
.preheader8.preheader:58  %context_Message_Block_load_30 = load i8* %context_Message_Block_addr_30, align 1

ST_11: W_addr_470_loc_assign_2 [1/1] 0.00ns
.preheader8.preheader:59  %W_addr_470_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_4, i8 %context_Message_Block_load_28, i8 %context_Message_Block_load_29, i8 %context_Message_Block_load_30)

ST_11: stg_319 [1/1] 2.71ns
.preheader8.preheader:60  store i32 %W_addr_470_loc_assign_2, i32* %W_addr_4, align 16

ST_11: context_Message_Block_addr_5 [1/1] 0.00ns
.preheader8.preheader:61  %context_Message_Block_addr_5 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 20

ST_11: context_Message_Block_load_5 [2/2] 2.39ns
.preheader8.preheader:62  %context_Message_Block_load_5 = load i8* %context_Message_Block_addr_5, align 1

ST_11: context_Message_Block_addr_31 [1/1] 0.00ns
.preheader8.preheader:64  %context_Message_Block_addr_31 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 21

ST_11: context_Message_Block_load_31 [2/2] 2.39ns
.preheader8.preheader:65  %context_Message_Block_load_31 = load i8* %context_Message_Block_addr_31, align 1

ST_11: tmp_41_3 [1/1] 1.97ns
.preheader8.preheader:628  %tmp_41_3 = add i32 %tmp_37_3, %tmp_40_3

ST_11: temp_1_3 [1/1] 1.97ns
.preheader8.preheader:629  %temp_1_3 = add i32 %W_addr_367_loc_assign_2, %tmp_41_3

ST_11: call_ret47_3 [1/1] 4.52ns
.preheader8.preheader:630  %call_ret47_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_2, i32 %B_ret_2, i32 %C_ret_2, i32 %D_ret_2, i32 %temp_1_3)

ST_11: call_ret23_3 [1/1] 0.00ns
.preheader8.preheader:631  %call_ret23_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 0

ST_11: A_ret_3 [1/1] 0.00ns
.preheader8.preheader:632  %A_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 1

ST_11: B_ret_3 [1/1] 0.00ns
.preheader8.preheader:633  %B_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 2

ST_11: C_ret_3 [1/1] 0.00ns
.preheader8.preheader:634  %C_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 3

ST_11: D_ret_3 [1/1] 0.00ns
.preheader8.preheader:635  %D_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 4


 <State 12>: 8.46ns
ST_12: context_Message_Block_load_5 [1/2] 2.39ns
.preheader8.preheader:62  %context_Message_Block_load_5 = load i8* %context_Message_Block_addr_5, align 1

ST_12: context_Message_Block_load_31 [1/2] 2.39ns
.preheader8.preheader:65  %context_Message_Block_load_31 = load i8* %context_Message_Block_addr_31, align 1

ST_12: context_Message_Block_addr_32 [1/1] 0.00ns
.preheader8.preheader:66  %context_Message_Block_addr_32 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 22

ST_12: context_Message_Block_load_32 [2/2] 2.39ns
.preheader8.preheader:67  %context_Message_Block_load_32 = load i8* %context_Message_Block_addr_32, align 1

ST_12: context_Message_Block_addr_33 [1/1] 0.00ns
.preheader8.preheader:68  %context_Message_Block_addr_33 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 23

ST_12: context_Message_Block_load_33 [2/2] 2.39ns
.preheader8.preheader:69  %context_Message_Block_load_33 = load i8* %context_Message_Block_addr_33, align 1

ST_12: tmp_33_4 [1/1] 4.52ns
.preheader8.preheader:636  %tmp_33_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_3)

ST_12: tmp_34_4 [1/1] 0.00ns (grouped into LUT with out node tmp_37_4)
.preheader8.preheader:637  %tmp_34_4 = and i32 %C_ret_3, %B_ret_3

ST_12: tmp_35_4 [1/1] 0.00ns (grouped into LUT with out node tmp_37_4)
.preheader8.preheader:638  %tmp_35_4 = xor i32 %B_ret_3, -1

ST_12: tmp_36_4 [1/1] 0.00ns (grouped into LUT with out node tmp_37_4)
.preheader8.preheader:639  %tmp_36_4 = and i32 %D_ret_3, %tmp_35_4

ST_12: tmp_37_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:640  %tmp_37_4 = or i32 %tmp_36_4, %tmp_34_4

ST_12: tmp_39_4 [1/1] 1.97ns
.preheader8.preheader:641  %tmp_39_4 = add i32 %tmp_33_4, 1518500249

ST_12: tmp_40_4 [1/1] 1.97ns
.preheader8.preheader:642  %tmp_40_4 = add i32 %call_ret23_3, %tmp_39_4


 <State 13>: 8.46ns
ST_13: W_addr_5 [1/1] 0.00ns
.preheader8.preheader:63  %W_addr_5 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 5

ST_13: context_Message_Block_load_32 [1/2] 2.39ns
.preheader8.preheader:67  %context_Message_Block_load_32 = load i8* %context_Message_Block_addr_32, align 1

ST_13: context_Message_Block_load_33 [1/2] 2.39ns
.preheader8.preheader:69  %context_Message_Block_load_33 = load i8* %context_Message_Block_addr_33, align 1

ST_13: W_addr_573_loc_assign_2 [1/1] 0.00ns
.preheader8.preheader:70  %W_addr_573_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_5, i8 %context_Message_Block_load_31, i8 %context_Message_Block_load_32, i8 %context_Message_Block_load_33)

ST_13: stg_349 [1/1] 2.71ns
.preheader8.preheader:71  store i32 %W_addr_573_loc_assign_2, i32* %W_addr_5, align 4

ST_13: context_Message_Block_addr_6 [1/1] 0.00ns
.preheader8.preheader:72  %context_Message_Block_addr_6 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 24

ST_13: context_Message_Block_load_6 [2/2] 2.39ns
.preheader8.preheader:73  %context_Message_Block_load_6 = load i8* %context_Message_Block_addr_6, align 1

ST_13: context_Message_Block_addr_34 [1/1] 0.00ns
.preheader8.preheader:75  %context_Message_Block_addr_34 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 25

ST_13: context_Message_Block_load_34 [2/2] 2.39ns
.preheader8.preheader:76  %context_Message_Block_load_34 = load i8* %context_Message_Block_addr_34, align 1

ST_13: tmp_41_4 [1/1] 1.97ns
.preheader8.preheader:643  %tmp_41_4 = add i32 %tmp_37_4, %tmp_40_4

ST_13: temp_1_4 [1/1] 1.97ns
.preheader8.preheader:644  %temp_1_4 = add i32 %W_addr_470_loc_assign_2, %tmp_41_4

ST_13: call_ret47_4 [1/1] 4.52ns
.preheader8.preheader:645  %call_ret47_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_3, i32 %B_ret_3, i32 %C_ret_3, i32 %D_ret_3, i32 %temp_1_4)

ST_13: call_ret23_4 [1/1] 0.00ns
.preheader8.preheader:646  %call_ret23_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 0

ST_13: A_ret_4 [1/1] 0.00ns
.preheader8.preheader:647  %A_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 1

ST_13: B_ret_4 [1/1] 0.00ns
.preheader8.preheader:648  %B_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 2

ST_13: C_ret_4 [1/1] 0.00ns
.preheader8.preheader:649  %C_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 3

ST_13: D_ret_4 [1/1] 0.00ns
.preheader8.preheader:650  %D_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 4


 <State 14>: 8.46ns
ST_14: context_Message_Block_load_6 [1/2] 2.39ns
.preheader8.preheader:73  %context_Message_Block_load_6 = load i8* %context_Message_Block_addr_6, align 1

ST_14: context_Message_Block_load_34 [1/2] 2.39ns
.preheader8.preheader:76  %context_Message_Block_load_34 = load i8* %context_Message_Block_addr_34, align 1

ST_14: context_Message_Block_addr_35 [1/1] 0.00ns
.preheader8.preheader:77  %context_Message_Block_addr_35 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 26

ST_14: context_Message_Block_load_35 [2/2] 2.39ns
.preheader8.preheader:78  %context_Message_Block_load_35 = load i8* %context_Message_Block_addr_35, align 1

ST_14: context_Message_Block_addr_36 [1/1] 0.00ns
.preheader8.preheader:79  %context_Message_Block_addr_36 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 27

ST_14: context_Message_Block_load_36 [2/2] 2.39ns
.preheader8.preheader:80  %context_Message_Block_load_36 = load i8* %context_Message_Block_addr_36, align 1

ST_14: tmp_33_5 [1/1] 4.52ns
.preheader8.preheader:651  %tmp_33_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_4)

ST_14: tmp_34_5 [1/1] 0.00ns (grouped into LUT with out node tmp_37_5)
.preheader8.preheader:652  %tmp_34_5 = and i32 %C_ret_4, %B_ret_4

ST_14: tmp_35_5 [1/1] 0.00ns (grouped into LUT with out node tmp_37_5)
.preheader8.preheader:653  %tmp_35_5 = xor i32 %B_ret_4, -1

ST_14: tmp_36_5 [1/1] 0.00ns (grouped into LUT with out node tmp_37_5)
.preheader8.preheader:654  %tmp_36_5 = and i32 %D_ret_4, %tmp_35_5

ST_14: tmp_37_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:655  %tmp_37_5 = or i32 %tmp_36_5, %tmp_34_5

ST_14: tmp_39_5 [1/1] 1.97ns
.preheader8.preheader:656  %tmp_39_5 = add i32 %tmp_33_5, 1518500249

ST_14: tmp_40_5 [1/1] 1.97ns
.preheader8.preheader:657  %tmp_40_5 = add i32 %call_ret23_4, %tmp_39_5


 <State 15>: 8.46ns
ST_15: W_addr_6 [1/1] 0.00ns
.preheader8.preheader:74  %W_addr_6 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 6

ST_15: context_Message_Block_load_35 [1/2] 2.39ns
.preheader8.preheader:78  %context_Message_Block_load_35 = load i8* %context_Message_Block_addr_35, align 1

ST_15: context_Message_Block_load_36 [1/2] 2.39ns
.preheader8.preheader:80  %context_Message_Block_load_36 = load i8* %context_Message_Block_addr_36, align 1

ST_15: W_addr_676_loc_assign_2 [1/1] 0.00ns
.preheader8.preheader:81  %W_addr_676_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_6, i8 %context_Message_Block_load_34, i8 %context_Message_Block_load_35, i8 %context_Message_Block_load_36)

ST_15: stg_379 [1/1] 2.71ns
.preheader8.preheader:82  store i32 %W_addr_676_loc_assign_2, i32* %W_addr_6, align 8

ST_15: context_Message_Block_addr_7 [1/1] 0.00ns
.preheader8.preheader:83  %context_Message_Block_addr_7 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 28

ST_15: context_Message_Block_load_7 [2/2] 2.39ns
.preheader8.preheader:84  %context_Message_Block_load_7 = load i8* %context_Message_Block_addr_7, align 1

ST_15: context_Message_Block_addr_37 [1/1] 0.00ns
.preheader8.preheader:86  %context_Message_Block_addr_37 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 29

ST_15: context_Message_Block_load_37 [2/2] 2.39ns
.preheader8.preheader:87  %context_Message_Block_load_37 = load i8* %context_Message_Block_addr_37, align 1

ST_15: tmp_41_5 [1/1] 1.97ns
.preheader8.preheader:658  %tmp_41_5 = add i32 %tmp_37_5, %tmp_40_5

ST_15: temp_1_5 [1/1] 1.97ns
.preheader8.preheader:659  %temp_1_5 = add i32 %W_addr_573_loc_assign_2, %tmp_41_5

ST_15: call_ret47_5 [1/1] 4.52ns
.preheader8.preheader:660  %call_ret47_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_4, i32 %B_ret_4, i32 %C_ret_4, i32 %D_ret_4, i32 %temp_1_5)

ST_15: call_ret23_5 [1/1] 0.00ns
.preheader8.preheader:661  %call_ret23_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 0

ST_15: A_ret_5 [1/1] 0.00ns
.preheader8.preheader:662  %A_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 1

ST_15: B_ret_5 [1/1] 0.00ns
.preheader8.preheader:663  %B_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 2

ST_15: C_ret_5 [1/1] 0.00ns
.preheader8.preheader:664  %C_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 3

ST_15: D_ret_5 [1/1] 0.00ns
.preheader8.preheader:665  %D_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 4


 <State 16>: 8.46ns
ST_16: context_Message_Block_load_7 [1/2] 2.39ns
.preheader8.preheader:84  %context_Message_Block_load_7 = load i8* %context_Message_Block_addr_7, align 1

ST_16: context_Message_Block_load_37 [1/2] 2.39ns
.preheader8.preheader:87  %context_Message_Block_load_37 = load i8* %context_Message_Block_addr_37, align 1

ST_16: context_Message_Block_addr_38 [1/1] 0.00ns
.preheader8.preheader:88  %context_Message_Block_addr_38 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 30

ST_16: context_Message_Block_load_38 [2/2] 2.39ns
.preheader8.preheader:89  %context_Message_Block_load_38 = load i8* %context_Message_Block_addr_38, align 1

ST_16: context_Message_Block_addr_39 [1/1] 0.00ns
.preheader8.preheader:90  %context_Message_Block_addr_39 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 31

ST_16: context_Message_Block_load_39 [2/2] 2.39ns
.preheader8.preheader:91  %context_Message_Block_load_39 = load i8* %context_Message_Block_addr_39, align 1

ST_16: tmp_33_6 [1/1] 4.52ns
.preheader8.preheader:666  %tmp_33_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_5)

ST_16: tmp_34_6 [1/1] 0.00ns (grouped into LUT with out node tmp_37_6)
.preheader8.preheader:667  %tmp_34_6 = and i32 %C_ret_5, %B_ret_5

ST_16: tmp_35_6 [1/1] 0.00ns (grouped into LUT with out node tmp_37_6)
.preheader8.preheader:668  %tmp_35_6 = xor i32 %B_ret_5, -1

ST_16: tmp_36_6 [1/1] 0.00ns (grouped into LUT with out node tmp_37_6)
.preheader8.preheader:669  %tmp_36_6 = and i32 %D_ret_5, %tmp_35_6

ST_16: tmp_37_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:670  %tmp_37_6 = or i32 %tmp_36_6, %tmp_34_6

ST_16: tmp_39_6 [1/1] 1.97ns
.preheader8.preheader:671  %tmp_39_6 = add i32 %tmp_33_6, 1518500249

ST_16: tmp_40_6 [1/1] 1.97ns
.preheader8.preheader:672  %tmp_40_6 = add i32 %call_ret23_5, %tmp_39_6


 <State 17>: 8.46ns
ST_17: W_addr_7 [1/1] 0.00ns
.preheader8.preheader:85  %W_addr_7 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 7

ST_17: context_Message_Block_load_38 [1/2] 2.39ns
.preheader8.preheader:89  %context_Message_Block_load_38 = load i8* %context_Message_Block_addr_38, align 1

ST_17: context_Message_Block_load_39 [1/2] 2.39ns
.preheader8.preheader:91  %context_Message_Block_load_39 = load i8* %context_Message_Block_addr_39, align 1

ST_17: W_addr_779_loc_assign_2 [1/1] 0.00ns
.preheader8.preheader:92  %W_addr_779_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_7, i8 %context_Message_Block_load_37, i8 %context_Message_Block_load_38, i8 %context_Message_Block_load_39)

ST_17: stg_409 [1/1] 2.71ns
.preheader8.preheader:93  store i32 %W_addr_779_loc_assign_2, i32* %W_addr_7, align 4

ST_17: context_Message_Block_addr_8 [1/1] 0.00ns
.preheader8.preheader:94  %context_Message_Block_addr_8 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 32

ST_17: context_Message_Block_load_8 [2/2] 2.39ns
.preheader8.preheader:95  %context_Message_Block_load_8 = load i8* %context_Message_Block_addr_8, align 1

ST_17: context_Message_Block_addr_40 [1/1] 0.00ns
.preheader8.preheader:97  %context_Message_Block_addr_40 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 33

ST_17: context_Message_Block_load_40 [2/2] 2.39ns
.preheader8.preheader:98  %context_Message_Block_load_40 = load i8* %context_Message_Block_addr_40, align 1

ST_17: tmp_41_6 [1/1] 1.97ns
.preheader8.preheader:673  %tmp_41_6 = add i32 %tmp_37_6, %tmp_40_6

ST_17: temp_1_6 [1/1] 1.97ns
.preheader8.preheader:674  %temp_1_6 = add i32 %W_addr_676_loc_assign_2, %tmp_41_6

ST_17: call_ret47_6 [1/1] 4.52ns
.preheader8.preheader:675  %call_ret47_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_5, i32 %B_ret_5, i32 %C_ret_5, i32 %D_ret_5, i32 %temp_1_6)

ST_17: call_ret23_6 [1/1] 0.00ns
.preheader8.preheader:676  %call_ret23_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 0

ST_17: A_ret_6 [1/1] 0.00ns
.preheader8.preheader:677  %A_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 1

ST_17: B_ret_6 [1/1] 0.00ns
.preheader8.preheader:678  %B_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 2

ST_17: C_ret_6 [1/1] 0.00ns
.preheader8.preheader:679  %C_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 3

ST_17: D_ret_6 [1/1] 0.00ns
.preheader8.preheader:680  %D_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 4


 <State 18>: 8.46ns
ST_18: context_Message_Block_load_8 [1/2] 2.39ns
.preheader8.preheader:95  %context_Message_Block_load_8 = load i8* %context_Message_Block_addr_8, align 1

ST_18: context_Message_Block_load_40 [1/2] 2.39ns
.preheader8.preheader:98  %context_Message_Block_load_40 = load i8* %context_Message_Block_addr_40, align 1

ST_18: context_Message_Block_addr_41 [1/1] 0.00ns
.preheader8.preheader:99  %context_Message_Block_addr_41 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 34

ST_18: context_Message_Block_load_41 [2/2] 2.39ns
.preheader8.preheader:100  %context_Message_Block_load_41 = load i8* %context_Message_Block_addr_41, align 1

ST_18: context_Message_Block_addr_42 [1/1] 0.00ns
.preheader8.preheader:101  %context_Message_Block_addr_42 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 35

ST_18: context_Message_Block_load_42 [2/2] 2.39ns
.preheader8.preheader:102  %context_Message_Block_load_42 = load i8* %context_Message_Block_addr_42, align 1

ST_18: tmp_33_7 [1/1] 4.52ns
.preheader8.preheader:681  %tmp_33_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_6)

ST_18: tmp_34_7 [1/1] 0.00ns (grouped into LUT with out node tmp_37_7)
.preheader8.preheader:682  %tmp_34_7 = and i32 %C_ret_6, %B_ret_6

ST_18: tmp_35_7 [1/1] 0.00ns (grouped into LUT with out node tmp_37_7)
.preheader8.preheader:683  %tmp_35_7 = xor i32 %B_ret_6, -1

ST_18: tmp_36_7 [1/1] 0.00ns (grouped into LUT with out node tmp_37_7)
.preheader8.preheader:684  %tmp_36_7 = and i32 %D_ret_6, %tmp_35_7

ST_18: tmp_37_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:685  %tmp_37_7 = or i32 %tmp_36_7, %tmp_34_7

ST_18: tmp_39_7 [1/1] 1.97ns
.preheader8.preheader:686  %tmp_39_7 = add i32 %tmp_33_7, 1518500249

ST_18: tmp_40_7 [1/1] 1.97ns
.preheader8.preheader:687  %tmp_40_7 = add i32 %call_ret23_6, %tmp_39_7


 <State 19>: 8.46ns
ST_19: W_addr_8 [1/1] 0.00ns
.preheader8.preheader:96  %W_addr_8 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 8

ST_19: context_Message_Block_load_41 [1/2] 2.39ns
.preheader8.preheader:100  %context_Message_Block_load_41 = load i8* %context_Message_Block_addr_41, align 1

ST_19: context_Message_Block_load_42 [1/2] 2.39ns
.preheader8.preheader:102  %context_Message_Block_load_42 = load i8* %context_Message_Block_addr_42, align 1

ST_19: W_addr_882_loc_assign_2 [1/1] 0.00ns
.preheader8.preheader:103  %W_addr_882_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_8, i8 %context_Message_Block_load_40, i8 %context_Message_Block_load_41, i8 %context_Message_Block_load_42)

ST_19: stg_439 [1/1] 2.71ns
.preheader8.preheader:104  store i32 %W_addr_882_loc_assign_2, i32* %W_addr_8, align 16

ST_19: context_Message_Block_addr_9 [1/1] 0.00ns
.preheader8.preheader:105  %context_Message_Block_addr_9 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 36

ST_19: context_Message_Block_load_9 [2/2] 2.39ns
.preheader8.preheader:106  %context_Message_Block_load_9 = load i8* %context_Message_Block_addr_9, align 1

ST_19: context_Message_Block_addr_43 [1/1] 0.00ns
.preheader8.preheader:108  %context_Message_Block_addr_43 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 37

ST_19: context_Message_Block_load_43 [2/2] 2.39ns
.preheader8.preheader:109  %context_Message_Block_load_43 = load i8* %context_Message_Block_addr_43, align 1

ST_19: tmp_41_7 [1/1] 1.97ns
.preheader8.preheader:688  %tmp_41_7 = add i32 %tmp_37_7, %tmp_40_7

ST_19: temp_1_7 [1/1] 1.97ns
.preheader8.preheader:689  %temp_1_7 = add i32 %W_addr_779_loc_assign_2, %tmp_41_7

ST_19: call_ret47_7 [1/1] 4.52ns
.preheader8.preheader:690  %call_ret47_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_6, i32 %B_ret_6, i32 %C_ret_6, i32 %D_ret_6, i32 %temp_1_7)

ST_19: call_ret23_7 [1/1] 0.00ns
.preheader8.preheader:691  %call_ret23_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 0

ST_19: A_ret_7 [1/1] 0.00ns
.preheader8.preheader:692  %A_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 1

ST_19: B_ret_7 [1/1] 0.00ns
.preheader8.preheader:693  %B_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 2

ST_19: C_ret_7 [1/1] 0.00ns
.preheader8.preheader:694  %C_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 3

ST_19: D_ret_7 [1/1] 0.00ns
.preheader8.preheader:695  %D_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 4


 <State 20>: 8.46ns
ST_20: context_Message_Block_load_9 [1/2] 2.39ns
.preheader8.preheader:106  %context_Message_Block_load_9 = load i8* %context_Message_Block_addr_9, align 1

ST_20: context_Message_Block_load_43 [1/2] 2.39ns
.preheader8.preheader:109  %context_Message_Block_load_43 = load i8* %context_Message_Block_addr_43, align 1

ST_20: context_Message_Block_addr_44 [1/1] 0.00ns
.preheader8.preheader:110  %context_Message_Block_addr_44 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 38

ST_20: context_Message_Block_load_44 [2/2] 2.39ns
.preheader8.preheader:111  %context_Message_Block_load_44 = load i8* %context_Message_Block_addr_44, align 1

ST_20: context_Message_Block_addr_45 [1/1] 0.00ns
.preheader8.preheader:112  %context_Message_Block_addr_45 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 39

ST_20: context_Message_Block_load_45 [2/2] 2.39ns
.preheader8.preheader:113  %context_Message_Block_load_45 = load i8* %context_Message_Block_addr_45, align 1

ST_20: tmp_33_8 [1/1] 4.52ns
.preheader8.preheader:696  %tmp_33_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_7)

ST_20: tmp_34_8 [1/1] 0.00ns (grouped into LUT with out node tmp_37_8)
.preheader8.preheader:697  %tmp_34_8 = and i32 %C_ret_7, %B_ret_7

ST_20: tmp_35_8 [1/1] 0.00ns (grouped into LUT with out node tmp_37_8)
.preheader8.preheader:698  %tmp_35_8 = xor i32 %B_ret_7, -1

ST_20: tmp_36_8 [1/1] 0.00ns (grouped into LUT with out node tmp_37_8)
.preheader8.preheader:699  %tmp_36_8 = and i32 %D_ret_7, %tmp_35_8

ST_20: tmp_37_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:700  %tmp_37_8 = or i32 %tmp_36_8, %tmp_34_8

ST_20: tmp_39_8 [1/1] 1.97ns
.preheader8.preheader:701  %tmp_39_8 = add i32 %tmp_33_8, 1518500249

ST_20: tmp_40_8 [1/1] 1.97ns
.preheader8.preheader:702  %tmp_40_8 = add i32 %call_ret23_7, %tmp_39_8


 <State 21>: 8.46ns
ST_21: W_addr_9 [1/1] 0.00ns
.preheader8.preheader:107  %W_addr_9 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 9

ST_21: context_Message_Block_load_44 [1/2] 2.39ns
.preheader8.preheader:111  %context_Message_Block_load_44 = load i8* %context_Message_Block_addr_44, align 1

ST_21: context_Message_Block_load_45 [1/2] 2.39ns
.preheader8.preheader:113  %context_Message_Block_load_45 = load i8* %context_Message_Block_addr_45, align 1

ST_21: W_addr_985_loc_assign_3 [1/1] 0.00ns
.preheader8.preheader:114  %W_addr_985_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_9, i8 %context_Message_Block_load_43, i8 %context_Message_Block_load_44, i8 %context_Message_Block_load_45)

ST_21: stg_469 [1/1] 2.71ns
.preheader8.preheader:115  store i32 %W_addr_985_loc_assign_3, i32* %W_addr_9, align 4

ST_21: context_Message_Block_addr_10 [1/1] 0.00ns
.preheader8.preheader:116  %context_Message_Block_addr_10 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 40

ST_21: context_Message_Block_load_10 [2/2] 2.39ns
.preheader8.preheader:117  %context_Message_Block_load_10 = load i8* %context_Message_Block_addr_10, align 1

ST_21: context_Message_Block_addr_46 [1/1] 0.00ns
.preheader8.preheader:119  %context_Message_Block_addr_46 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 41

ST_21: context_Message_Block_load_46 [2/2] 2.39ns
.preheader8.preheader:120  %context_Message_Block_load_46 = load i8* %context_Message_Block_addr_46, align 1

ST_21: tmp_41_8 [1/1] 1.97ns
.preheader8.preheader:703  %tmp_41_8 = add i32 %tmp_37_8, %tmp_40_8

ST_21: temp_1_8 [1/1] 1.97ns
.preheader8.preheader:704  %temp_1_8 = add i32 %W_addr_882_loc_assign_2, %tmp_41_8

ST_21: call_ret47_8 [1/1] 4.52ns
.preheader8.preheader:705  %call_ret47_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_7, i32 %B_ret_7, i32 %C_ret_7, i32 %D_ret_7, i32 %temp_1_8)

ST_21: call_ret23_8 [1/1] 0.00ns
.preheader8.preheader:706  %call_ret23_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 0

ST_21: A_ret_8 [1/1] 0.00ns
.preheader8.preheader:707  %A_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 1

ST_21: B_ret_8 [1/1] 0.00ns
.preheader8.preheader:708  %B_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 2

ST_21: C_ret_8 [1/1] 0.00ns
.preheader8.preheader:709  %C_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 3

ST_21: D_ret_8 [1/1] 0.00ns
.preheader8.preheader:710  %D_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 4


 <State 22>: 8.46ns
ST_22: context_Message_Block_load_10 [1/2] 2.39ns
.preheader8.preheader:117  %context_Message_Block_load_10 = load i8* %context_Message_Block_addr_10, align 1

ST_22: context_Message_Block_load_46 [1/2] 2.39ns
.preheader8.preheader:120  %context_Message_Block_load_46 = load i8* %context_Message_Block_addr_46, align 1

ST_22: context_Message_Block_addr_47 [1/1] 0.00ns
.preheader8.preheader:121  %context_Message_Block_addr_47 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 42

ST_22: context_Message_Block_load_47 [2/2] 2.39ns
.preheader8.preheader:122  %context_Message_Block_load_47 = load i8* %context_Message_Block_addr_47, align 1

ST_22: context_Message_Block_addr_48 [1/1] 0.00ns
.preheader8.preheader:123  %context_Message_Block_addr_48 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 43

ST_22: context_Message_Block_load_48 [2/2] 2.39ns
.preheader8.preheader:124  %context_Message_Block_load_48 = load i8* %context_Message_Block_addr_48, align 1

ST_22: tmp_33_9 [1/1] 4.52ns
.preheader8.preheader:711  %tmp_33_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_8)

ST_22: tmp_34_9 [1/1] 0.00ns (grouped into LUT with out node tmp_37_9)
.preheader8.preheader:712  %tmp_34_9 = and i32 %C_ret_8, %B_ret_8

ST_22: tmp_35_9 [1/1] 0.00ns (grouped into LUT with out node tmp_37_9)
.preheader8.preheader:713  %tmp_35_9 = xor i32 %B_ret_8, -1

ST_22: tmp_36_9 [1/1] 0.00ns (grouped into LUT with out node tmp_37_9)
.preheader8.preheader:714  %tmp_36_9 = and i32 %D_ret_8, %tmp_35_9

ST_22: tmp_37_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:715  %tmp_37_9 = or i32 %tmp_36_9, %tmp_34_9

ST_22: tmp_39_9 [1/1] 1.97ns
.preheader8.preheader:716  %tmp_39_9 = add i32 %tmp_33_9, 1518500249

ST_22: tmp_40_9 [1/1] 1.97ns
.preheader8.preheader:717  %tmp_40_9 = add i32 %call_ret23_8, %tmp_39_9


 <State 23>: 8.46ns
ST_23: W_addr_10 [1/1] 0.00ns
.preheader8.preheader:118  %W_addr_10 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 10

ST_23: context_Message_Block_load_47 [1/2] 2.39ns
.preheader8.preheader:122  %context_Message_Block_load_47 = load i8* %context_Message_Block_addr_47, align 1

ST_23: context_Message_Block_load_48 [1/2] 2.39ns
.preheader8.preheader:124  %context_Message_Block_load_48 = load i8* %context_Message_Block_addr_48, align 1

ST_23: W_addr_10_loc_assign_3 [1/1] 0.00ns
.preheader8.preheader:125  %W_addr_10_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_10, i8 %context_Message_Block_load_46, i8 %context_Message_Block_load_47, i8 %context_Message_Block_load_48)

ST_23: stg_499 [1/1] 2.71ns
.preheader8.preheader:126  store i32 %W_addr_10_loc_assign_3, i32* %W_addr_10, align 8

ST_23: context_Message_Block_addr_11 [1/1] 0.00ns
.preheader8.preheader:127  %context_Message_Block_addr_11 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 44

ST_23: context_Message_Block_load_11 [2/2] 2.39ns
.preheader8.preheader:128  %context_Message_Block_load_11 = load i8* %context_Message_Block_addr_11, align 1

ST_23: context_Message_Block_addr_49 [1/1] 0.00ns
.preheader8.preheader:130  %context_Message_Block_addr_49 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 45

ST_23: context_Message_Block_load_49 [2/2] 2.39ns
.preheader8.preheader:131  %context_Message_Block_load_49 = load i8* %context_Message_Block_addr_49, align 1

ST_23: tmp_41_9 [1/1] 1.97ns
.preheader8.preheader:718  %tmp_41_9 = add i32 %tmp_37_9, %tmp_40_9

ST_23: temp_1_9 [1/1] 1.97ns
.preheader8.preheader:719  %temp_1_9 = add i32 %W_addr_985_loc_assign_3, %tmp_41_9

ST_23: call_ret47_9 [1/1] 4.52ns
.preheader8.preheader:720  %call_ret47_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_8, i32 %B_ret_8, i32 %C_ret_8, i32 %D_ret_8, i32 %temp_1_9)

ST_23: call_ret23_9 [1/1] 0.00ns
.preheader8.preheader:721  %call_ret23_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 0

ST_23: A_ret_9 [1/1] 0.00ns
.preheader8.preheader:722  %A_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 1

ST_23: B_ret_9 [1/1] 0.00ns
.preheader8.preheader:723  %B_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 2

ST_23: C_ret_9 [1/1] 0.00ns
.preheader8.preheader:724  %C_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 3

ST_23: D_ret_9 [1/1] 0.00ns
.preheader8.preheader:725  %D_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 4


 <State 24>: 8.46ns
ST_24: context_Message_Block_load_11 [1/2] 2.39ns
.preheader8.preheader:128  %context_Message_Block_load_11 = load i8* %context_Message_Block_addr_11, align 1

ST_24: context_Message_Block_load_49 [1/2] 2.39ns
.preheader8.preheader:131  %context_Message_Block_load_49 = load i8* %context_Message_Block_addr_49, align 1

ST_24: context_Message_Block_addr_50 [1/1] 0.00ns
.preheader8.preheader:132  %context_Message_Block_addr_50 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 46

ST_24: context_Message_Block_load_50 [2/2] 2.39ns
.preheader8.preheader:133  %context_Message_Block_load_50 = load i8* %context_Message_Block_addr_50, align 1

ST_24: context_Message_Block_addr_51 [1/1] 0.00ns
.preheader8.preheader:134  %context_Message_Block_addr_51 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 47

ST_24: context_Message_Block_load_51 [2/2] 2.39ns
.preheader8.preheader:135  %context_Message_Block_load_51 = load i8* %context_Message_Block_addr_51, align 1

ST_24: tmp_33_s [1/1] 4.52ns
.preheader8.preheader:726  %tmp_33_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_9)

ST_24: tmp_34_s [1/1] 0.00ns (grouped into LUT with out node tmp_37_s)
.preheader8.preheader:727  %tmp_34_s = and i32 %C_ret_9, %B_ret_9

ST_24: tmp_35_s [1/1] 0.00ns (grouped into LUT with out node tmp_37_s)
.preheader8.preheader:728  %tmp_35_s = xor i32 %B_ret_9, -1

ST_24: tmp_36_s [1/1] 0.00ns (grouped into LUT with out node tmp_37_s)
.preheader8.preheader:729  %tmp_36_s = and i32 %D_ret_9, %tmp_35_s

ST_24: tmp_37_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:730  %tmp_37_s = or i32 %tmp_36_s, %tmp_34_s

ST_24: tmp_39_s [1/1] 1.97ns
.preheader8.preheader:731  %tmp_39_s = add i32 %tmp_33_s, 1518500249

ST_24: tmp_40_s [1/1] 1.97ns
.preheader8.preheader:732  %tmp_40_s = add i32 %call_ret23_9, %tmp_39_s


 <State 25>: 8.46ns
ST_25: W_addr_11 [1/1] 0.00ns
.preheader8.preheader:129  %W_addr_11 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 11

ST_25: context_Message_Block_load_50 [1/2] 2.39ns
.preheader8.preheader:133  %context_Message_Block_load_50 = load i8* %context_Message_Block_addr_50, align 1

ST_25: context_Message_Block_load_51 [1/2] 2.39ns
.preheader8.preheader:135  %context_Message_Block_load_51 = load i8* %context_Message_Block_addr_51, align 1

ST_25: W_addr_11_loc_assign_3 [1/1] 0.00ns
.preheader8.preheader:136  %W_addr_11_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_11, i8 %context_Message_Block_load_49, i8 %context_Message_Block_load_50, i8 %context_Message_Block_load_51)

ST_25: stg_529 [1/1] 2.71ns
.preheader8.preheader:137  store i32 %W_addr_11_loc_assign_3, i32* %W_addr_11, align 4

ST_25: context_Message_Block_addr_12 [1/1] 0.00ns
.preheader8.preheader:138  %context_Message_Block_addr_12 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 48

ST_25: context_Message_Block_load_12 [2/2] 2.39ns
.preheader8.preheader:139  %context_Message_Block_load_12 = load i8* %context_Message_Block_addr_12, align 1

ST_25: context_Message_Block_addr_52 [1/1] 0.00ns
.preheader8.preheader:141  %context_Message_Block_addr_52 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 49

ST_25: context_Message_Block_load_52 [2/2] 2.39ns
.preheader8.preheader:142  %context_Message_Block_load_52 = load i8* %context_Message_Block_addr_52, align 1

ST_25: tmp_41_s [1/1] 1.97ns
.preheader8.preheader:733  %tmp_41_s = add i32 %tmp_37_s, %tmp_40_s

ST_25: temp_1_s [1/1] 1.97ns
.preheader8.preheader:734  %temp_1_s = add i32 %W_addr_10_loc_assign_3, %tmp_41_s

ST_25: call_ret47_s [1/1] 4.52ns
.preheader8.preheader:735  %call_ret47_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_9, i32 %B_ret_9, i32 %C_ret_9, i32 %D_ret_9, i32 %temp_1_s)

ST_25: call_ret23_s [1/1] 0.00ns
.preheader8.preheader:736  %call_ret23_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 0

ST_25: A_ret_s [1/1] 0.00ns
.preheader8.preheader:737  %A_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 1

ST_25: B_ret_s [1/1] 0.00ns
.preheader8.preheader:738  %B_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 2

ST_25: C_ret_s [1/1] 0.00ns
.preheader8.preheader:739  %C_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 3

ST_25: D_ret_s [1/1] 0.00ns
.preheader8.preheader:740  %D_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 4


 <State 26>: 8.46ns
ST_26: context_Message_Block_load_12 [1/2] 2.39ns
.preheader8.preheader:139  %context_Message_Block_load_12 = load i8* %context_Message_Block_addr_12, align 1

ST_26: context_Message_Block_load_52 [1/2] 2.39ns
.preheader8.preheader:142  %context_Message_Block_load_52 = load i8* %context_Message_Block_addr_52, align 1

ST_26: context_Message_Block_addr_53 [1/1] 0.00ns
.preheader8.preheader:143  %context_Message_Block_addr_53 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 50

ST_26: context_Message_Block_load_53 [2/2] 2.39ns
.preheader8.preheader:144  %context_Message_Block_load_53 = load i8* %context_Message_Block_addr_53, align 1

ST_26: context_Message_Block_addr_54 [1/1] 0.00ns
.preheader8.preheader:145  %context_Message_Block_addr_54 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 51

ST_26: context_Message_Block_load_54 [2/2] 2.39ns
.preheader8.preheader:146  %context_Message_Block_load_54 = load i8* %context_Message_Block_addr_54, align 1

ST_26: tmp_33_10 [1/1] 4.52ns
.preheader8.preheader:741  %tmp_33_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_s)

ST_26: tmp_34_10 [1/1] 0.00ns (grouped into LUT with out node tmp_37_10)
.preheader8.preheader:742  %tmp_34_10 = and i32 %C_ret_s, %B_ret_s

ST_26: tmp_35_10 [1/1] 0.00ns (grouped into LUT with out node tmp_37_10)
.preheader8.preheader:743  %tmp_35_10 = xor i32 %B_ret_s, -1

ST_26: tmp_36_10 [1/1] 0.00ns (grouped into LUT with out node tmp_37_10)
.preheader8.preheader:744  %tmp_36_10 = and i32 %D_ret_s, %tmp_35_10

ST_26: tmp_37_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:745  %tmp_37_10 = or i32 %tmp_36_10, %tmp_34_10

ST_26: tmp_39_10 [1/1] 1.97ns
.preheader8.preheader:746  %tmp_39_10 = add i32 %tmp_33_10, 1518500249

ST_26: tmp_40_10 [1/1] 1.97ns
.preheader8.preheader:747  %tmp_40_10 = add i32 %call_ret23_s, %tmp_39_10


 <State 27>: 8.46ns
ST_27: W_addr_12 [1/1] 0.00ns
.preheader8.preheader:140  %W_addr_12 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 12

ST_27: context_Message_Block_load_53 [1/2] 2.39ns
.preheader8.preheader:144  %context_Message_Block_load_53 = load i8* %context_Message_Block_addr_53, align 1

ST_27: context_Message_Block_load_54 [1/2] 2.39ns
.preheader8.preheader:146  %context_Message_Block_load_54 = load i8* %context_Message_Block_addr_54, align 1

ST_27: W_addr_12_loc_assign_3 [1/1] 0.00ns
.preheader8.preheader:147  %W_addr_12_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_12, i8 %context_Message_Block_load_52, i8 %context_Message_Block_load_53, i8 %context_Message_Block_load_54)

ST_27: stg_559 [1/1] 2.71ns
.preheader8.preheader:148  store i32 %W_addr_12_loc_assign_3, i32* %W_addr_12, align 16

ST_27: context_Message_Block_addr_13 [1/1] 0.00ns
.preheader8.preheader:149  %context_Message_Block_addr_13 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 52

ST_27: context_Message_Block_load_13 [2/2] 2.39ns
.preheader8.preheader:150  %context_Message_Block_load_13 = load i8* %context_Message_Block_addr_13, align 1

ST_27: context_Message_Block_addr_55 [1/1] 0.00ns
.preheader8.preheader:152  %context_Message_Block_addr_55 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 53

ST_27: context_Message_Block_load_55 [2/2] 2.39ns
.preheader8.preheader:153  %context_Message_Block_load_55 = load i8* %context_Message_Block_addr_55, align 1

ST_27: tmp_41_10 [1/1] 1.97ns
.preheader8.preheader:748  %tmp_41_10 = add i32 %tmp_37_10, %tmp_40_10

ST_27: temp_1_10 [1/1] 1.97ns
.preheader8.preheader:749  %temp_1_10 = add i32 %W_addr_11_loc_assign_3, %tmp_41_10

ST_27: call_ret47_10 [1/1] 4.52ns
.preheader8.preheader:750  %call_ret47_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_s, i32 %B_ret_s, i32 %C_ret_s, i32 %D_ret_s, i32 %temp_1_10)

ST_27: call_ret23_10 [1/1] 0.00ns
.preheader8.preheader:751  %call_ret23_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 0

ST_27: A_ret_10 [1/1] 0.00ns
.preheader8.preheader:752  %A_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 1

ST_27: B_ret_10 [1/1] 0.00ns
.preheader8.preheader:753  %B_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 2

ST_27: C_ret_10 [1/1] 0.00ns
.preheader8.preheader:754  %C_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 3

ST_27: D_ret_10 [1/1] 0.00ns
.preheader8.preheader:755  %D_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 4


 <State 28>: 8.46ns
ST_28: context_Message_Block_load_13 [1/2] 2.39ns
.preheader8.preheader:150  %context_Message_Block_load_13 = load i8* %context_Message_Block_addr_13, align 1

ST_28: context_Message_Block_load_55 [1/2] 2.39ns
.preheader8.preheader:153  %context_Message_Block_load_55 = load i8* %context_Message_Block_addr_55, align 1

ST_28: context_Message_Block_addr_56 [1/1] 0.00ns
.preheader8.preheader:154  %context_Message_Block_addr_56 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 54

ST_28: context_Message_Block_load_56 [2/2] 2.39ns
.preheader8.preheader:155  %context_Message_Block_load_56 = load i8* %context_Message_Block_addr_56, align 1

ST_28: context_Message_Block_addr_57 [1/1] 0.00ns
.preheader8.preheader:156  %context_Message_Block_addr_57 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 55

ST_28: context_Message_Block_load_57 [2/2] 2.39ns
.preheader8.preheader:157  %context_Message_Block_load_57 = load i8* %context_Message_Block_addr_57, align 1

ST_28: tmp_33_11 [1/1] 4.52ns
.preheader8.preheader:756  %tmp_33_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_10)

ST_28: tmp_34_11 [1/1] 0.00ns (grouped into LUT with out node tmp_37_11)
.preheader8.preheader:757  %tmp_34_11 = and i32 %C_ret_10, %B_ret_10

ST_28: tmp_35_11 [1/1] 0.00ns (grouped into LUT with out node tmp_37_11)
.preheader8.preheader:758  %tmp_35_11 = xor i32 %B_ret_10, -1

ST_28: tmp_36_11 [1/1] 0.00ns (grouped into LUT with out node tmp_37_11)
.preheader8.preheader:759  %tmp_36_11 = and i32 %D_ret_10, %tmp_35_11

ST_28: tmp_37_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:760  %tmp_37_11 = or i32 %tmp_36_11, %tmp_34_11

ST_28: tmp_39_11 [1/1] 1.97ns
.preheader8.preheader:761  %tmp_39_11 = add i32 %tmp_33_11, 1518500249

ST_28: tmp_40_11 [1/1] 1.97ns
.preheader8.preheader:762  %tmp_40_11 = add i32 %call_ret23_10, %tmp_39_11


 <State 29>: 8.46ns
ST_29: W_addr_13 [1/1] 0.00ns
.preheader8.preheader:151  %W_addr_13 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 13

ST_29: context_Message_Block_load_56 [1/2] 2.39ns
.preheader8.preheader:155  %context_Message_Block_load_56 = load i8* %context_Message_Block_addr_56, align 1

ST_29: context_Message_Block_load_57 [1/2] 2.39ns
.preheader8.preheader:157  %context_Message_Block_load_57 = load i8* %context_Message_Block_addr_57, align 1

ST_29: W_addr_13_loc_assign_3 [1/1] 0.00ns
.preheader8.preheader:158  %W_addr_13_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_13, i8 %context_Message_Block_load_55, i8 %context_Message_Block_load_56, i8 %context_Message_Block_load_57)

ST_29: stg_589 [1/1] 2.71ns
.preheader8.preheader:159  store i32 %W_addr_13_loc_assign_3, i32* %W_addr_13, align 4

ST_29: context_Message_Block_addr_14 [1/1] 0.00ns
.preheader8.preheader:160  %context_Message_Block_addr_14 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 56

ST_29: context_Message_Block_load_14 [2/2] 2.39ns
.preheader8.preheader:161  %context_Message_Block_load_14 = load i8* %context_Message_Block_addr_14, align 1

ST_29: context_Message_Block_addr_58 [1/1] 0.00ns
.preheader8.preheader:163  %context_Message_Block_addr_58 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 57

ST_29: context_Message_Block_load_58 [2/2] 2.39ns
.preheader8.preheader:164  %context_Message_Block_load_58 = load i8* %context_Message_Block_addr_58, align 1

ST_29: tmp_1 [1/1] 0.00ns (grouped into LUT with out node tmp_3)
.preheader8.preheader:182  %tmp_1 = xor i32 %W_addr_882_loc_assign_2, %W_addr_13_loc_assign_3

ST_29: tmp_2 [1/1] 0.00ns (grouped into LUT with out node tmp_3)
.preheader8.preheader:183  %tmp_2 = xor i32 %tmp_1, %W_addr_262_loc_assign_1

ST_29: tmp_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:184  %tmp_3 = xor i32 %tmp_2, %tmp_s

ST_29: W_addr_5_0_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:185  %W_addr_5_0_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_3)

ST_29: tmp_41_11 [1/1] 1.97ns
.preheader8.preheader:763  %tmp_41_11 = add i32 %tmp_37_11, %tmp_40_11

ST_29: temp_1_11 [1/1] 1.97ns
.preheader8.preheader:764  %temp_1_11 = add i32 %W_addr_12_loc_assign_3, %tmp_41_11

ST_29: call_ret47_11 [1/1] 4.52ns
.preheader8.preheader:765  %call_ret47_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_10, i32 %B_ret_10, i32 %C_ret_10, i32 %D_ret_10, i32 %temp_1_11)

ST_29: call_ret23_11 [1/1] 0.00ns
.preheader8.preheader:766  %call_ret23_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 0

ST_29: A_ret_11 [1/1] 0.00ns
.preheader8.preheader:767  %A_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 1

ST_29: B_ret_11 [1/1] 0.00ns
.preheader8.preheader:768  %B_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 2

ST_29: C_ret_11 [1/1] 0.00ns
.preheader8.preheader:769  %C_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 3

ST_29: D_ret_11 [1/1] 0.00ns
.preheader8.preheader:770  %D_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 4


 <State 30>: 8.46ns
ST_30: context_Message_Block_load_14 [1/2] 2.39ns
.preheader8.preheader:161  %context_Message_Block_load_14 = load i8* %context_Message_Block_addr_14, align 1

ST_30: context_Message_Block_load_58 [1/2] 2.39ns
.preheader8.preheader:164  %context_Message_Block_load_58 = load i8* %context_Message_Block_addr_58, align 1

ST_30: context_Message_Block_addr_59 [1/1] 0.00ns
.preheader8.preheader:165  %context_Message_Block_addr_59 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 58

ST_30: context_Message_Block_load_59 [2/2] 2.39ns
.preheader8.preheader:166  %context_Message_Block_load_59 = load i8* %context_Message_Block_addr_59, align 1

ST_30: context_Message_Block_addr_60 [1/1] 0.00ns
.preheader8.preheader:167  %context_Message_Block_addr_60 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 59

ST_30: context_Message_Block_load_60 [2/2] 2.39ns
.preheader8.preheader:168  %context_Message_Block_load_60 = load i8* %context_Message_Block_addr_60, align 1

ST_30: W_addr_16 [1/1] 0.00ns
.preheader8.preheader:186  %W_addr_16 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 16

ST_30: stg_613 [1/1] 2.71ns
.preheader8.preheader:187  store i32 %W_addr_5_0_loc_assign_4, i32* %W_addr_16, align 16

ST_30: tmp_33_12 [1/1] 4.52ns
.preheader8.preheader:771  %tmp_33_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_11)

ST_30: tmp_34_12 [1/1] 0.00ns (grouped into LUT with out node tmp_37_12)
.preheader8.preheader:772  %tmp_34_12 = and i32 %C_ret_11, %B_ret_11

ST_30: tmp_35_12 [1/1] 0.00ns (grouped into LUT with out node tmp_37_12)
.preheader8.preheader:773  %tmp_35_12 = xor i32 %B_ret_11, -1

ST_30: tmp_36_12 [1/1] 0.00ns (grouped into LUT with out node tmp_37_12)
.preheader8.preheader:774  %tmp_36_12 = and i32 %D_ret_11, %tmp_35_12

ST_30: tmp_37_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:775  %tmp_37_12 = or i32 %tmp_36_12, %tmp_34_12

ST_30: tmp_39_12 [1/1] 1.97ns
.preheader8.preheader:776  %tmp_39_12 = add i32 %tmp_33_12, 1518500249

ST_30: tmp_40_12 [1/1] 1.97ns
.preheader8.preheader:777  %tmp_40_12 = add i32 %call_ret23_11, %tmp_39_12


 <State 31>: 8.46ns
ST_31: W_addr_14 [1/1] 0.00ns
.preheader8.preheader:162  %W_addr_14 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 14

ST_31: context_Message_Block_load_59 [1/2] 2.39ns
.preheader8.preheader:166  %context_Message_Block_load_59 = load i8* %context_Message_Block_addr_59, align 1

ST_31: context_Message_Block_load_60 [1/2] 2.39ns
.preheader8.preheader:168  %context_Message_Block_load_60 = load i8* %context_Message_Block_addr_60, align 1

ST_31: W_addr_14_loc_assign_4 [1/1] 0.00ns
.preheader8.preheader:169  %W_addr_14_loc_assign_4 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_14, i8 %context_Message_Block_load_58, i8 %context_Message_Block_load_59, i8 %context_Message_Block_load_60)

ST_31: stg_625 [1/1] 2.71ns
.preheader8.preheader:170  store i32 %W_addr_14_loc_assign_4, i32* %W_addr_14, align 8

ST_31: context_Message_Block_addr_15 [1/1] 0.00ns
.preheader8.preheader:171  %context_Message_Block_addr_15 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 60

ST_31: context_Message_Block_load_15 [2/2] 2.39ns
.preheader8.preheader:172  %context_Message_Block_load_15 = load i8* %context_Message_Block_addr_15, align 1

ST_31: context_Message_Block_addr_61 [1/1] 0.00ns
.preheader8.preheader:174  %context_Message_Block_addr_61 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 61

ST_31: context_Message_Block_load_61 [2/2] 2.39ns
.preheader8.preheader:175  %context_Message_Block_load_61 = load i8* %context_Message_Block_addr_61, align 1

ST_31: tmp_28_1 [1/1] 0.00ns (grouped into LUT with out node tmp_30_1)
.preheader8.preheader:188  %tmp_28_1 = xor i32 %W_addr_985_loc_assign_3, %W_addr_14_loc_assign_4

ST_31: tmp_29_1 [1/1] 0.00ns (grouped into LUT with out node tmp_30_1)
.preheader8.preheader:189  %tmp_29_1 = xor i32 %tmp_28_1, %W_addr_367_loc_assign_2

ST_31: tmp_30_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:190  %tmp_30_1 = xor i32 %tmp_29_1, %W_addr_157_loc_assign_1

ST_31: W_addr_5_1_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:191  %W_addr_5_1_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_1)

ST_31: tmp_41_12 [1/1] 1.97ns
.preheader8.preheader:778  %tmp_41_12 = add i32 %tmp_37_12, %tmp_40_12

ST_31: temp_1_12 [1/1] 1.97ns
.preheader8.preheader:779  %temp_1_12 = add i32 %W_addr_13_loc_assign_3, %tmp_41_12

ST_31: call_ret47_12 [1/1] 4.52ns
.preheader8.preheader:780  %call_ret47_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_11, i32 %B_ret_11, i32 %C_ret_11, i32 %D_ret_11, i32 %temp_1_12)

ST_31: call_ret23_12 [1/1] 0.00ns
.preheader8.preheader:781  %call_ret23_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 0

ST_31: A_ret_12 [1/1] 0.00ns
.preheader8.preheader:782  %A_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 1

ST_31: B_ret_12 [1/1] 0.00ns
.preheader8.preheader:783  %B_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 2

ST_31: C_ret_12 [1/1] 0.00ns
.preheader8.preheader:784  %C_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 3

ST_31: D_ret_12 [1/1] 0.00ns
.preheader8.preheader:785  %D_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 4


 <State 32>: 8.46ns
ST_32: context_Message_Block_load_15 [1/2] 2.39ns
.preheader8.preheader:172  %context_Message_Block_load_15 = load i8* %context_Message_Block_addr_15, align 1

ST_32: context_Message_Block_load_61 [1/2] 2.39ns
.preheader8.preheader:175  %context_Message_Block_load_61 = load i8* %context_Message_Block_addr_61, align 1

ST_32: context_Message_Block_addr_62 [1/1] 0.00ns
.preheader8.preheader:176  %context_Message_Block_addr_62 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 62

ST_32: context_Message_Block_load_62 [2/2] 2.39ns
.preheader8.preheader:177  %context_Message_Block_load_62 = load i8* %context_Message_Block_addr_62, align 1

ST_32: context_Message_Block_addr_63 [1/1] 0.00ns
.preheader8.preheader:178  %context_Message_Block_addr_63 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 63

ST_32: context_Message_Block_load_63 [2/2] 2.39ns
.preheader8.preheader:179  %context_Message_Block_load_63 = load i8* %context_Message_Block_addr_63, align 1

ST_32: W_addr_17 [1/1] 0.00ns
.preheader8.preheader:192  %W_addr_17 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 17

ST_32: stg_649 [1/1] 2.71ns
.preheader8.preheader:193  store i32 %W_addr_5_1_loc_assign_4, i32* %W_addr_17, align 4

ST_32: tmp_33_13 [1/1] 4.52ns
.preheader8.preheader:786  %tmp_33_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_12)

ST_32: tmp_34_13 [1/1] 0.00ns (grouped into LUT with out node tmp_37_13)
.preheader8.preheader:787  %tmp_34_13 = and i32 %C_ret_12, %B_ret_12

ST_32: tmp_35_13 [1/1] 0.00ns (grouped into LUT with out node tmp_37_13)
.preheader8.preheader:788  %tmp_35_13 = xor i32 %B_ret_12, -1

ST_32: tmp_36_13 [1/1] 0.00ns (grouped into LUT with out node tmp_37_13)
.preheader8.preheader:789  %tmp_36_13 = and i32 %D_ret_12, %tmp_35_13

ST_32: tmp_37_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:790  %tmp_37_13 = or i32 %tmp_36_13, %tmp_34_13

ST_32: tmp_39_13 [1/1] 1.97ns
.preheader8.preheader:791  %tmp_39_13 = add i32 %tmp_33_13, 1518500249

ST_32: tmp_40_13 [1/1] 1.97ns
.preheader8.preheader:792  %tmp_40_13 = add i32 %call_ret23_12, %tmp_39_13


 <State 33>: 8.46ns
ST_33: W_addr_15 [1/1] 0.00ns
.preheader8.preheader:173  %W_addr_15 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 15

ST_33: context_Message_Block_load_62 [1/2] 2.39ns
.preheader8.preheader:177  %context_Message_Block_load_62 = load i8* %context_Message_Block_addr_62, align 1

ST_33: context_Message_Block_load_63 [1/2] 2.39ns
.preheader8.preheader:179  %context_Message_Block_load_63 = load i8* %context_Message_Block_addr_63, align 1

ST_33: W_addr_15_loc_assign_4 [1/1] 0.00ns
.preheader8.preheader:180  %W_addr_15_loc_assign_4 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_15, i8 %context_Message_Block_load_61, i8 %context_Message_Block_load_62, i8 %context_Message_Block_load_63)

ST_33: stg_661 [1/1] 2.71ns
.preheader8.preheader:181  store i32 %W_addr_15_loc_assign_4, i32* %W_addr_15, align 4

ST_33: tmp_28_2 [1/1] 0.00ns (grouped into LUT with out node tmp_30_2)
.preheader8.preheader:194  %tmp_28_2 = xor i32 %W_addr_10_loc_assign_3, %W_addr_15_loc_assign_4

ST_33: tmp_29_2 [1/1] 0.00ns (grouped into LUT with out node tmp_30_2)
.preheader8.preheader:195  %tmp_29_2 = xor i32 %tmp_28_2, %W_addr_470_loc_assign_2

ST_33: tmp_30_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:196  %tmp_30_2 = xor i32 %tmp_29_2, %W_addr_262_loc_assign_1

ST_33: W_addr_5_2_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:197  %W_addr_5_2_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_2)

ST_33: tmp_41_13 [1/1] 1.97ns
.preheader8.preheader:793  %tmp_41_13 = add i32 %tmp_37_13, %tmp_40_13

ST_33: temp_1_13 [1/1] 1.97ns
.preheader8.preheader:794  %temp_1_13 = add i32 %W_addr_14_loc_assign_4, %tmp_41_13

ST_33: call_ret47_13 [1/1] 4.52ns
.preheader8.preheader:795  %call_ret47_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_12, i32 %B_ret_12, i32 %C_ret_12, i32 %D_ret_12, i32 %temp_1_13)

ST_33: call_ret23_13 [1/1] 0.00ns
.preheader8.preheader:796  %call_ret23_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 0

ST_33: A_ret_13 [1/1] 0.00ns
.preheader8.preheader:797  %A_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 1

ST_33: B_ret_13 [1/1] 0.00ns
.preheader8.preheader:798  %B_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 2

ST_33: C_ret_13 [1/1] 0.00ns
.preheader8.preheader:799  %C_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 3

ST_33: D_ret_13 [1/1] 0.00ns
.preheader8.preheader:800  %D_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 4


 <State 34>: 8.46ns
ST_34: W_addr_18 [1/1] 0.00ns
.preheader8.preheader:198  %W_addr_18 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 18

ST_34: stg_675 [1/1] 2.71ns
.preheader8.preheader:199  store i32 %W_addr_5_2_loc_assign_4, i32* %W_addr_18, align 8

ST_34: tmp_33_14 [1/1] 4.52ns
.preheader8.preheader:801  %tmp_33_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_13)

ST_34: tmp_34_14 [1/1] 0.00ns (grouped into LUT with out node tmp_37_14)
.preheader8.preheader:802  %tmp_34_14 = and i32 %C_ret_13, %B_ret_13

ST_34: tmp_35_14 [1/1] 0.00ns (grouped into LUT with out node tmp_37_14)
.preheader8.preheader:803  %tmp_35_14 = xor i32 %B_ret_13, -1

ST_34: tmp_36_14 [1/1] 0.00ns (grouped into LUT with out node tmp_37_14)
.preheader8.preheader:804  %tmp_36_14 = and i32 %D_ret_13, %tmp_35_14

ST_34: tmp_37_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:805  %tmp_37_14 = or i32 %tmp_36_14, %tmp_34_14

ST_34: tmp_39_14 [1/1] 1.97ns
.preheader8.preheader:806  %tmp_39_14 = add i32 %tmp_33_14, 1518500249

ST_34: tmp_40_14 [1/1] 1.97ns
.preheader8.preheader:807  %tmp_40_14 = add i32 %call_ret23_13, %tmp_39_14


 <State 35>: 8.60ns
ST_35: tmp_28_3 [1/1] 0.00ns (grouped into LUT with out node tmp_30_3)
.preheader8.preheader:200  %tmp_28_3 = xor i32 %W_addr_11_loc_assign_3, %W_addr_5_0_loc_assign_4

ST_35: tmp_29_3 [1/1] 0.00ns (grouped into LUT with out node tmp_30_3)
.preheader8.preheader:201  %tmp_29_3 = xor i32 %tmp_28_3, %W_addr_573_loc_assign_2

ST_35: tmp_30_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:202  %tmp_30_3 = xor i32 %tmp_29_3, %W_addr_367_loc_assign_2

ST_35: W_addr_5_3_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:203  %W_addr_5_3_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_3)

ST_35: W_addr_19 [1/1] 0.00ns
.preheader8.preheader:204  %W_addr_19 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 19

ST_35: stg_688 [1/1] 2.71ns
.preheader8.preheader:205  store i32 %W_addr_5_3_loc_assign_4, i32* %W_addr_19, align 4

ST_35: tmp_41_14 [1/1] 1.97ns
.preheader8.preheader:808  %tmp_41_14 = add i32 %tmp_37_14, %tmp_40_14

ST_35: temp_1_14 [1/1] 1.97ns
.preheader8.preheader:809  %temp_1_14 = add i32 %W_addr_15_loc_assign_4, %tmp_41_14

ST_35: call_ret47_14 [1/1] 4.52ns
.preheader8.preheader:810  %call_ret47_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_13, i32 %B_ret_13, i32 %C_ret_13, i32 %D_ret_13, i32 %temp_1_14)

ST_35: call_ret23_14 [1/1] 0.00ns
.preheader8.preheader:811  %call_ret23_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 0

ST_35: A_ret_14 [1/1] 0.00ns
.preheader8.preheader:812  %A_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 1

ST_35: B_ret_14 [1/1] 0.00ns
.preheader8.preheader:813  %B_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 2

ST_35: C_ret_14 [1/1] 0.00ns
.preheader8.preheader:814  %C_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 3

ST_35: D_ret_14 [1/1] 0.00ns
.preheader8.preheader:815  %D_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 4


 <State 36>: 8.46ns
ST_36: tmp_33_15 [1/1] 4.52ns
.preheader8.preheader:816  %tmp_33_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_14)

ST_36: tmp_34_15 [1/1] 0.00ns (grouped into LUT with out node tmp_37_15)
.preheader8.preheader:817  %tmp_34_15 = and i32 %C_ret_14, %B_ret_14

ST_36: tmp_35_15 [1/1] 0.00ns (grouped into LUT with out node tmp_37_15)
.preheader8.preheader:818  %tmp_35_15 = xor i32 %B_ret_14, -1

ST_36: tmp_36_15 [1/1] 0.00ns (grouped into LUT with out node tmp_37_15)
.preheader8.preheader:819  %tmp_36_15 = and i32 %D_ret_14, %tmp_35_15

ST_36: tmp_37_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:820  %tmp_37_15 = or i32 %tmp_36_15, %tmp_34_15

ST_36: tmp_39_15 [1/1] 1.97ns
.preheader8.preheader:821  %tmp_39_15 = add i32 %tmp_33_15, 1518500249

ST_36: tmp_40_15 [1/1] 1.97ns
.preheader8.preheader:822  %tmp_40_15 = add i32 %call_ret23_14, %tmp_39_15


 <State 37>: 8.60ns
ST_37: tmp_28_4 [1/1] 0.00ns (grouped into LUT with out node tmp_30_4)
.preheader8.preheader:206  %tmp_28_4 = xor i32 %W_addr_12_loc_assign_3, %W_addr_5_1_loc_assign_4

ST_37: tmp_29_4 [1/1] 0.00ns (grouped into LUT with out node tmp_30_4)
.preheader8.preheader:207  %tmp_29_4 = xor i32 %tmp_28_4, %W_addr_676_loc_assign_2

ST_37: tmp_30_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:208  %tmp_30_4 = xor i32 %tmp_29_4, %W_addr_470_loc_assign_2

ST_37: W_addr_5_4_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:209  %W_addr_5_4_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_4)

ST_37: W_addr_20 [1/1] 0.00ns
.preheader8.preheader:210  %W_addr_20 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 20

ST_37: stg_709 [1/1] 2.71ns
.preheader8.preheader:211  store i32 %W_addr_5_4_loc_assign_4, i32* %W_addr_20, align 16

ST_37: tmp_41_15 [1/1] 1.97ns
.preheader8.preheader:823  %tmp_41_15 = add i32 %tmp_37_15, %tmp_40_15

ST_37: temp_1_15 [1/1] 1.97ns
.preheader8.preheader:824  %temp_1_15 = add i32 %W_addr_5_0_loc_assign_4, %tmp_41_15

ST_37: call_ret47_15 [1/1] 4.52ns
.preheader8.preheader:825  %call_ret47_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_14, i32 %B_ret_14, i32 %C_ret_14, i32 %D_ret_14, i32 %temp_1_15)

ST_37: call_ret23_15 [1/1] 0.00ns
.preheader8.preheader:826  %call_ret23_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 0

ST_37: A_ret_15 [1/1] 0.00ns
.preheader8.preheader:827  %A_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 1

ST_37: B_ret_15 [1/1] 0.00ns
.preheader8.preheader:828  %B_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 2

ST_37: C_ret_15 [1/1] 0.00ns
.preheader8.preheader:829  %C_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 3

ST_37: D_ret_15 [1/1] 0.00ns
.preheader8.preheader:830  %D_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 4


 <State 38>: 8.46ns
ST_38: tmp_33_16 [1/1] 4.52ns
.preheader8.preheader:831  %tmp_33_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_15)

ST_38: tmp_34_16 [1/1] 0.00ns (grouped into LUT with out node tmp_37_16)
.preheader8.preheader:832  %tmp_34_16 = and i32 %C_ret_15, %B_ret_15

ST_38: tmp_35_16 [1/1] 0.00ns (grouped into LUT with out node tmp_37_16)
.preheader8.preheader:833  %tmp_35_16 = xor i32 %B_ret_15, -1

ST_38: tmp_36_16 [1/1] 0.00ns (grouped into LUT with out node tmp_37_16)
.preheader8.preheader:834  %tmp_36_16 = and i32 %D_ret_15, %tmp_35_16

ST_38: tmp_37_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:835  %tmp_37_16 = or i32 %tmp_36_16, %tmp_34_16

ST_38: tmp_39_16 [1/1] 1.97ns
.preheader8.preheader:836  %tmp_39_16 = add i32 %tmp_33_16, 1518500249

ST_38: tmp_40_16 [1/1] 1.97ns
.preheader8.preheader:837  %tmp_40_16 = add i32 %call_ret23_15, %tmp_39_16


 <State 39>: 8.60ns
ST_39: tmp_28_5 [1/1] 0.00ns (grouped into LUT with out node tmp_30_5)
.preheader8.preheader:212  %tmp_28_5 = xor i32 %W_addr_13_loc_assign_3, %W_addr_5_2_loc_assign_4

ST_39: tmp_29_5 [1/1] 0.00ns (grouped into LUT with out node tmp_30_5)
.preheader8.preheader:213  %tmp_29_5 = xor i32 %tmp_28_5, %W_addr_779_loc_assign_2

ST_39: tmp_30_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:214  %tmp_30_5 = xor i32 %tmp_29_5, %W_addr_573_loc_assign_2

ST_39: W_addr_5_5_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:215  %W_addr_5_5_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_5)

ST_39: W_addr_21 [1/1] 0.00ns
.preheader8.preheader:216  %W_addr_21 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 21

ST_39: stg_730 [1/1] 2.71ns
.preheader8.preheader:217  store i32 %W_addr_5_5_loc_assign_4, i32* %W_addr_21, align 4

ST_39: tmp_41_16 [1/1] 1.97ns
.preheader8.preheader:838  %tmp_41_16 = add i32 %tmp_37_16, %tmp_40_16

ST_39: temp_1_16 [1/1] 1.97ns
.preheader8.preheader:839  %temp_1_16 = add i32 %W_addr_5_1_loc_assign_4, %tmp_41_16

ST_39: call_ret47_16 [1/1] 4.52ns
.preheader8.preheader:840  %call_ret47_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_15, i32 %B_ret_15, i32 %C_ret_15, i32 %D_ret_15, i32 %temp_1_16)

ST_39: call_ret23_16 [1/1] 0.00ns
.preheader8.preheader:841  %call_ret23_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 0

ST_39: A_ret_16 [1/1] 0.00ns
.preheader8.preheader:842  %A_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 1

ST_39: B_ret_16 [1/1] 0.00ns
.preheader8.preheader:843  %B_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 2

ST_39: C_ret_16 [1/1] 0.00ns
.preheader8.preheader:844  %C_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 3

ST_39: D_ret_16 [1/1] 0.00ns
.preheader8.preheader:845  %D_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 4


 <State 40>: 8.46ns
ST_40: tmp_33_17 [1/1] 4.52ns
.preheader8.preheader:846  %tmp_33_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_16)

ST_40: tmp_34_17 [1/1] 0.00ns (grouped into LUT with out node tmp_37_17)
.preheader8.preheader:847  %tmp_34_17 = and i32 %C_ret_16, %B_ret_16

ST_40: tmp_35_17 [1/1] 0.00ns (grouped into LUT with out node tmp_37_17)
.preheader8.preheader:848  %tmp_35_17 = xor i32 %B_ret_16, -1

ST_40: tmp_36_17 [1/1] 0.00ns (grouped into LUT with out node tmp_37_17)
.preheader8.preheader:849  %tmp_36_17 = and i32 %D_ret_16, %tmp_35_17

ST_40: tmp_37_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:850  %tmp_37_17 = or i32 %tmp_36_17, %tmp_34_17

ST_40: tmp_39_17 [1/1] 1.97ns
.preheader8.preheader:851  %tmp_39_17 = add i32 %tmp_33_17, 1518500249

ST_40: tmp_40_17 [1/1] 1.97ns
.preheader8.preheader:852  %tmp_40_17 = add i32 %call_ret23_16, %tmp_39_17


 <State 41>: 8.60ns
ST_41: tmp_28_6 [1/1] 0.00ns (grouped into LUT with out node tmp_30_6)
.preheader8.preheader:218  %tmp_28_6 = xor i32 %W_addr_14_loc_assign_4, %W_addr_5_3_loc_assign_4

ST_41: tmp_29_6 [1/1] 0.00ns (grouped into LUT with out node tmp_30_6)
.preheader8.preheader:219  %tmp_29_6 = xor i32 %tmp_28_6, %W_addr_882_loc_assign_2

ST_41: tmp_30_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:220  %tmp_30_6 = xor i32 %tmp_29_6, %W_addr_676_loc_assign_2

ST_41: W_addr_5_6_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:221  %W_addr_5_6_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_6)

ST_41: W_addr_22 [1/1] 0.00ns
.preheader8.preheader:222  %W_addr_22 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 22

ST_41: stg_751 [1/1] 2.71ns
.preheader8.preheader:223  store i32 %W_addr_5_6_loc_assign_4, i32* %W_addr_22, align 8

ST_41: tmp_41_17 [1/1] 1.97ns
.preheader8.preheader:853  %tmp_41_17 = add i32 %tmp_37_17, %tmp_40_17

ST_41: temp_1_17 [1/1] 1.97ns
.preheader8.preheader:854  %temp_1_17 = add i32 %W_addr_5_2_loc_assign_4, %tmp_41_17

ST_41: call_ret47_17 [1/1] 4.52ns
.preheader8.preheader:855  %call_ret47_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_16, i32 %B_ret_16, i32 %C_ret_16, i32 %D_ret_16, i32 %temp_1_17)

ST_41: call_ret23_17 [1/1] 0.00ns
.preheader8.preheader:856  %call_ret23_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 0

ST_41: A_ret_17 [1/1] 0.00ns
.preheader8.preheader:857  %A_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 1

ST_41: B_ret_17 [1/1] 0.00ns
.preheader8.preheader:858  %B_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 2

ST_41: C_ret_17 [1/1] 0.00ns
.preheader8.preheader:859  %C_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 3

ST_41: D_ret_17 [1/1] 0.00ns
.preheader8.preheader:860  %D_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 4


 <State 42>: 8.46ns
ST_42: tmp_33_18 [1/1] 4.52ns
.preheader8.preheader:861  %tmp_33_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_17)

ST_42: tmp_34_18 [1/1] 0.00ns (grouped into LUT with out node tmp_37_18)
.preheader8.preheader:862  %tmp_34_18 = and i32 %C_ret_17, %B_ret_17

ST_42: tmp_35_18 [1/1] 0.00ns (grouped into LUT with out node tmp_37_18)
.preheader8.preheader:863  %tmp_35_18 = xor i32 %B_ret_17, -1

ST_42: tmp_36_18 [1/1] 0.00ns (grouped into LUT with out node tmp_37_18)
.preheader8.preheader:864  %tmp_36_18 = and i32 %D_ret_17, %tmp_35_18

ST_42: tmp_37_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:865  %tmp_37_18 = or i32 %tmp_36_18, %tmp_34_18

ST_42: tmp_39_18 [1/1] 1.97ns
.preheader8.preheader:866  %tmp_39_18 = add i32 %tmp_33_18, 1518500249

ST_42: tmp_40_18 [1/1] 1.97ns
.preheader8.preheader:867  %tmp_40_18 = add i32 %call_ret23_17, %tmp_39_18


 <State 43>: 8.60ns
ST_43: tmp_28_7 [1/1] 0.00ns (grouped into LUT with out node tmp_30_7)
.preheader8.preheader:224  %tmp_28_7 = xor i32 %W_addr_15_loc_assign_4, %W_addr_5_4_loc_assign_4

ST_43: tmp_29_7 [1/1] 0.00ns (grouped into LUT with out node tmp_30_7)
.preheader8.preheader:225  %tmp_29_7 = xor i32 %tmp_28_7, %W_addr_985_loc_assign_3

ST_43: tmp_30_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:226  %tmp_30_7 = xor i32 %tmp_29_7, %W_addr_779_loc_assign_2

ST_43: W_addr_5_7_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:227  %W_addr_5_7_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_7)

ST_43: W_addr_23 [1/1] 0.00ns
.preheader8.preheader:228  %W_addr_23 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 23

ST_43: stg_772 [1/1] 2.71ns
.preheader8.preheader:229  store i32 %W_addr_5_7_loc_assign_4, i32* %W_addr_23, align 4

ST_43: tmp_41_18 [1/1] 1.97ns
.preheader8.preheader:868  %tmp_41_18 = add i32 %tmp_37_18, %tmp_40_18

ST_43: temp_1_18 [1/1] 1.97ns
.preheader8.preheader:869  %temp_1_18 = add i32 %W_addr_5_3_loc_assign_4, %tmp_41_18

ST_43: call_ret47_18 [1/1] 4.52ns
.preheader8.preheader:870  %call_ret47_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_17, i32 %B_ret_17, i32 %C_ret_17, i32 %D_ret_17, i32 %temp_1_18)

ST_43: call_ret23_18 [1/1] 0.00ns
.preheader8.preheader:871  %call_ret23_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 0

ST_43: A_ret_18 [1/1] 0.00ns
.preheader8.preheader:872  %A_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 1

ST_43: B_ret_18 [1/1] 0.00ns
.preheader8.preheader:873  %B_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 2

ST_43: C_ret_18 [1/1] 0.00ns
.preheader8.preheader:874  %C_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 3

ST_43: D_ret_18 [1/1] 0.00ns
.preheader8.preheader:875  %D_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 4


 <State 44>: 8.46ns
ST_44: tmp_12 [1/1] 4.52ns
.preheader8.preheader:876  %tmp_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_18)

ST_44: tmp_13 [1/1] 0.00ns (grouped into LUT with out node tmp_14)
.preheader8.preheader:877  %tmp_13 = xor i32 %C_ret_18, %B_ret_18

ST_44: tmp_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:878  %tmp_14 = xor i32 %tmp_13, %D_ret_18

ST_44: tmp_15 [1/1] 1.97ns
.preheader8.preheader:879  %tmp_15 = add i32 %tmp_12, 1859775393

ST_44: tmp_16 [1/1] 1.97ns
.preheader8.preheader:880  %tmp_16 = add i32 %tmp_14, %tmp_15


 <State 45>: 8.60ns
ST_45: tmp_28_8 [1/1] 0.00ns (grouped into LUT with out node tmp_30_8)
.preheader8.preheader:230  %tmp_28_8 = xor i32 %W_addr_5_0_loc_assign_4, %W_addr_5_5_loc_assign_4

ST_45: tmp_29_8 [1/1] 0.00ns (grouped into LUT with out node tmp_30_8)
.preheader8.preheader:231  %tmp_29_8 = xor i32 %tmp_28_8, %W_addr_10_loc_assign_3

ST_45: tmp_30_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:232  %tmp_30_8 = xor i32 %tmp_29_8, %W_addr_882_loc_assign_2

ST_45: W_addr_5_8_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:233  %W_addr_5_8_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_8)

ST_45: W_addr_24 [1/1] 0.00ns
.preheader8.preheader:234  %W_addr_24 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 24

ST_45: stg_791 [1/1] 2.71ns
.preheader8.preheader:235  store i32 %W_addr_5_8_loc_assign_4, i32* %W_addr_24, align 16

ST_45: tmp_17 [1/1] 1.97ns
.preheader8.preheader:881  %tmp_17 = add i32 %call_ret23_18, %tmp_16

ST_45: temp_2 [1/1] 1.97ns
.preheader8.preheader:882  %temp_2 = add i32 %W_addr_5_4_loc_assign_4, %tmp_17

ST_45: call_ret3 [1/1] 4.52ns
.preheader8.preheader:883  %call_ret3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_18, i32 %B_ret_18, i32 %C_ret_18, i32 %D_ret_18, i32 %temp_2)

ST_45: call_ret4 [1/1] 0.00ns
.preheader8.preheader:884  %call_ret4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 0

ST_45: A_ret1 [1/1] 0.00ns
.preheader8.preheader:885  %A_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 1

ST_45: B_ret1 [1/1] 0.00ns
.preheader8.preheader:886  %B_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 2

ST_45: C_ret1 [1/1] 0.00ns
.preheader8.preheader:887  %C_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 3

ST_45: D_ret1 [1/1] 0.00ns
.preheader8.preheader:888  %D_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 4


 <State 46>: 8.46ns
ST_46: tmp_42_1 [1/1] 4.52ns
.preheader8.preheader:889  %tmp_42_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret1)

ST_46: tmp_43_1 [1/1] 0.00ns (grouped into LUT with out node tmp_44_1)
.preheader8.preheader:890  %tmp_43_1 = xor i32 %C_ret1, %B_ret1

ST_46: tmp_44_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:891  %tmp_44_1 = xor i32 %tmp_43_1, %D_ret1

ST_46: tmp_46_1 [1/1] 1.97ns
.preheader8.preheader:892  %tmp_46_1 = add i32 %tmp_42_1, 1859775393

ST_46: tmp_47_1 [1/1] 1.97ns
.preheader8.preheader:893  %tmp_47_1 = add i32 %tmp_44_1, %tmp_46_1


 <State 47>: 8.60ns
ST_47: tmp_28_9 [1/1] 0.00ns (grouped into LUT with out node tmp_30_9)
.preheader8.preheader:236  %tmp_28_9 = xor i32 %W_addr_5_1_loc_assign_4, %W_addr_5_6_loc_assign_4

ST_47: tmp_29_9 [1/1] 0.00ns (grouped into LUT with out node tmp_30_9)
.preheader8.preheader:237  %tmp_29_9 = xor i32 %tmp_28_9, %W_addr_11_loc_assign_3

ST_47: tmp_30_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:238  %tmp_30_9 = xor i32 %tmp_29_9, %W_addr_985_loc_assign_3

ST_47: W_addr_5_9_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:239  %W_addr_5_9_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_9)

ST_47: W_addr_25 [1/1] 0.00ns
.preheader8.preheader:240  %W_addr_25 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 25

ST_47: stg_810 [1/1] 2.71ns
.preheader8.preheader:241  store i32 %W_addr_5_9_loc_assign_4, i32* %W_addr_25, align 4

ST_47: tmp_48_1 [1/1] 1.97ns
.preheader8.preheader:894  %tmp_48_1 = add i32 %call_ret4, %tmp_47_1

ST_47: temp_2_1 [1/1] 1.97ns
.preheader8.preheader:895  %temp_2_1 = add i32 %W_addr_5_5_loc_assign_4, %tmp_48_1

ST_47: call_ret46_1 [1/1] 4.52ns
.preheader8.preheader:896  %call_ret46_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret1, i32 %B_ret1, i32 %C_ret1, i32 %D_ret1, i32 %temp_2_1)

ST_47: call_ret17_1 [1/1] 0.00ns
.preheader8.preheader:897  %call_ret17_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 0

ST_47: A_ret27_1 [1/1] 0.00ns
.preheader8.preheader:898  %A_ret27_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 1

ST_47: B_ret28_1 [1/1] 0.00ns
.preheader8.preheader:899  %B_ret28_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 2

ST_47: C_ret29_1 [1/1] 0.00ns
.preheader8.preheader:900  %C_ret29_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 3

ST_47: D_ret30_1 [1/1] 0.00ns
.preheader8.preheader:901  %D_ret30_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 4


 <State 48>: 8.46ns
ST_48: tmp_42_2 [1/1] 4.52ns
.preheader8.preheader:902  %tmp_42_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_1)

ST_48: tmp_43_2 [1/1] 0.00ns (grouped into LUT with out node tmp_44_2)
.preheader8.preheader:903  %tmp_43_2 = xor i32 %C_ret29_1, %B_ret28_1

ST_48: tmp_44_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:904  %tmp_44_2 = xor i32 %tmp_43_2, %D_ret30_1

ST_48: tmp_46_2 [1/1] 1.97ns
.preheader8.preheader:905  %tmp_46_2 = add i32 %tmp_42_2, 1859775393

ST_48: tmp_47_2 [1/1] 1.97ns
.preheader8.preheader:906  %tmp_47_2 = add i32 %tmp_44_2, %tmp_46_2


 <State 49>: 8.60ns
ST_49: tmp_28_s [1/1] 0.00ns (grouped into LUT with out node tmp_30_s)
.preheader8.preheader:242  %tmp_28_s = xor i32 %W_addr_5_2_loc_assign_4, %W_addr_5_7_loc_assign_4

ST_49: tmp_29_s [1/1] 0.00ns (grouped into LUT with out node tmp_30_s)
.preheader8.preheader:243  %tmp_29_s = xor i32 %tmp_28_s, %W_addr_12_loc_assign_3

ST_49: tmp_30_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:244  %tmp_30_s = xor i32 %tmp_29_s, %W_addr_10_loc_assign_3

ST_49: W_addr_5_10_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:245  %W_addr_5_10_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_s)

ST_49: W_addr_26 [1/1] 0.00ns
.preheader8.preheader:246  %W_addr_26 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 26

ST_49: stg_829 [1/1] 2.71ns
.preheader8.preheader:247  store i32 %W_addr_5_10_loc_assign_4, i32* %W_addr_26, align 8

ST_49: tmp_48_2 [1/1] 1.97ns
.preheader8.preheader:907  %tmp_48_2 = add i32 %call_ret17_1, %tmp_47_2

ST_49: temp_2_2 [1/1] 1.97ns
.preheader8.preheader:908  %temp_2_2 = add i32 %W_addr_5_6_loc_assign_4, %tmp_48_2

ST_49: call_ret46_2 [1/1] 4.52ns
.preheader8.preheader:909  %call_ret46_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_1, i32 %B_ret28_1, i32 %C_ret29_1, i32 %D_ret30_1, i32 %temp_2_2)

ST_49: call_ret17_2 [1/1] 0.00ns
.preheader8.preheader:910  %call_ret17_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 0

ST_49: A_ret27_2 [1/1] 0.00ns
.preheader8.preheader:911  %A_ret27_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 1

ST_49: B_ret28_2 [1/1] 0.00ns
.preheader8.preheader:912  %B_ret28_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 2

ST_49: C_ret29_2 [1/1] 0.00ns
.preheader8.preheader:913  %C_ret29_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 3

ST_49: D_ret30_2 [1/1] 0.00ns
.preheader8.preheader:914  %D_ret30_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 4


 <State 50>: 8.46ns
ST_50: tmp_42_3 [1/1] 4.52ns
.preheader8.preheader:915  %tmp_42_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_2)

ST_50: tmp_43_3 [1/1] 0.00ns (grouped into LUT with out node tmp_44_3)
.preheader8.preheader:916  %tmp_43_3 = xor i32 %C_ret29_2, %B_ret28_2

ST_50: tmp_44_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:917  %tmp_44_3 = xor i32 %tmp_43_3, %D_ret30_2

ST_50: tmp_46_3 [1/1] 1.97ns
.preheader8.preheader:918  %tmp_46_3 = add i32 %tmp_42_3, 1859775393

ST_50: tmp_47_3 [1/1] 1.97ns
.preheader8.preheader:919  %tmp_47_3 = add i32 %tmp_44_3, %tmp_46_3


 <State 51>: 8.60ns
ST_51: tmp_28_10 [1/1] 0.00ns (grouped into LUT with out node tmp_30_10)
.preheader8.preheader:248  %tmp_28_10 = xor i32 %W_addr_5_3_loc_assign_4, %W_addr_5_8_loc_assign_4

ST_51: tmp_29_10 [1/1] 0.00ns (grouped into LUT with out node tmp_30_10)
.preheader8.preheader:249  %tmp_29_10 = xor i32 %tmp_28_10, %W_addr_13_loc_assign_3

ST_51: tmp_30_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:250  %tmp_30_10 = xor i32 %tmp_29_10, %W_addr_11_loc_assign_3

ST_51: W_addr_5_11_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:251  %W_addr_5_11_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_10)

ST_51: W_addr_27 [1/1] 0.00ns
.preheader8.preheader:252  %W_addr_27 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 27

ST_51: stg_848 [1/1] 2.71ns
.preheader8.preheader:253  store i32 %W_addr_5_11_loc_assign_4, i32* %W_addr_27, align 4

ST_51: tmp_48_3 [1/1] 1.97ns
.preheader8.preheader:920  %tmp_48_3 = add i32 %call_ret17_2, %tmp_47_3

ST_51: temp_2_3 [1/1] 1.97ns
.preheader8.preheader:921  %temp_2_3 = add i32 %W_addr_5_7_loc_assign_4, %tmp_48_3

ST_51: call_ret46_3 [1/1] 4.52ns
.preheader8.preheader:922  %call_ret46_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_2, i32 %B_ret28_2, i32 %C_ret29_2, i32 %D_ret30_2, i32 %temp_2_3)

ST_51: call_ret17_3 [1/1] 0.00ns
.preheader8.preheader:923  %call_ret17_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 0

ST_51: A_ret27_3 [1/1] 0.00ns
.preheader8.preheader:924  %A_ret27_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 1

ST_51: B_ret28_3 [1/1] 0.00ns
.preheader8.preheader:925  %B_ret28_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 2

ST_51: C_ret29_3 [1/1] 0.00ns
.preheader8.preheader:926  %C_ret29_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 3

ST_51: D_ret30_3 [1/1] 0.00ns
.preheader8.preheader:927  %D_ret30_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 4


 <State 52>: 8.46ns
ST_52: tmp_42_4 [1/1] 4.52ns
.preheader8.preheader:928  %tmp_42_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_3)

ST_52: tmp_43_4 [1/1] 0.00ns (grouped into LUT with out node tmp_44_4)
.preheader8.preheader:929  %tmp_43_4 = xor i32 %C_ret29_3, %B_ret28_3

ST_52: tmp_44_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:930  %tmp_44_4 = xor i32 %tmp_43_4, %D_ret30_3

ST_52: tmp_46_4 [1/1] 1.97ns
.preheader8.preheader:931  %tmp_46_4 = add i32 %tmp_42_4, 1859775393

ST_52: tmp_47_4 [1/1] 1.97ns
.preheader8.preheader:932  %tmp_47_4 = add i32 %tmp_44_4, %tmp_46_4


 <State 53>: 8.60ns
ST_53: tmp_28_11 [1/1] 0.00ns (grouped into LUT with out node tmp_30_11)
.preheader8.preheader:254  %tmp_28_11 = xor i32 %W_addr_5_4_loc_assign_4, %W_addr_5_9_loc_assign_4

ST_53: tmp_29_11 [1/1] 0.00ns (grouped into LUT with out node tmp_30_11)
.preheader8.preheader:255  %tmp_29_11 = xor i32 %tmp_28_11, %W_addr_14_loc_assign_4

ST_53: tmp_30_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:256  %tmp_30_11 = xor i32 %tmp_29_11, %W_addr_12_loc_assign_3

ST_53: W_addr_5_12_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:257  %W_addr_5_12_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_11)

ST_53: W_addr_28 [1/1] 0.00ns
.preheader8.preheader:258  %W_addr_28 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 28

ST_53: stg_867 [1/1] 2.71ns
.preheader8.preheader:259  store i32 %W_addr_5_12_loc_assign_4, i32* %W_addr_28, align 16

ST_53: tmp_48_4 [1/1] 1.97ns
.preheader8.preheader:933  %tmp_48_4 = add i32 %call_ret17_3, %tmp_47_4

ST_53: temp_2_4 [1/1] 1.97ns
.preheader8.preheader:934  %temp_2_4 = add i32 %W_addr_5_8_loc_assign_4, %tmp_48_4

ST_53: call_ret46_4 [1/1] 4.52ns
.preheader8.preheader:935  %call_ret46_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_3, i32 %B_ret28_3, i32 %C_ret29_3, i32 %D_ret30_3, i32 %temp_2_4)

ST_53: call_ret17_4 [1/1] 0.00ns
.preheader8.preheader:936  %call_ret17_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 0

ST_53: A_ret27_4 [1/1] 0.00ns
.preheader8.preheader:937  %A_ret27_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 1

ST_53: B_ret28_4 [1/1] 0.00ns
.preheader8.preheader:938  %B_ret28_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 2

ST_53: C_ret29_4 [1/1] 0.00ns
.preheader8.preheader:939  %C_ret29_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 3

ST_53: D_ret30_4 [1/1] 0.00ns
.preheader8.preheader:940  %D_ret30_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 4


 <State 54>: 8.46ns
ST_54: tmp_42_5 [1/1] 4.52ns
.preheader8.preheader:941  %tmp_42_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_4)

ST_54: tmp_43_5 [1/1] 0.00ns (grouped into LUT with out node tmp_44_5)
.preheader8.preheader:942  %tmp_43_5 = xor i32 %C_ret29_4, %B_ret28_4

ST_54: tmp_44_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:943  %tmp_44_5 = xor i32 %tmp_43_5, %D_ret30_4

ST_54: tmp_46_5 [1/1] 1.97ns
.preheader8.preheader:944  %tmp_46_5 = add i32 %tmp_42_5, 1859775393

ST_54: tmp_47_5 [1/1] 1.97ns
.preheader8.preheader:945  %tmp_47_5 = add i32 %tmp_44_5, %tmp_46_5


 <State 55>: 8.60ns
ST_55: tmp_28_12 [1/1] 0.00ns (grouped into LUT with out node tmp_30_12)
.preheader8.preheader:260  %tmp_28_12 = xor i32 %W_addr_5_5_loc_assign_4, %W_addr_5_10_loc_assign_4

ST_55: tmp_29_12 [1/1] 0.00ns (grouped into LUT with out node tmp_30_12)
.preheader8.preheader:261  %tmp_29_12 = xor i32 %tmp_28_12, %W_addr_15_loc_assign_4

ST_55: tmp_30_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:262  %tmp_30_12 = xor i32 %tmp_29_12, %W_addr_13_loc_assign_3

ST_55: W_addr_5_13_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:263  %W_addr_5_13_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_12)

ST_55: W_addr_29 [1/1] 0.00ns
.preheader8.preheader:264  %W_addr_29 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 29

ST_55: stg_886 [1/1] 2.71ns
.preheader8.preheader:265  store i32 %W_addr_5_13_loc_assign_4, i32* %W_addr_29, align 4

ST_55: tmp_48_5 [1/1] 1.97ns
.preheader8.preheader:946  %tmp_48_5 = add i32 %call_ret17_4, %tmp_47_5

ST_55: temp_2_5 [1/1] 1.97ns
.preheader8.preheader:947  %temp_2_5 = add i32 %W_addr_5_9_loc_assign_4, %tmp_48_5

ST_55: call_ret46_5 [1/1] 4.52ns
.preheader8.preheader:948  %call_ret46_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_4, i32 %B_ret28_4, i32 %C_ret29_4, i32 %D_ret30_4, i32 %temp_2_5)

ST_55: call_ret17_5 [1/1] 0.00ns
.preheader8.preheader:949  %call_ret17_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 0

ST_55: A_ret27_5 [1/1] 0.00ns
.preheader8.preheader:950  %A_ret27_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 1

ST_55: B_ret28_5 [1/1] 0.00ns
.preheader8.preheader:951  %B_ret28_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 2

ST_55: C_ret29_5 [1/1] 0.00ns
.preheader8.preheader:952  %C_ret29_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 3

ST_55: D_ret30_5 [1/1] 0.00ns
.preheader8.preheader:953  %D_ret30_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 4


 <State 56>: 8.46ns
ST_56: tmp_42_6 [1/1] 4.52ns
.preheader8.preheader:954  %tmp_42_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_5)

ST_56: tmp_43_6 [1/1] 0.00ns (grouped into LUT with out node tmp_44_6)
.preheader8.preheader:955  %tmp_43_6 = xor i32 %C_ret29_5, %B_ret28_5

ST_56: tmp_44_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:956  %tmp_44_6 = xor i32 %tmp_43_6, %D_ret30_5

ST_56: tmp_46_6 [1/1] 1.97ns
.preheader8.preheader:957  %tmp_46_6 = add i32 %tmp_42_6, 1859775393

ST_56: tmp_47_6 [1/1] 1.97ns
.preheader8.preheader:958  %tmp_47_6 = add i32 %tmp_44_6, %tmp_46_6


 <State 57>: 8.60ns
ST_57: tmp_28_13 [1/1] 0.00ns (grouped into LUT with out node tmp_30_13)
.preheader8.preheader:266  %tmp_28_13 = xor i32 %W_addr_5_6_loc_assign_4, %W_addr_5_11_loc_assign_4

ST_57: tmp_29_13 [1/1] 0.00ns (grouped into LUT with out node tmp_30_13)
.preheader8.preheader:267  %tmp_29_13 = xor i32 %tmp_28_13, %W_addr_5_0_loc_assign_4

ST_57: tmp_30_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:268  %tmp_30_13 = xor i32 %tmp_29_13, %W_addr_14_loc_assign_4

ST_57: W_addr_5_14_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:269  %W_addr_5_14_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_13)

ST_57: W_addr_30 [1/1] 0.00ns
.preheader8.preheader:270  %W_addr_30 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 30

ST_57: stg_905 [1/1] 2.71ns
.preheader8.preheader:271  store i32 %W_addr_5_14_loc_assign_4, i32* %W_addr_30, align 8

ST_57: tmp_48_6 [1/1] 1.97ns
.preheader8.preheader:959  %tmp_48_6 = add i32 %call_ret17_5, %tmp_47_6

ST_57: temp_2_6 [1/1] 1.97ns
.preheader8.preheader:960  %temp_2_6 = add i32 %W_addr_5_10_loc_assign_4, %tmp_48_6

ST_57: call_ret46_6 [1/1] 4.52ns
.preheader8.preheader:961  %call_ret46_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_5, i32 %B_ret28_5, i32 %C_ret29_5, i32 %D_ret30_5, i32 %temp_2_6)

ST_57: call_ret17_6 [1/1] 0.00ns
.preheader8.preheader:962  %call_ret17_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 0

ST_57: A_ret27_6 [1/1] 0.00ns
.preheader8.preheader:963  %A_ret27_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 1

ST_57: B_ret28_6 [1/1] 0.00ns
.preheader8.preheader:964  %B_ret28_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 2

ST_57: C_ret29_6 [1/1] 0.00ns
.preheader8.preheader:965  %C_ret29_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 3

ST_57: D_ret30_6 [1/1] 0.00ns
.preheader8.preheader:966  %D_ret30_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 4


 <State 58>: 8.46ns
ST_58: tmp_42_7 [1/1] 4.52ns
.preheader8.preheader:967  %tmp_42_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_6)

ST_58: tmp_43_7 [1/1] 0.00ns (grouped into LUT with out node tmp_44_7)
.preheader8.preheader:968  %tmp_43_7 = xor i32 %C_ret29_6, %B_ret28_6

ST_58: tmp_44_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:969  %tmp_44_7 = xor i32 %tmp_43_7, %D_ret30_6

ST_58: tmp_46_7 [1/1] 1.97ns
.preheader8.preheader:970  %tmp_46_7 = add i32 %tmp_42_7, 1859775393

ST_58: tmp_47_7 [1/1] 1.97ns
.preheader8.preheader:971  %tmp_47_7 = add i32 %tmp_44_7, %tmp_46_7


 <State 59>: 8.60ns
ST_59: tmp_28_14 [1/1] 0.00ns (grouped into LUT with out node tmp_30_14)
.preheader8.preheader:272  %tmp_28_14 = xor i32 %W_addr_5_7_loc_assign_4, %W_addr_5_12_loc_assign_4

ST_59: tmp_29_14 [1/1] 0.00ns (grouped into LUT with out node tmp_30_14)
.preheader8.preheader:273  %tmp_29_14 = xor i32 %tmp_28_14, %W_addr_5_1_loc_assign_4

ST_59: tmp_30_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:274  %tmp_30_14 = xor i32 %tmp_29_14, %W_addr_15_loc_assign_4

ST_59: W_addr_5_15_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:275  %W_addr_5_15_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_14)

ST_59: W_addr_31 [1/1] 0.00ns
.preheader8.preheader:276  %W_addr_31 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 31

ST_59: stg_924 [1/1] 2.71ns
.preheader8.preheader:277  store i32 %W_addr_5_15_loc_assign_4, i32* %W_addr_31, align 4

ST_59: tmp_48_7 [1/1] 1.97ns
.preheader8.preheader:972  %tmp_48_7 = add i32 %call_ret17_6, %tmp_47_7

ST_59: temp_2_7 [1/1] 1.97ns
.preheader8.preheader:973  %temp_2_7 = add i32 %W_addr_5_11_loc_assign_4, %tmp_48_7

ST_59: call_ret46_7 [1/1] 4.52ns
.preheader8.preheader:974  %call_ret46_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_6, i32 %B_ret28_6, i32 %C_ret29_6, i32 %D_ret30_6, i32 %temp_2_7)

ST_59: call_ret17_7 [1/1] 0.00ns
.preheader8.preheader:975  %call_ret17_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 0

ST_59: A_ret27_7 [1/1] 0.00ns
.preheader8.preheader:976  %A_ret27_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 1

ST_59: B_ret28_7 [1/1] 0.00ns
.preheader8.preheader:977  %B_ret28_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 2

ST_59: C_ret29_7 [1/1] 0.00ns
.preheader8.preheader:978  %C_ret29_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 3

ST_59: D_ret30_7 [1/1] 0.00ns
.preheader8.preheader:979  %D_ret30_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 4


 <State 60>: 8.46ns
ST_60: tmp_42_8 [1/1] 4.52ns
.preheader8.preheader:980  %tmp_42_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_7)

ST_60: tmp_43_8 [1/1] 0.00ns (grouped into LUT with out node tmp_44_8)
.preheader8.preheader:981  %tmp_43_8 = xor i32 %C_ret29_7, %B_ret28_7

ST_60: tmp_44_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:982  %tmp_44_8 = xor i32 %tmp_43_8, %D_ret30_7

ST_60: tmp_46_8 [1/1] 1.97ns
.preheader8.preheader:983  %tmp_46_8 = add i32 %tmp_42_8, 1859775393

ST_60: tmp_47_8 [1/1] 1.97ns
.preheader8.preheader:984  %tmp_47_8 = add i32 %tmp_44_8, %tmp_46_8


 <State 61>: 8.60ns
ST_61: tmp_28_15 [1/1] 0.00ns (grouped into LUT with out node tmp_30_15)
.preheader8.preheader:278  %tmp_28_15 = xor i32 %W_addr_5_8_loc_assign_4, %W_addr_5_13_loc_assign_4

ST_61: tmp_29_15 [1/1] 0.00ns (grouped into LUT with out node tmp_30_15)
.preheader8.preheader:279  %tmp_29_15 = xor i32 %tmp_28_15, %W_addr_5_2_loc_assign_4

ST_61: tmp_30_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:280  %tmp_30_15 = xor i32 %tmp_29_15, %W_addr_5_0_loc_assign_4

ST_61: W_addr_5_16_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:281  %W_addr_5_16_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_15)

ST_61: W_addr_32 [1/1] 0.00ns
.preheader8.preheader:282  %W_addr_32 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 32

ST_61: stg_943 [1/1] 2.71ns
.preheader8.preheader:283  store i32 %W_addr_5_16_loc_assign_4, i32* %W_addr_32, align 16

ST_61: tmp_48_8 [1/1] 1.97ns
.preheader8.preheader:985  %tmp_48_8 = add i32 %call_ret17_7, %tmp_47_8

ST_61: temp_2_8 [1/1] 1.97ns
.preheader8.preheader:986  %temp_2_8 = add i32 %W_addr_5_12_loc_assign_4, %tmp_48_8

ST_61: call_ret46_8 [1/1] 4.52ns
.preheader8.preheader:987  %call_ret46_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_7, i32 %B_ret28_7, i32 %C_ret29_7, i32 %D_ret30_7, i32 %temp_2_8)

ST_61: call_ret17_8 [1/1] 0.00ns
.preheader8.preheader:988  %call_ret17_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 0

ST_61: A_ret27_8 [1/1] 0.00ns
.preheader8.preheader:989  %A_ret27_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 1

ST_61: B_ret28_8 [1/1] 0.00ns
.preheader8.preheader:990  %B_ret28_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 2

ST_61: C_ret29_8 [1/1] 0.00ns
.preheader8.preheader:991  %C_ret29_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 3

ST_61: D_ret30_8 [1/1] 0.00ns
.preheader8.preheader:992  %D_ret30_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 4


 <State 62>: 8.46ns
ST_62: tmp_42_9 [1/1] 4.52ns
.preheader8.preheader:993  %tmp_42_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_8)

ST_62: tmp_43_9 [1/1] 0.00ns (grouped into LUT with out node tmp_44_9)
.preheader8.preheader:994  %tmp_43_9 = xor i32 %C_ret29_8, %B_ret28_8

ST_62: tmp_44_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:995  %tmp_44_9 = xor i32 %tmp_43_9, %D_ret30_8

ST_62: tmp_46_9 [1/1] 1.97ns
.preheader8.preheader:996  %tmp_46_9 = add i32 %tmp_42_9, 1859775393

ST_62: tmp_47_9 [1/1] 1.97ns
.preheader8.preheader:997  %tmp_47_9 = add i32 %tmp_44_9, %tmp_46_9


 <State 63>: 8.60ns
ST_63: tmp_28_16 [1/1] 0.00ns (grouped into LUT with out node tmp_30_16)
.preheader8.preheader:284  %tmp_28_16 = xor i32 %W_addr_5_9_loc_assign_4, %W_addr_5_14_loc_assign_4

ST_63: tmp_29_16 [1/1] 0.00ns (grouped into LUT with out node tmp_30_16)
.preheader8.preheader:285  %tmp_29_16 = xor i32 %tmp_28_16, %W_addr_5_3_loc_assign_4

ST_63: tmp_30_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:286  %tmp_30_16 = xor i32 %tmp_29_16, %W_addr_5_1_loc_assign_4

ST_63: W_addr_5_17_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:287  %W_addr_5_17_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_16)

ST_63: W_addr_33 [1/1] 0.00ns
.preheader8.preheader:288  %W_addr_33 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 33

ST_63: stg_962 [1/1] 2.71ns
.preheader8.preheader:289  store i32 %W_addr_5_17_loc_assign_4, i32* %W_addr_33, align 4

ST_63: tmp_48_9 [1/1] 1.97ns
.preheader8.preheader:998  %tmp_48_9 = add i32 %call_ret17_8, %tmp_47_9

ST_63: temp_2_9 [1/1] 1.97ns
.preheader8.preheader:999  %temp_2_9 = add i32 %W_addr_5_13_loc_assign_4, %tmp_48_9

ST_63: call_ret46_9 [1/1] 4.52ns
.preheader8.preheader:1000  %call_ret46_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_8, i32 %B_ret28_8, i32 %C_ret29_8, i32 %D_ret30_8, i32 %temp_2_9)

ST_63: call_ret17_9 [1/1] 0.00ns
.preheader8.preheader:1001  %call_ret17_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 0

ST_63: A_ret27_9 [1/1] 0.00ns
.preheader8.preheader:1002  %A_ret27_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 1

ST_63: B_ret28_9 [1/1] 0.00ns
.preheader8.preheader:1003  %B_ret28_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 2

ST_63: C_ret29_9 [1/1] 0.00ns
.preheader8.preheader:1004  %C_ret29_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 3

ST_63: D_ret30_9 [1/1] 0.00ns
.preheader8.preheader:1005  %D_ret30_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 4


 <State 64>: 8.46ns
ST_64: tmp_42_s [1/1] 4.52ns
.preheader8.preheader:1006  %tmp_42_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_9)

ST_64: tmp_43_s [1/1] 0.00ns (grouped into LUT with out node tmp_44_s)
.preheader8.preheader:1007  %tmp_43_s = xor i32 %C_ret29_9, %B_ret28_9

ST_64: tmp_44_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1008  %tmp_44_s = xor i32 %tmp_43_s, %D_ret30_9

ST_64: tmp_46_s [1/1] 1.97ns
.preheader8.preheader:1009  %tmp_46_s = add i32 %tmp_42_s, 1859775393

ST_64: tmp_47_s [1/1] 1.97ns
.preheader8.preheader:1010  %tmp_47_s = add i32 %tmp_44_s, %tmp_46_s


 <State 65>: 8.60ns
ST_65: tmp_28_17 [1/1] 0.00ns (grouped into LUT with out node tmp_30_17)
.preheader8.preheader:290  %tmp_28_17 = xor i32 %W_addr_5_10_loc_assign_4, %W_addr_5_15_loc_assign_4

ST_65: tmp_29_17 [1/1] 0.00ns (grouped into LUT with out node tmp_30_17)
.preheader8.preheader:291  %tmp_29_17 = xor i32 %tmp_28_17, %W_addr_5_4_loc_assign_4

ST_65: tmp_30_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:292  %tmp_30_17 = xor i32 %tmp_29_17, %W_addr_5_2_loc_assign_4

ST_65: W_addr_5_18_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:293  %W_addr_5_18_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_17)

ST_65: W_addr_34 [1/1] 0.00ns
.preheader8.preheader:294  %W_addr_34 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 34

ST_65: stg_981 [1/1] 2.71ns
.preheader8.preheader:295  store i32 %W_addr_5_18_loc_assign_4, i32* %W_addr_34, align 8

ST_65: tmp_48_s [1/1] 1.97ns
.preheader8.preheader:1011  %tmp_48_s = add i32 %call_ret17_9, %tmp_47_s

ST_65: temp_2_s [1/1] 1.97ns
.preheader8.preheader:1012  %temp_2_s = add i32 %W_addr_5_14_loc_assign_4, %tmp_48_s

ST_65: call_ret46_s [1/1] 4.52ns
.preheader8.preheader:1013  %call_ret46_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_9, i32 %B_ret28_9, i32 %C_ret29_9, i32 %D_ret30_9, i32 %temp_2_s)

ST_65: call_ret17_s [1/1] 0.00ns
.preheader8.preheader:1014  %call_ret17_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 0

ST_65: A_ret27_s [1/1] 0.00ns
.preheader8.preheader:1015  %A_ret27_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 1

ST_65: B_ret28_s [1/1] 0.00ns
.preheader8.preheader:1016  %B_ret28_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 2

ST_65: C_ret29_s [1/1] 0.00ns
.preheader8.preheader:1017  %C_ret29_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 3

ST_65: D_ret30_s [1/1] 0.00ns
.preheader8.preheader:1018  %D_ret30_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 4


 <State 66>: 8.46ns
ST_66: tmp_42_10 [1/1] 4.52ns
.preheader8.preheader:1019  %tmp_42_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_s)

ST_66: tmp_43_10 [1/1] 0.00ns (grouped into LUT with out node tmp_44_10)
.preheader8.preheader:1020  %tmp_43_10 = xor i32 %C_ret29_s, %B_ret28_s

ST_66: tmp_44_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1021  %tmp_44_10 = xor i32 %tmp_43_10, %D_ret30_s

ST_66: tmp_46_10 [1/1] 1.97ns
.preheader8.preheader:1022  %tmp_46_10 = add i32 %tmp_42_10, 1859775393

ST_66: tmp_47_10 [1/1] 1.97ns
.preheader8.preheader:1023  %tmp_47_10 = add i32 %tmp_44_10, %tmp_46_10


 <State 67>: 8.60ns
ST_67: tmp_28_18 [1/1] 0.00ns (grouped into LUT with out node tmp_30_18)
.preheader8.preheader:296  %tmp_28_18 = xor i32 %W_addr_5_11_loc_assign_4, %W_addr_5_16_loc_assign_4

ST_67: tmp_29_18 [1/1] 0.00ns (grouped into LUT with out node tmp_30_18)
.preheader8.preheader:297  %tmp_29_18 = xor i32 %tmp_28_18, %W_addr_5_5_loc_assign_4

ST_67: tmp_30_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:298  %tmp_30_18 = xor i32 %tmp_29_18, %W_addr_5_3_loc_assign_4

ST_67: W_addr_5_19_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:299  %W_addr_5_19_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_18)

ST_67: W_addr_35 [1/1] 0.00ns
.preheader8.preheader:300  %W_addr_35 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 35

ST_67: stg_1000 [1/1] 2.71ns
.preheader8.preheader:301  store i32 %W_addr_5_19_loc_assign_4, i32* %W_addr_35, align 4

ST_67: tmp_48_10 [1/1] 1.97ns
.preheader8.preheader:1024  %tmp_48_10 = add i32 %call_ret17_s, %tmp_47_10

ST_67: temp_2_10 [1/1] 1.97ns
.preheader8.preheader:1025  %temp_2_10 = add i32 %W_addr_5_15_loc_assign_4, %tmp_48_10

ST_67: call_ret46_10 [1/1] 4.52ns
.preheader8.preheader:1026  %call_ret46_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_s, i32 %B_ret28_s, i32 %C_ret29_s, i32 %D_ret30_s, i32 %temp_2_10)

ST_67: call_ret17_10 [1/1] 0.00ns
.preheader8.preheader:1027  %call_ret17_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 0

ST_67: A_ret27_10 [1/1] 0.00ns
.preheader8.preheader:1028  %A_ret27_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 1

ST_67: B_ret28_10 [1/1] 0.00ns
.preheader8.preheader:1029  %B_ret28_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 2

ST_67: C_ret29_10 [1/1] 0.00ns
.preheader8.preheader:1030  %C_ret29_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 3

ST_67: D_ret30_10 [1/1] 0.00ns
.preheader8.preheader:1031  %D_ret30_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 4


 <State 68>: 8.46ns
ST_68: tmp_42_11 [1/1] 4.52ns
.preheader8.preheader:1032  %tmp_42_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_10)

ST_68: tmp_43_11 [1/1] 0.00ns (grouped into LUT with out node tmp_44_11)
.preheader8.preheader:1033  %tmp_43_11 = xor i32 %C_ret29_10, %B_ret28_10

ST_68: tmp_44_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1034  %tmp_44_11 = xor i32 %tmp_43_11, %D_ret30_10

ST_68: tmp_46_11 [1/1] 1.97ns
.preheader8.preheader:1035  %tmp_46_11 = add i32 %tmp_42_11, 1859775393

ST_68: tmp_47_11 [1/1] 1.97ns
.preheader8.preheader:1036  %tmp_47_11 = add i32 %tmp_44_11, %tmp_46_11


 <State 69>: 8.60ns
ST_69: tmp_28_19 [1/1] 0.00ns (grouped into LUT with out node tmp_30_19)
.preheader8.preheader:302  %tmp_28_19 = xor i32 %W_addr_5_12_loc_assign_4, %W_addr_5_17_loc_assign_4

ST_69: tmp_29_19 [1/1] 0.00ns (grouped into LUT with out node tmp_30_19)
.preheader8.preheader:303  %tmp_29_19 = xor i32 %tmp_28_19, %W_addr_5_6_loc_assign_4

ST_69: tmp_30_19 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:304  %tmp_30_19 = xor i32 %tmp_29_19, %W_addr_5_4_loc_assign_4

ST_69: W_addr_5_20_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:305  %W_addr_5_20_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_19)

ST_69: W_addr_36 [1/1] 0.00ns
.preheader8.preheader:306  %W_addr_36 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 36

ST_69: stg_1019 [1/1] 2.71ns
.preheader8.preheader:307  store i32 %W_addr_5_20_loc_assign_4, i32* %W_addr_36, align 16

ST_69: tmp_48_11 [1/1] 1.97ns
.preheader8.preheader:1037  %tmp_48_11 = add i32 %call_ret17_10, %tmp_47_11

ST_69: temp_2_11 [1/1] 1.97ns
.preheader8.preheader:1038  %temp_2_11 = add i32 %W_addr_5_16_loc_assign_4, %tmp_48_11

ST_69: call_ret46_11 [1/1] 4.52ns
.preheader8.preheader:1039  %call_ret46_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_10, i32 %B_ret28_10, i32 %C_ret29_10, i32 %D_ret30_10, i32 %temp_2_11)

ST_69: call_ret17_11 [1/1] 0.00ns
.preheader8.preheader:1040  %call_ret17_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 0

ST_69: A_ret27_11 [1/1] 0.00ns
.preheader8.preheader:1041  %A_ret27_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 1

ST_69: B_ret28_11 [1/1] 0.00ns
.preheader8.preheader:1042  %B_ret28_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 2

ST_69: C_ret29_11 [1/1] 0.00ns
.preheader8.preheader:1043  %C_ret29_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 3

ST_69: D_ret30_11 [1/1] 0.00ns
.preheader8.preheader:1044  %D_ret30_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 4


 <State 70>: 8.46ns
ST_70: tmp_42_12 [1/1] 4.52ns
.preheader8.preheader:1045  %tmp_42_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_11)

ST_70: tmp_43_12 [1/1] 0.00ns (grouped into LUT with out node tmp_44_12)
.preheader8.preheader:1046  %tmp_43_12 = xor i32 %C_ret29_11, %B_ret28_11

ST_70: tmp_44_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1047  %tmp_44_12 = xor i32 %tmp_43_12, %D_ret30_11

ST_70: tmp_46_12 [1/1] 1.97ns
.preheader8.preheader:1048  %tmp_46_12 = add i32 %tmp_42_12, 1859775393

ST_70: tmp_47_12 [1/1] 1.97ns
.preheader8.preheader:1049  %tmp_47_12 = add i32 %tmp_44_12, %tmp_46_12


 <State 71>: 8.60ns
ST_71: tmp_28_20 [1/1] 0.00ns (grouped into LUT with out node tmp_30_20)
.preheader8.preheader:308  %tmp_28_20 = xor i32 %W_addr_5_13_loc_assign_4, %W_addr_5_18_loc_assign_4

ST_71: tmp_29_20 [1/1] 0.00ns (grouped into LUT with out node tmp_30_20)
.preheader8.preheader:309  %tmp_29_20 = xor i32 %tmp_28_20, %W_addr_5_7_loc_assign_4

ST_71: tmp_30_20 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:310  %tmp_30_20 = xor i32 %tmp_29_20, %W_addr_5_5_loc_assign_4

ST_71: W_addr_5_21_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:311  %W_addr_5_21_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_20)

ST_71: W_addr_37 [1/1] 0.00ns
.preheader8.preheader:312  %W_addr_37 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 37

ST_71: stg_1038 [1/1] 2.71ns
.preheader8.preheader:313  store i32 %W_addr_5_21_loc_assign_4, i32* %W_addr_37, align 4

ST_71: tmp_48_12 [1/1] 1.97ns
.preheader8.preheader:1050  %tmp_48_12 = add i32 %call_ret17_11, %tmp_47_12

ST_71: temp_2_12 [1/1] 1.97ns
.preheader8.preheader:1051  %temp_2_12 = add i32 %W_addr_5_17_loc_assign_4, %tmp_48_12

ST_71: call_ret46_12 [1/1] 4.52ns
.preheader8.preheader:1052  %call_ret46_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_11, i32 %B_ret28_11, i32 %C_ret29_11, i32 %D_ret30_11, i32 %temp_2_12)

ST_71: call_ret17_12 [1/1] 0.00ns
.preheader8.preheader:1053  %call_ret17_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 0

ST_71: A_ret27_12 [1/1] 0.00ns
.preheader8.preheader:1054  %A_ret27_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 1

ST_71: B_ret28_12 [1/1] 0.00ns
.preheader8.preheader:1055  %B_ret28_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 2

ST_71: C_ret29_12 [1/1] 0.00ns
.preheader8.preheader:1056  %C_ret29_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 3

ST_71: D_ret30_12 [1/1] 0.00ns
.preheader8.preheader:1057  %D_ret30_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 4


 <State 72>: 8.46ns
ST_72: tmp_42_13 [1/1] 4.52ns
.preheader8.preheader:1058  %tmp_42_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_12)

ST_72: tmp_43_13 [1/1] 0.00ns (grouped into LUT with out node tmp_44_13)
.preheader8.preheader:1059  %tmp_43_13 = xor i32 %C_ret29_12, %B_ret28_12

ST_72: tmp_44_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1060  %tmp_44_13 = xor i32 %tmp_43_13, %D_ret30_12

ST_72: tmp_46_13 [1/1] 1.97ns
.preheader8.preheader:1061  %tmp_46_13 = add i32 %tmp_42_13, 1859775393

ST_72: tmp_47_13 [1/1] 1.97ns
.preheader8.preheader:1062  %tmp_47_13 = add i32 %tmp_44_13, %tmp_46_13


 <State 73>: 8.60ns
ST_73: tmp_28_21 [1/1] 0.00ns (grouped into LUT with out node tmp_30_21)
.preheader8.preheader:314  %tmp_28_21 = xor i32 %W_addr_5_14_loc_assign_4, %W_addr_5_19_loc_assign_4

ST_73: tmp_29_21 [1/1] 0.00ns (grouped into LUT with out node tmp_30_21)
.preheader8.preheader:315  %tmp_29_21 = xor i32 %tmp_28_21, %W_addr_5_8_loc_assign_4

ST_73: tmp_30_21 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:316  %tmp_30_21 = xor i32 %tmp_29_21, %W_addr_5_6_loc_assign_4

ST_73: W_addr_5_22_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:317  %W_addr_5_22_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_21)

ST_73: W_addr_38 [1/1] 0.00ns
.preheader8.preheader:318  %W_addr_38 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 38

ST_73: stg_1057 [1/1] 2.71ns
.preheader8.preheader:319  store i32 %W_addr_5_22_loc_assign_4, i32* %W_addr_38, align 8

ST_73: tmp_48_13 [1/1] 1.97ns
.preheader8.preheader:1063  %tmp_48_13 = add i32 %call_ret17_12, %tmp_47_13

ST_73: temp_2_13 [1/1] 1.97ns
.preheader8.preheader:1064  %temp_2_13 = add i32 %W_addr_5_18_loc_assign_4, %tmp_48_13

ST_73: call_ret46_13 [1/1] 4.52ns
.preheader8.preheader:1065  %call_ret46_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_12, i32 %B_ret28_12, i32 %C_ret29_12, i32 %D_ret30_12, i32 %temp_2_13)

ST_73: call_ret17_13 [1/1] 0.00ns
.preheader8.preheader:1066  %call_ret17_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 0

ST_73: A_ret27_13 [1/1] 0.00ns
.preheader8.preheader:1067  %A_ret27_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 1

ST_73: B_ret28_13 [1/1] 0.00ns
.preheader8.preheader:1068  %B_ret28_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 2

ST_73: C_ret29_13 [1/1] 0.00ns
.preheader8.preheader:1069  %C_ret29_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 3

ST_73: D_ret30_13 [1/1] 0.00ns
.preheader8.preheader:1070  %D_ret30_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 4


 <State 74>: 8.46ns
ST_74: tmp_42_14 [1/1] 4.52ns
.preheader8.preheader:1071  %tmp_42_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_13)

ST_74: tmp_43_14 [1/1] 0.00ns (grouped into LUT with out node tmp_44_14)
.preheader8.preheader:1072  %tmp_43_14 = xor i32 %C_ret29_13, %B_ret28_13

ST_74: tmp_44_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1073  %tmp_44_14 = xor i32 %tmp_43_14, %D_ret30_13

ST_74: tmp_46_14 [1/1] 1.97ns
.preheader8.preheader:1074  %tmp_46_14 = add i32 %tmp_42_14, 1859775393

ST_74: tmp_47_14 [1/1] 1.97ns
.preheader8.preheader:1075  %tmp_47_14 = add i32 %tmp_44_14, %tmp_46_14


 <State 75>: 8.60ns
ST_75: tmp_28_22 [1/1] 0.00ns (grouped into LUT with out node tmp_30_22)
.preheader8.preheader:320  %tmp_28_22 = xor i32 %W_addr_5_15_loc_assign_4, %W_addr_5_20_loc_assign_4

ST_75: tmp_29_22 [1/1] 0.00ns (grouped into LUT with out node tmp_30_22)
.preheader8.preheader:321  %tmp_29_22 = xor i32 %tmp_28_22, %W_addr_5_9_loc_assign_4

ST_75: tmp_30_22 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:322  %tmp_30_22 = xor i32 %tmp_29_22, %W_addr_5_7_loc_assign_4

ST_75: W_addr_5_23_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:323  %W_addr_5_23_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_22)

ST_75: W_addr_39 [1/1] 0.00ns
.preheader8.preheader:324  %W_addr_39 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 39

ST_75: stg_1076 [1/1] 2.71ns
.preheader8.preheader:325  store i32 %W_addr_5_23_loc_assign_4, i32* %W_addr_39, align 4

ST_75: tmp_48_14 [1/1] 1.97ns
.preheader8.preheader:1076  %tmp_48_14 = add i32 %call_ret17_13, %tmp_47_14

ST_75: temp_2_14 [1/1] 1.97ns
.preheader8.preheader:1077  %temp_2_14 = add i32 %W_addr_5_19_loc_assign_4, %tmp_48_14

ST_75: call_ret46_14 [1/1] 4.52ns
.preheader8.preheader:1078  %call_ret46_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_13, i32 %B_ret28_13, i32 %C_ret29_13, i32 %D_ret30_13, i32 %temp_2_14)

ST_75: call_ret17_14 [1/1] 0.00ns
.preheader8.preheader:1079  %call_ret17_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 0

ST_75: A_ret27_14 [1/1] 0.00ns
.preheader8.preheader:1080  %A_ret27_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 1

ST_75: B_ret28_14 [1/1] 0.00ns
.preheader8.preheader:1081  %B_ret28_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 2

ST_75: C_ret29_14 [1/1] 0.00ns
.preheader8.preheader:1082  %C_ret29_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 3

ST_75: D_ret30_14 [1/1] 0.00ns
.preheader8.preheader:1083  %D_ret30_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 4


 <State 76>: 8.46ns
ST_76: tmp_42_15 [1/1] 4.52ns
.preheader8.preheader:1084  %tmp_42_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_14)

ST_76: tmp_43_15 [1/1] 0.00ns (grouped into LUT with out node tmp_44_15)
.preheader8.preheader:1085  %tmp_43_15 = xor i32 %C_ret29_14, %B_ret28_14

ST_76: tmp_44_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1086  %tmp_44_15 = xor i32 %tmp_43_15, %D_ret30_14

ST_76: tmp_46_15 [1/1] 1.97ns
.preheader8.preheader:1087  %tmp_46_15 = add i32 %tmp_42_15, 1859775393

ST_76: tmp_47_15 [1/1] 1.97ns
.preheader8.preheader:1088  %tmp_47_15 = add i32 %tmp_44_15, %tmp_46_15


 <State 77>: 8.60ns
ST_77: tmp_28_23 [1/1] 0.00ns (grouped into LUT with out node tmp_30_23)
.preheader8.preheader:326  %tmp_28_23 = xor i32 %W_addr_5_16_loc_assign_4, %W_addr_5_21_loc_assign_4

ST_77: tmp_29_23 [1/1] 0.00ns (grouped into LUT with out node tmp_30_23)
.preheader8.preheader:327  %tmp_29_23 = xor i32 %tmp_28_23, %W_addr_5_10_loc_assign_4

ST_77: tmp_30_23 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:328  %tmp_30_23 = xor i32 %tmp_29_23, %W_addr_5_8_loc_assign_4

ST_77: W_addr_5_24_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:329  %W_addr_5_24_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_23)

ST_77: W_addr_40 [1/1] 0.00ns
.preheader8.preheader:330  %W_addr_40 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 40

ST_77: stg_1095 [1/1] 2.71ns
.preheader8.preheader:331  store i32 %W_addr_5_24_loc_assign_4, i32* %W_addr_40, align 16

ST_77: tmp_48_15 [1/1] 1.97ns
.preheader8.preheader:1089  %tmp_48_15 = add i32 %call_ret17_14, %tmp_47_15

ST_77: temp_2_15 [1/1] 1.97ns
.preheader8.preheader:1090  %temp_2_15 = add i32 %W_addr_5_20_loc_assign_4, %tmp_48_15

ST_77: call_ret46_15 [1/1] 4.52ns
.preheader8.preheader:1091  %call_ret46_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_14, i32 %B_ret28_14, i32 %C_ret29_14, i32 %D_ret30_14, i32 %temp_2_15)

ST_77: call_ret17_15 [1/1] 0.00ns
.preheader8.preheader:1092  %call_ret17_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 0

ST_77: A_ret27_15 [1/1] 0.00ns
.preheader8.preheader:1093  %A_ret27_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 1

ST_77: B_ret28_15 [1/1] 0.00ns
.preheader8.preheader:1094  %B_ret28_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 2

ST_77: C_ret29_15 [1/1] 0.00ns
.preheader8.preheader:1095  %C_ret29_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 3

ST_77: D_ret30_15 [1/1] 0.00ns
.preheader8.preheader:1096  %D_ret30_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 4


 <State 78>: 8.46ns
ST_78: tmp_42_16 [1/1] 4.52ns
.preheader8.preheader:1097  %tmp_42_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_15)

ST_78: tmp_43_16 [1/1] 0.00ns (grouped into LUT with out node tmp_44_16)
.preheader8.preheader:1098  %tmp_43_16 = xor i32 %C_ret29_15, %B_ret28_15

ST_78: tmp_44_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1099  %tmp_44_16 = xor i32 %tmp_43_16, %D_ret30_15

ST_78: tmp_46_16 [1/1] 1.97ns
.preheader8.preheader:1100  %tmp_46_16 = add i32 %tmp_42_16, 1859775393

ST_78: tmp_47_16 [1/1] 1.97ns
.preheader8.preheader:1101  %tmp_47_16 = add i32 %tmp_44_16, %tmp_46_16


 <State 79>: 8.60ns
ST_79: tmp_28_24 [1/1] 0.00ns (grouped into LUT with out node tmp_30_24)
.preheader8.preheader:332  %tmp_28_24 = xor i32 %W_addr_5_17_loc_assign_4, %W_addr_5_22_loc_assign_4

ST_79: tmp_29_24 [1/1] 0.00ns (grouped into LUT with out node tmp_30_24)
.preheader8.preheader:333  %tmp_29_24 = xor i32 %tmp_28_24, %W_addr_5_11_loc_assign_4

ST_79: tmp_30_24 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:334  %tmp_30_24 = xor i32 %tmp_29_24, %W_addr_5_9_loc_assign_4

ST_79: W_addr_5_25_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:335  %W_addr_5_25_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_24)

ST_79: W_addr_41 [1/1] 0.00ns
.preheader8.preheader:336  %W_addr_41 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 41

ST_79: stg_1114 [1/1] 2.71ns
.preheader8.preheader:337  store i32 %W_addr_5_25_loc_assign_4, i32* %W_addr_41, align 4

ST_79: tmp_48_16 [1/1] 1.97ns
.preheader8.preheader:1102  %tmp_48_16 = add i32 %call_ret17_15, %tmp_47_16

ST_79: temp_2_16 [1/1] 1.97ns
.preheader8.preheader:1103  %temp_2_16 = add i32 %W_addr_5_21_loc_assign_4, %tmp_48_16

ST_79: call_ret46_16 [1/1] 4.52ns
.preheader8.preheader:1104  %call_ret46_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_15, i32 %B_ret28_15, i32 %C_ret29_15, i32 %D_ret30_15, i32 %temp_2_16)

ST_79: call_ret17_16 [1/1] 0.00ns
.preheader8.preheader:1105  %call_ret17_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 0

ST_79: A_ret27_16 [1/1] 0.00ns
.preheader8.preheader:1106  %A_ret27_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 1

ST_79: B_ret28_16 [1/1] 0.00ns
.preheader8.preheader:1107  %B_ret28_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 2

ST_79: C_ret29_16 [1/1] 0.00ns
.preheader8.preheader:1108  %C_ret29_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 3

ST_79: D_ret30_16 [1/1] 0.00ns
.preheader8.preheader:1109  %D_ret30_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 4


 <State 80>: 8.46ns
ST_80: tmp_42_17 [1/1] 4.52ns
.preheader8.preheader:1110  %tmp_42_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_16)

ST_80: tmp_43_17 [1/1] 0.00ns (grouped into LUT with out node tmp_44_17)
.preheader8.preheader:1111  %tmp_43_17 = xor i32 %C_ret29_16, %B_ret28_16

ST_80: tmp_44_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1112  %tmp_44_17 = xor i32 %tmp_43_17, %D_ret30_16

ST_80: tmp_46_17 [1/1] 1.97ns
.preheader8.preheader:1113  %tmp_46_17 = add i32 %tmp_42_17, 1859775393

ST_80: tmp_47_17 [1/1] 1.97ns
.preheader8.preheader:1114  %tmp_47_17 = add i32 %tmp_44_17, %tmp_46_17


 <State 81>: 8.60ns
ST_81: tmp_28_25 [1/1] 0.00ns (grouped into LUT with out node tmp_30_25)
.preheader8.preheader:338  %tmp_28_25 = xor i32 %W_addr_5_18_loc_assign_4, %W_addr_5_23_loc_assign_4

ST_81: tmp_29_25 [1/1] 0.00ns (grouped into LUT with out node tmp_30_25)
.preheader8.preheader:339  %tmp_29_25 = xor i32 %tmp_28_25, %W_addr_5_12_loc_assign_4

ST_81: tmp_30_25 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:340  %tmp_30_25 = xor i32 %tmp_29_25, %W_addr_5_10_loc_assign_4

ST_81: W_addr_5_26_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:341  %W_addr_5_26_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_25)

ST_81: W_addr_42 [1/1] 0.00ns
.preheader8.preheader:342  %W_addr_42 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 42

ST_81: stg_1133 [1/1] 2.71ns
.preheader8.preheader:343  store i32 %W_addr_5_26_loc_assign_4, i32* %W_addr_42, align 8

ST_81: tmp_48_17 [1/1] 1.97ns
.preheader8.preheader:1115  %tmp_48_17 = add i32 %call_ret17_16, %tmp_47_17

ST_81: temp_2_17 [1/1] 1.97ns
.preheader8.preheader:1116  %temp_2_17 = add i32 %W_addr_5_22_loc_assign_4, %tmp_48_17

ST_81: call_ret46_17 [1/1] 4.52ns
.preheader8.preheader:1117  %call_ret46_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_16, i32 %B_ret28_16, i32 %C_ret29_16, i32 %D_ret30_16, i32 %temp_2_17)

ST_81: call_ret17_17 [1/1] 0.00ns
.preheader8.preheader:1118  %call_ret17_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 0

ST_81: A_ret27_17 [1/1] 0.00ns
.preheader8.preheader:1119  %A_ret27_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 1

ST_81: B_ret28_17 [1/1] 0.00ns
.preheader8.preheader:1120  %B_ret28_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 2

ST_81: C_ret29_17 [1/1] 0.00ns
.preheader8.preheader:1121  %C_ret29_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 3

ST_81: D_ret30_17 [1/1] 0.00ns
.preheader8.preheader:1122  %D_ret30_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 4


 <State 82>: 8.46ns
ST_82: tmp_42_18 [1/1] 4.52ns
.preheader8.preheader:1123  %tmp_42_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_17)

ST_82: tmp_43_18 [1/1] 0.00ns (grouped into LUT with out node tmp_44_18)
.preheader8.preheader:1124  %tmp_43_18 = xor i32 %C_ret29_17, %B_ret28_17

ST_82: tmp_44_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1125  %tmp_44_18 = xor i32 %tmp_43_18, %D_ret30_17

ST_82: tmp_46_18 [1/1] 1.97ns
.preheader8.preheader:1126  %tmp_46_18 = add i32 %tmp_42_18, 1859775393

ST_82: tmp_47_18 [1/1] 1.97ns
.preheader8.preheader:1127  %tmp_47_18 = add i32 %tmp_44_18, %tmp_46_18


 <State 83>: 8.60ns
ST_83: tmp_28_26 [1/1] 0.00ns (grouped into LUT with out node tmp_30_26)
.preheader8.preheader:344  %tmp_28_26 = xor i32 %W_addr_5_19_loc_assign_4, %W_addr_5_24_loc_assign_4

ST_83: tmp_29_26 [1/1] 0.00ns (grouped into LUT with out node tmp_30_26)
.preheader8.preheader:345  %tmp_29_26 = xor i32 %tmp_28_26, %W_addr_5_13_loc_assign_4

ST_83: tmp_30_26 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:346  %tmp_30_26 = xor i32 %tmp_29_26, %W_addr_5_11_loc_assign_4

ST_83: W_addr_5_27_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:347  %W_addr_5_27_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_26)

ST_83: W_addr_43 [1/1] 0.00ns
.preheader8.preheader:348  %W_addr_43 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 43

ST_83: stg_1152 [1/1] 2.71ns
.preheader8.preheader:349  store i32 %W_addr_5_27_loc_assign_4, i32* %W_addr_43, align 4

ST_83: tmp_48_18 [1/1] 1.97ns
.preheader8.preheader:1128  %tmp_48_18 = add i32 %call_ret17_17, %tmp_47_18

ST_83: temp_2_18 [1/1] 1.97ns
.preheader8.preheader:1129  %temp_2_18 = add i32 %W_addr_5_23_loc_assign_4, %tmp_48_18

ST_83: call_ret46_18 [1/1] 4.52ns
.preheader8.preheader:1130  %call_ret46_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_17, i32 %B_ret28_17, i32 %C_ret29_17, i32 %D_ret30_17, i32 %temp_2_18)

ST_83: call_ret17_18 [1/1] 0.00ns
.preheader8.preheader:1131  %call_ret17_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 0

ST_83: A_ret27_18 [1/1] 0.00ns
.preheader8.preheader:1132  %A_ret27_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 1

ST_83: B_ret28_18 [1/1] 0.00ns
.preheader8.preheader:1133  %B_ret28_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 2

ST_83: C_ret29_18 [1/1] 0.00ns
.preheader8.preheader:1134  %C_ret29_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 3

ST_83: D_ret30_18 [1/1] 0.00ns
.preheader8.preheader:1135  %D_ret30_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 4


 <State 84>: 8.46ns
ST_84: tmp_18 [1/1] 4.52ns
.preheader8.preheader:1136  %tmp_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_18)

ST_84: tmp_23 [1/1] 1.97ns
.preheader8.preheader:1141  %tmp_23 = add i32 %tmp_18, -1894007588

ST_84: tmp_24 [1/1] 1.97ns
.preheader8.preheader:1142  %tmp_24 = add i32 %call_ret17_18, %tmp_23


 <State 85>: 8.60ns
ST_85: tmp_28_27 [1/1] 0.00ns (grouped into LUT with out node tmp_30_27)
.preheader8.preheader:350  %tmp_28_27 = xor i32 %W_addr_5_20_loc_assign_4, %W_addr_5_25_loc_assign_4

ST_85: tmp_29_27 [1/1] 0.00ns (grouped into LUT with out node tmp_30_27)
.preheader8.preheader:351  %tmp_29_27 = xor i32 %tmp_28_27, %W_addr_5_14_loc_assign_4

ST_85: tmp_30_27 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:352  %tmp_30_27 = xor i32 %tmp_29_27, %W_addr_5_12_loc_assign_4

ST_85: W_addr_5_28_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:353  %W_addr_5_28_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_27)

ST_85: W_addr_44 [1/1] 0.00ns
.preheader8.preheader:354  %W_addr_44 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 44

ST_85: stg_1169 [1/1] 2.71ns
.preheader8.preheader:355  store i32 %W_addr_5_28_loc_assign_4, i32* %W_addr_44, align 16

ST_85: tmp_19 [1/1] 0.00ns (grouped into LUT with out node tmp_22)
.preheader8.preheader:1137  %tmp_19 = or i32 %D_ret30_18, %C_ret29_18

ST_85: tmp_20 [1/1] 0.00ns (grouped into LUT with out node tmp_22)
.preheader8.preheader:1138  %tmp_20 = and i32 %tmp_19, %B_ret28_18

ST_85: tmp_21 [1/1] 0.00ns (grouped into LUT with out node tmp_22)
.preheader8.preheader:1139  %tmp_21 = and i32 %D_ret30_18, %C_ret29_18

ST_85: tmp_22 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1140  %tmp_22 = or i32 %tmp_20, %tmp_21

ST_85: tmp_25 [1/1] 1.97ns
.preheader8.preheader:1143  %tmp_25 = add i32 %W_addr_5_24_loc_assign_4, %tmp_24

ST_85: temp_3 [1/1] 1.97ns
.preheader8.preheader:1144  %temp_3 = add i32 %tmp_22, %tmp_25

ST_85: call_ret5 [1/1] 4.52ns
.preheader8.preheader:1145  %call_ret5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_18, i32 %B_ret28_18, i32 %C_ret29_18, i32 %D_ret30_18, i32 %temp_3)

ST_85: call_ret6 [1/1] 0.00ns
.preheader8.preheader:1146  %call_ret6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 0

ST_85: A_ret2 [1/1] 0.00ns
.preheader8.preheader:1147  %A_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 1

ST_85: B_ret2 [1/1] 0.00ns
.preheader8.preheader:1148  %B_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 2

ST_85: C_ret2 [1/1] 0.00ns
.preheader8.preheader:1149  %C_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 3

ST_85: D_ret2 [1/1] 0.00ns
.preheader8.preheader:1150  %D_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 4


 <State 86>: 8.46ns
ST_86: tmp_49_1 [1/1] 4.52ns
.preheader8.preheader:1151  %tmp_49_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret2)

ST_86: tmp_55_1 [1/1] 1.97ns
.preheader8.preheader:1156  %tmp_55_1 = add i32 %tmp_49_1, -1894007588

ST_86: tmp_56_1 [1/1] 1.97ns
.preheader8.preheader:1157  %tmp_56_1 = add i32 %call_ret6, %tmp_55_1


 <State 87>: 8.60ns
ST_87: tmp_28_28 [1/1] 0.00ns (grouped into LUT with out node tmp_30_28)
.preheader8.preheader:356  %tmp_28_28 = xor i32 %W_addr_5_21_loc_assign_4, %W_addr_5_26_loc_assign_4

ST_87: tmp_29_28 [1/1] 0.00ns (grouped into LUT with out node tmp_30_28)
.preheader8.preheader:357  %tmp_29_28 = xor i32 %tmp_28_28, %W_addr_5_15_loc_assign_4

ST_87: tmp_30_28 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:358  %tmp_30_28 = xor i32 %tmp_29_28, %W_addr_5_13_loc_assign_4

ST_87: W_addr_5_29_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:359  %W_addr_5_29_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_28)

ST_87: W_addr_45 [1/1] 0.00ns
.preheader8.preheader:360  %W_addr_45 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 45

ST_87: stg_1190 [1/1] 2.71ns
.preheader8.preheader:361  store i32 %W_addr_5_29_loc_assign_4, i32* %W_addr_45, align 4

ST_87: tmp_50_1 [1/1] 0.00ns (grouped into LUT with out node tmp_53_1)
.preheader8.preheader:1152  %tmp_50_1 = or i32 %D_ret2, %C_ret2

ST_87: tmp_51_1 [1/1] 0.00ns (grouped into LUT with out node tmp_53_1)
.preheader8.preheader:1153  %tmp_51_1 = and i32 %tmp_50_1, %B_ret2

ST_87: tmp_52_1 [1/1] 0.00ns (grouped into LUT with out node tmp_53_1)
.preheader8.preheader:1154  %tmp_52_1 = and i32 %D_ret2, %C_ret2

ST_87: tmp_53_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1155  %tmp_53_1 = or i32 %tmp_51_1, %tmp_52_1

ST_87: tmp_57_1 [1/1] 1.97ns
.preheader8.preheader:1158  %tmp_57_1 = add i32 %W_addr_5_25_loc_assign_4, %tmp_56_1

ST_87: temp_3_1 [1/1] 1.97ns
.preheader8.preheader:1159  %temp_3_1 = add i32 %tmp_53_1, %tmp_57_1

ST_87: call_ret45_1 [1/1] 4.52ns
.preheader8.preheader:1160  %call_ret45_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret2, i32 %B_ret2, i32 %C_ret2, i32 %D_ret2, i32 %temp_3_1)

ST_87: call_ret11_1 [1/1] 0.00ns
.preheader8.preheader:1161  %call_ret11_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 0

ST_87: A_ret33_1 [1/1] 0.00ns
.preheader8.preheader:1162  %A_ret33_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 1

ST_87: B_ret34_1 [1/1] 0.00ns
.preheader8.preheader:1163  %B_ret34_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 2

ST_87: C_ret35_1 [1/1] 0.00ns
.preheader8.preheader:1164  %C_ret35_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 3

ST_87: D_ret36_1 [1/1] 0.00ns
.preheader8.preheader:1165  %D_ret36_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 4


 <State 88>: 8.46ns
ST_88: tmp_49_2 [1/1] 4.52ns
.preheader8.preheader:1166  %tmp_49_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_1)

ST_88: tmp_55_2 [1/1] 1.97ns
.preheader8.preheader:1171  %tmp_55_2 = add i32 %tmp_49_2, -1894007588

ST_88: tmp_56_2 [1/1] 1.97ns
.preheader8.preheader:1172  %tmp_56_2 = add i32 %call_ret11_1, %tmp_55_2


 <State 89>: 8.60ns
ST_89: tmp_28_29 [1/1] 0.00ns (grouped into LUT with out node tmp_30_29)
.preheader8.preheader:362  %tmp_28_29 = xor i32 %W_addr_5_22_loc_assign_4, %W_addr_5_27_loc_assign_4

ST_89: tmp_29_29 [1/1] 0.00ns (grouped into LUT with out node tmp_30_29)
.preheader8.preheader:363  %tmp_29_29 = xor i32 %tmp_28_29, %W_addr_5_16_loc_assign_4

ST_89: tmp_30_29 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:364  %tmp_30_29 = xor i32 %tmp_29_29, %W_addr_5_14_loc_assign_4

ST_89: W_addr_5_30_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:365  %W_addr_5_30_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_29)

ST_89: W_addr_46 [1/1] 0.00ns
.preheader8.preheader:366  %W_addr_46 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 46

ST_89: stg_1211 [1/1] 2.71ns
.preheader8.preheader:367  store i32 %W_addr_5_30_loc_assign_4, i32* %W_addr_46, align 8

ST_89: tmp_50_2 [1/1] 0.00ns (grouped into LUT with out node tmp_53_2)
.preheader8.preheader:1167  %tmp_50_2 = or i32 %D_ret36_1, %C_ret35_1

ST_89: tmp_51_2 [1/1] 0.00ns (grouped into LUT with out node tmp_53_2)
.preheader8.preheader:1168  %tmp_51_2 = and i32 %tmp_50_2, %B_ret34_1

ST_89: tmp_52_2 [1/1] 0.00ns (grouped into LUT with out node tmp_53_2)
.preheader8.preheader:1169  %tmp_52_2 = and i32 %D_ret36_1, %C_ret35_1

ST_89: tmp_53_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1170  %tmp_53_2 = or i32 %tmp_51_2, %tmp_52_2

ST_89: tmp_57_2 [1/1] 1.97ns
.preheader8.preheader:1173  %tmp_57_2 = add i32 %W_addr_5_26_loc_assign_4, %tmp_56_2

ST_89: temp_3_2 [1/1] 1.97ns
.preheader8.preheader:1174  %temp_3_2 = add i32 %tmp_53_2, %tmp_57_2

ST_89: call_ret45_2 [1/1] 4.52ns
.preheader8.preheader:1175  %call_ret45_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_1, i32 %B_ret34_1, i32 %C_ret35_1, i32 %D_ret36_1, i32 %temp_3_2)

ST_89: call_ret11_2 [1/1] 0.00ns
.preheader8.preheader:1176  %call_ret11_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 0

ST_89: A_ret33_2 [1/1] 0.00ns
.preheader8.preheader:1177  %A_ret33_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 1

ST_89: B_ret34_2 [1/1] 0.00ns
.preheader8.preheader:1178  %B_ret34_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 2

ST_89: C_ret35_2 [1/1] 0.00ns
.preheader8.preheader:1179  %C_ret35_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 3

ST_89: D_ret36_2 [1/1] 0.00ns
.preheader8.preheader:1180  %D_ret36_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 4


 <State 90>: 8.46ns
ST_90: tmp_49_3 [1/1] 4.52ns
.preheader8.preheader:1181  %tmp_49_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_2)

ST_90: tmp_55_3 [1/1] 1.97ns
.preheader8.preheader:1186  %tmp_55_3 = add i32 %tmp_49_3, -1894007588

ST_90: tmp_56_3 [1/1] 1.97ns
.preheader8.preheader:1187  %tmp_56_3 = add i32 %call_ret11_2, %tmp_55_3


 <State 91>: 8.60ns
ST_91: tmp_28_30 [1/1] 0.00ns (grouped into LUT with out node tmp_30_30)
.preheader8.preheader:368  %tmp_28_30 = xor i32 %W_addr_5_23_loc_assign_4, %W_addr_5_28_loc_assign_4

ST_91: tmp_29_30 [1/1] 0.00ns (grouped into LUT with out node tmp_30_30)
.preheader8.preheader:369  %tmp_29_30 = xor i32 %tmp_28_30, %W_addr_5_17_loc_assign_4

ST_91: tmp_30_30 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:370  %tmp_30_30 = xor i32 %tmp_29_30, %W_addr_5_15_loc_assign_4

ST_91: W_addr_5_31_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:371  %W_addr_5_31_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_30)

ST_91: W_addr_47 [1/1] 0.00ns
.preheader8.preheader:372  %W_addr_47 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 47

ST_91: stg_1232 [1/1] 2.71ns
.preheader8.preheader:373  store i32 %W_addr_5_31_loc_assign_4, i32* %W_addr_47, align 4

ST_91: tmp_50_3 [1/1] 0.00ns (grouped into LUT with out node tmp_53_3)
.preheader8.preheader:1182  %tmp_50_3 = or i32 %D_ret36_2, %C_ret35_2

ST_91: tmp_51_3 [1/1] 0.00ns (grouped into LUT with out node tmp_53_3)
.preheader8.preheader:1183  %tmp_51_3 = and i32 %tmp_50_3, %B_ret34_2

ST_91: tmp_52_3 [1/1] 0.00ns (grouped into LUT with out node tmp_53_3)
.preheader8.preheader:1184  %tmp_52_3 = and i32 %D_ret36_2, %C_ret35_2

ST_91: tmp_53_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1185  %tmp_53_3 = or i32 %tmp_51_3, %tmp_52_3

ST_91: tmp_57_3 [1/1] 1.97ns
.preheader8.preheader:1188  %tmp_57_3 = add i32 %W_addr_5_27_loc_assign_4, %tmp_56_3

ST_91: temp_3_3 [1/1] 1.97ns
.preheader8.preheader:1189  %temp_3_3 = add i32 %tmp_53_3, %tmp_57_3

ST_91: call_ret45_3 [1/1] 4.52ns
.preheader8.preheader:1190  %call_ret45_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_2, i32 %B_ret34_2, i32 %C_ret35_2, i32 %D_ret36_2, i32 %temp_3_3)

ST_91: call_ret11_3 [1/1] 0.00ns
.preheader8.preheader:1191  %call_ret11_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 0

ST_91: A_ret33_3 [1/1] 0.00ns
.preheader8.preheader:1192  %A_ret33_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 1

ST_91: B_ret34_3 [1/1] 0.00ns
.preheader8.preheader:1193  %B_ret34_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 2

ST_91: C_ret35_3 [1/1] 0.00ns
.preheader8.preheader:1194  %C_ret35_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 3

ST_91: D_ret36_3 [1/1] 0.00ns
.preheader8.preheader:1195  %D_ret36_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 4


 <State 92>: 8.46ns
ST_92: tmp_49_4 [1/1] 4.52ns
.preheader8.preheader:1196  %tmp_49_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_3)

ST_92: tmp_55_4 [1/1] 1.97ns
.preheader8.preheader:1201  %tmp_55_4 = add i32 %tmp_49_4, -1894007588

ST_92: tmp_56_4 [1/1] 1.97ns
.preheader8.preheader:1202  %tmp_56_4 = add i32 %call_ret11_3, %tmp_55_4


 <State 93>: 8.60ns
ST_93: tmp_28_31 [1/1] 0.00ns (grouped into LUT with out node tmp_30_31)
.preheader8.preheader:374  %tmp_28_31 = xor i32 %W_addr_5_24_loc_assign_4, %W_addr_5_29_loc_assign_4

ST_93: tmp_29_31 [1/1] 0.00ns (grouped into LUT with out node tmp_30_31)
.preheader8.preheader:375  %tmp_29_31 = xor i32 %tmp_28_31, %W_addr_5_18_loc_assign_4

ST_93: tmp_30_31 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:376  %tmp_30_31 = xor i32 %tmp_29_31, %W_addr_5_16_loc_assign_4

ST_93: W_addr_5_32_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:377  %W_addr_5_32_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_31)

ST_93: W_addr_48 [1/1] 0.00ns
.preheader8.preheader:378  %W_addr_48 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 48

ST_93: stg_1253 [1/1] 2.71ns
.preheader8.preheader:379  store i32 %W_addr_5_32_loc_assign_4, i32* %W_addr_48, align 16

ST_93: tmp_50_4 [1/1] 0.00ns (grouped into LUT with out node tmp_53_4)
.preheader8.preheader:1197  %tmp_50_4 = or i32 %D_ret36_3, %C_ret35_3

ST_93: tmp_51_4 [1/1] 0.00ns (grouped into LUT with out node tmp_53_4)
.preheader8.preheader:1198  %tmp_51_4 = and i32 %tmp_50_4, %B_ret34_3

ST_93: tmp_52_4 [1/1] 0.00ns (grouped into LUT with out node tmp_53_4)
.preheader8.preheader:1199  %tmp_52_4 = and i32 %D_ret36_3, %C_ret35_3

ST_93: tmp_53_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1200  %tmp_53_4 = or i32 %tmp_51_4, %tmp_52_4

ST_93: tmp_57_4 [1/1] 1.97ns
.preheader8.preheader:1203  %tmp_57_4 = add i32 %W_addr_5_28_loc_assign_4, %tmp_56_4

ST_93: temp_3_4 [1/1] 1.97ns
.preheader8.preheader:1204  %temp_3_4 = add i32 %tmp_53_4, %tmp_57_4

ST_93: call_ret45_4 [1/1] 4.52ns
.preheader8.preheader:1205  %call_ret45_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_3, i32 %B_ret34_3, i32 %C_ret35_3, i32 %D_ret36_3, i32 %temp_3_4)

ST_93: call_ret11_4 [1/1] 0.00ns
.preheader8.preheader:1206  %call_ret11_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 0

ST_93: A_ret33_4 [1/1] 0.00ns
.preheader8.preheader:1207  %A_ret33_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 1

ST_93: B_ret34_4 [1/1] 0.00ns
.preheader8.preheader:1208  %B_ret34_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 2

ST_93: C_ret35_4 [1/1] 0.00ns
.preheader8.preheader:1209  %C_ret35_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 3

ST_93: D_ret36_4 [1/1] 0.00ns
.preheader8.preheader:1210  %D_ret36_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 4


 <State 94>: 8.46ns
ST_94: tmp_49_5 [1/1] 4.52ns
.preheader8.preheader:1211  %tmp_49_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_4)

ST_94: tmp_55_5 [1/1] 1.97ns
.preheader8.preheader:1216  %tmp_55_5 = add i32 %tmp_49_5, -1894007588

ST_94: tmp_56_5 [1/1] 1.97ns
.preheader8.preheader:1217  %tmp_56_5 = add i32 %call_ret11_4, %tmp_55_5


 <State 95>: 8.60ns
ST_95: tmp_28_32 [1/1] 0.00ns (grouped into LUT with out node tmp_30_32)
.preheader8.preheader:380  %tmp_28_32 = xor i32 %W_addr_5_25_loc_assign_4, %W_addr_5_30_loc_assign_4

ST_95: tmp_29_32 [1/1] 0.00ns (grouped into LUT with out node tmp_30_32)
.preheader8.preheader:381  %tmp_29_32 = xor i32 %tmp_28_32, %W_addr_5_19_loc_assign_4

ST_95: tmp_30_32 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:382  %tmp_30_32 = xor i32 %tmp_29_32, %W_addr_5_17_loc_assign_4

ST_95: W_addr_5_33_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:383  %W_addr_5_33_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_32)

ST_95: W_addr_49 [1/1] 0.00ns
.preheader8.preheader:384  %W_addr_49 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 49

ST_95: stg_1274 [1/1] 2.71ns
.preheader8.preheader:385  store i32 %W_addr_5_33_loc_assign_4, i32* %W_addr_49, align 4

ST_95: tmp_50_5 [1/1] 0.00ns (grouped into LUT with out node tmp_53_5)
.preheader8.preheader:1212  %tmp_50_5 = or i32 %D_ret36_4, %C_ret35_4

ST_95: tmp_51_5 [1/1] 0.00ns (grouped into LUT with out node tmp_53_5)
.preheader8.preheader:1213  %tmp_51_5 = and i32 %tmp_50_5, %B_ret34_4

ST_95: tmp_52_5 [1/1] 0.00ns (grouped into LUT with out node tmp_53_5)
.preheader8.preheader:1214  %tmp_52_5 = and i32 %D_ret36_4, %C_ret35_4

ST_95: tmp_53_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1215  %tmp_53_5 = or i32 %tmp_51_5, %tmp_52_5

ST_95: tmp_57_5 [1/1] 1.97ns
.preheader8.preheader:1218  %tmp_57_5 = add i32 %W_addr_5_29_loc_assign_4, %tmp_56_5

ST_95: temp_3_5 [1/1] 1.97ns
.preheader8.preheader:1219  %temp_3_5 = add i32 %tmp_53_5, %tmp_57_5

ST_95: call_ret45_5 [1/1] 4.52ns
.preheader8.preheader:1220  %call_ret45_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_4, i32 %B_ret34_4, i32 %C_ret35_4, i32 %D_ret36_4, i32 %temp_3_5)

ST_95: call_ret11_5 [1/1] 0.00ns
.preheader8.preheader:1221  %call_ret11_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 0

ST_95: A_ret33_5 [1/1] 0.00ns
.preheader8.preheader:1222  %A_ret33_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 1

ST_95: B_ret34_5 [1/1] 0.00ns
.preheader8.preheader:1223  %B_ret34_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 2

ST_95: C_ret35_5 [1/1] 0.00ns
.preheader8.preheader:1224  %C_ret35_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 3

ST_95: D_ret36_5 [1/1] 0.00ns
.preheader8.preheader:1225  %D_ret36_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 4


 <State 96>: 8.46ns
ST_96: tmp_49_6 [1/1] 4.52ns
.preheader8.preheader:1226  %tmp_49_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_5)

ST_96: tmp_55_6 [1/1] 1.97ns
.preheader8.preheader:1231  %tmp_55_6 = add i32 %tmp_49_6, -1894007588

ST_96: tmp_56_6 [1/1] 1.97ns
.preheader8.preheader:1232  %tmp_56_6 = add i32 %call_ret11_5, %tmp_55_6


 <State 97>: 8.60ns
ST_97: tmp_28_33 [1/1] 0.00ns (grouped into LUT with out node tmp_30_33)
.preheader8.preheader:386  %tmp_28_33 = xor i32 %W_addr_5_26_loc_assign_4, %W_addr_5_31_loc_assign_4

ST_97: tmp_29_33 [1/1] 0.00ns (grouped into LUT with out node tmp_30_33)
.preheader8.preheader:387  %tmp_29_33 = xor i32 %tmp_28_33, %W_addr_5_20_loc_assign_4

ST_97: tmp_30_33 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:388  %tmp_30_33 = xor i32 %tmp_29_33, %W_addr_5_18_loc_assign_4

ST_97: W_addr_5_34_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:389  %W_addr_5_34_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_33)

ST_97: W_addr_50 [1/1] 0.00ns
.preheader8.preheader:390  %W_addr_50 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 50

ST_97: stg_1295 [1/1] 2.71ns
.preheader8.preheader:391  store i32 %W_addr_5_34_loc_assign_4, i32* %W_addr_50, align 8

ST_97: tmp_50_6 [1/1] 0.00ns (grouped into LUT with out node tmp_53_6)
.preheader8.preheader:1227  %tmp_50_6 = or i32 %D_ret36_5, %C_ret35_5

ST_97: tmp_51_6 [1/1] 0.00ns (grouped into LUT with out node tmp_53_6)
.preheader8.preheader:1228  %tmp_51_6 = and i32 %tmp_50_6, %B_ret34_5

ST_97: tmp_52_6 [1/1] 0.00ns (grouped into LUT with out node tmp_53_6)
.preheader8.preheader:1229  %tmp_52_6 = and i32 %D_ret36_5, %C_ret35_5

ST_97: tmp_53_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1230  %tmp_53_6 = or i32 %tmp_51_6, %tmp_52_6

ST_97: tmp_57_6 [1/1] 1.97ns
.preheader8.preheader:1233  %tmp_57_6 = add i32 %W_addr_5_30_loc_assign_4, %tmp_56_6

ST_97: temp_3_6 [1/1] 1.97ns
.preheader8.preheader:1234  %temp_3_6 = add i32 %tmp_53_6, %tmp_57_6

ST_97: call_ret45_6 [1/1] 4.52ns
.preheader8.preheader:1235  %call_ret45_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_5, i32 %B_ret34_5, i32 %C_ret35_5, i32 %D_ret36_5, i32 %temp_3_6)

ST_97: call_ret11_6 [1/1] 0.00ns
.preheader8.preheader:1236  %call_ret11_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 0

ST_97: A_ret33_6 [1/1] 0.00ns
.preheader8.preheader:1237  %A_ret33_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 1

ST_97: B_ret34_6 [1/1] 0.00ns
.preheader8.preheader:1238  %B_ret34_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 2

ST_97: C_ret35_6 [1/1] 0.00ns
.preheader8.preheader:1239  %C_ret35_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 3

ST_97: D_ret36_6 [1/1] 0.00ns
.preheader8.preheader:1240  %D_ret36_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 4


 <State 98>: 8.46ns
ST_98: tmp_49_7 [1/1] 4.52ns
.preheader8.preheader:1241  %tmp_49_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_6)

ST_98: tmp_55_7 [1/1] 1.97ns
.preheader8.preheader:1246  %tmp_55_7 = add i32 %tmp_49_7, -1894007588

ST_98: tmp_56_7 [1/1] 1.97ns
.preheader8.preheader:1247  %tmp_56_7 = add i32 %call_ret11_6, %tmp_55_7


 <State 99>: 8.60ns
ST_99: tmp_28_34 [1/1] 0.00ns (grouped into LUT with out node tmp_30_34)
.preheader8.preheader:392  %tmp_28_34 = xor i32 %W_addr_5_27_loc_assign_4, %W_addr_5_32_loc_assign_4

ST_99: tmp_29_34 [1/1] 0.00ns (grouped into LUT with out node tmp_30_34)
.preheader8.preheader:393  %tmp_29_34 = xor i32 %tmp_28_34, %W_addr_5_21_loc_assign_4

ST_99: tmp_30_34 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:394  %tmp_30_34 = xor i32 %tmp_29_34, %W_addr_5_19_loc_assign_4

ST_99: W_addr_5_35_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:395  %W_addr_5_35_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_34)

ST_99: W_addr_51 [1/1] 0.00ns
.preheader8.preheader:396  %W_addr_51 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 51

ST_99: stg_1316 [1/1] 2.71ns
.preheader8.preheader:397  store i32 %W_addr_5_35_loc_assign_4, i32* %W_addr_51, align 4

ST_99: tmp_50_7 [1/1] 0.00ns (grouped into LUT with out node tmp_53_7)
.preheader8.preheader:1242  %tmp_50_7 = or i32 %D_ret36_6, %C_ret35_6

ST_99: tmp_51_7 [1/1] 0.00ns (grouped into LUT with out node tmp_53_7)
.preheader8.preheader:1243  %tmp_51_7 = and i32 %tmp_50_7, %B_ret34_6

ST_99: tmp_52_7 [1/1] 0.00ns (grouped into LUT with out node tmp_53_7)
.preheader8.preheader:1244  %tmp_52_7 = and i32 %D_ret36_6, %C_ret35_6

ST_99: tmp_53_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1245  %tmp_53_7 = or i32 %tmp_51_7, %tmp_52_7

ST_99: tmp_57_7 [1/1] 1.97ns
.preheader8.preheader:1248  %tmp_57_7 = add i32 %W_addr_5_31_loc_assign_4, %tmp_56_7

ST_99: temp_3_7 [1/1] 1.97ns
.preheader8.preheader:1249  %temp_3_7 = add i32 %tmp_53_7, %tmp_57_7

ST_99: call_ret45_7 [1/1] 4.52ns
.preheader8.preheader:1250  %call_ret45_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_6, i32 %B_ret34_6, i32 %C_ret35_6, i32 %D_ret36_6, i32 %temp_3_7)

ST_99: call_ret11_7 [1/1] 0.00ns
.preheader8.preheader:1251  %call_ret11_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 0

ST_99: A_ret33_7 [1/1] 0.00ns
.preheader8.preheader:1252  %A_ret33_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 1

ST_99: B_ret34_7 [1/1] 0.00ns
.preheader8.preheader:1253  %B_ret34_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 2

ST_99: C_ret35_7 [1/1] 0.00ns
.preheader8.preheader:1254  %C_ret35_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 3

ST_99: D_ret36_7 [1/1] 0.00ns
.preheader8.preheader:1255  %D_ret36_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 4


 <State 100>: 8.46ns
ST_100: tmp_49_8 [1/1] 4.52ns
.preheader8.preheader:1256  %tmp_49_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_7)

ST_100: tmp_55_8 [1/1] 1.97ns
.preheader8.preheader:1261  %tmp_55_8 = add i32 %tmp_49_8, -1894007588

ST_100: tmp_56_8 [1/1] 1.97ns
.preheader8.preheader:1262  %tmp_56_8 = add i32 %call_ret11_7, %tmp_55_8


 <State 101>: 8.60ns
ST_101: tmp_28_35 [1/1] 0.00ns (grouped into LUT with out node tmp_30_35)
.preheader8.preheader:398  %tmp_28_35 = xor i32 %W_addr_5_28_loc_assign_4, %W_addr_5_33_loc_assign_4

ST_101: tmp_29_35 [1/1] 0.00ns (grouped into LUT with out node tmp_30_35)
.preheader8.preheader:399  %tmp_29_35 = xor i32 %tmp_28_35, %W_addr_5_22_loc_assign_4

ST_101: tmp_30_35 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:400  %tmp_30_35 = xor i32 %tmp_29_35, %W_addr_5_20_loc_assign_4

ST_101: W_addr_5_36_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:401  %W_addr_5_36_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_35)

ST_101: W_addr_52 [1/1] 0.00ns
.preheader8.preheader:402  %W_addr_52 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 52

ST_101: stg_1337 [1/1] 2.71ns
.preheader8.preheader:403  store i32 %W_addr_5_36_loc_assign_4, i32* %W_addr_52, align 16

ST_101: tmp_50_8 [1/1] 0.00ns (grouped into LUT with out node tmp_53_8)
.preheader8.preheader:1257  %tmp_50_8 = or i32 %D_ret36_7, %C_ret35_7

ST_101: tmp_51_8 [1/1] 0.00ns (grouped into LUT with out node tmp_53_8)
.preheader8.preheader:1258  %tmp_51_8 = and i32 %tmp_50_8, %B_ret34_7

ST_101: tmp_52_8 [1/1] 0.00ns (grouped into LUT with out node tmp_53_8)
.preheader8.preheader:1259  %tmp_52_8 = and i32 %D_ret36_7, %C_ret35_7

ST_101: tmp_53_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1260  %tmp_53_8 = or i32 %tmp_51_8, %tmp_52_8

ST_101: tmp_57_8 [1/1] 1.97ns
.preheader8.preheader:1263  %tmp_57_8 = add i32 %W_addr_5_32_loc_assign_4, %tmp_56_8

ST_101: temp_3_8 [1/1] 1.97ns
.preheader8.preheader:1264  %temp_3_8 = add i32 %tmp_53_8, %tmp_57_8

ST_101: call_ret45_8 [1/1] 4.52ns
.preheader8.preheader:1265  %call_ret45_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_7, i32 %B_ret34_7, i32 %C_ret35_7, i32 %D_ret36_7, i32 %temp_3_8)

ST_101: call_ret11_8 [1/1] 0.00ns
.preheader8.preheader:1266  %call_ret11_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 0

ST_101: A_ret33_8 [1/1] 0.00ns
.preheader8.preheader:1267  %A_ret33_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 1

ST_101: B_ret34_8 [1/1] 0.00ns
.preheader8.preheader:1268  %B_ret34_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 2

ST_101: C_ret35_8 [1/1] 0.00ns
.preheader8.preheader:1269  %C_ret35_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 3

ST_101: D_ret36_8 [1/1] 0.00ns
.preheader8.preheader:1270  %D_ret36_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 4


 <State 102>: 8.46ns
ST_102: tmp_49_9 [1/1] 4.52ns
.preheader8.preheader:1271  %tmp_49_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_8)

ST_102: tmp_55_9 [1/1] 1.97ns
.preheader8.preheader:1276  %tmp_55_9 = add i32 %tmp_49_9, -1894007588

ST_102: tmp_56_9 [1/1] 1.97ns
.preheader8.preheader:1277  %tmp_56_9 = add i32 %call_ret11_8, %tmp_55_9


 <State 103>: 8.60ns
ST_103: tmp_28_36 [1/1] 0.00ns (grouped into LUT with out node tmp_30_36)
.preheader8.preheader:404  %tmp_28_36 = xor i32 %W_addr_5_29_loc_assign_4, %W_addr_5_34_loc_assign_4

ST_103: tmp_29_36 [1/1] 0.00ns (grouped into LUT with out node tmp_30_36)
.preheader8.preheader:405  %tmp_29_36 = xor i32 %tmp_28_36, %W_addr_5_23_loc_assign_4

ST_103: tmp_30_36 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:406  %tmp_30_36 = xor i32 %tmp_29_36, %W_addr_5_21_loc_assign_4

ST_103: W_addr_5_37_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:407  %W_addr_5_37_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_36)

ST_103: W_addr_53 [1/1] 0.00ns
.preheader8.preheader:408  %W_addr_53 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 53

ST_103: stg_1358 [1/1] 2.71ns
.preheader8.preheader:409  store i32 %W_addr_5_37_loc_assign_4, i32* %W_addr_53, align 4

ST_103: tmp_50_9 [1/1] 0.00ns (grouped into LUT with out node tmp_53_9)
.preheader8.preheader:1272  %tmp_50_9 = or i32 %D_ret36_8, %C_ret35_8

ST_103: tmp_51_9 [1/1] 0.00ns (grouped into LUT with out node tmp_53_9)
.preheader8.preheader:1273  %tmp_51_9 = and i32 %tmp_50_9, %B_ret34_8

ST_103: tmp_52_9 [1/1] 0.00ns (grouped into LUT with out node tmp_53_9)
.preheader8.preheader:1274  %tmp_52_9 = and i32 %D_ret36_8, %C_ret35_8

ST_103: tmp_53_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1275  %tmp_53_9 = or i32 %tmp_51_9, %tmp_52_9

ST_103: tmp_57_9 [1/1] 1.97ns
.preheader8.preheader:1278  %tmp_57_9 = add i32 %W_addr_5_33_loc_assign_4, %tmp_56_9

ST_103: temp_3_9 [1/1] 1.97ns
.preheader8.preheader:1279  %temp_3_9 = add i32 %tmp_53_9, %tmp_57_9

ST_103: call_ret45_9 [1/1] 4.52ns
.preheader8.preheader:1280  %call_ret45_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_8, i32 %B_ret34_8, i32 %C_ret35_8, i32 %D_ret36_8, i32 %temp_3_9)

ST_103: call_ret11_9 [1/1] 0.00ns
.preheader8.preheader:1281  %call_ret11_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 0

ST_103: A_ret33_9 [1/1] 0.00ns
.preheader8.preheader:1282  %A_ret33_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 1

ST_103: B_ret34_9 [1/1] 0.00ns
.preheader8.preheader:1283  %B_ret34_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 2

ST_103: C_ret35_9 [1/1] 0.00ns
.preheader8.preheader:1284  %C_ret35_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 3

ST_103: D_ret36_9 [1/1] 0.00ns
.preheader8.preheader:1285  %D_ret36_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 4


 <State 104>: 8.46ns
ST_104: tmp_49_s [1/1] 4.52ns
.preheader8.preheader:1286  %tmp_49_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_9)

ST_104: tmp_55_s [1/1] 1.97ns
.preheader8.preheader:1291  %tmp_55_s = add i32 %tmp_49_s, -1894007588

ST_104: tmp_56_s [1/1] 1.97ns
.preheader8.preheader:1292  %tmp_56_s = add i32 %call_ret11_9, %tmp_55_s


 <State 105>: 8.60ns
ST_105: tmp_28_37 [1/1] 0.00ns (grouped into LUT with out node tmp_30_37)
.preheader8.preheader:410  %tmp_28_37 = xor i32 %W_addr_5_30_loc_assign_4, %W_addr_5_35_loc_assign_4

ST_105: tmp_29_37 [1/1] 0.00ns (grouped into LUT with out node tmp_30_37)
.preheader8.preheader:411  %tmp_29_37 = xor i32 %tmp_28_37, %W_addr_5_24_loc_assign_4

ST_105: tmp_30_37 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:412  %tmp_30_37 = xor i32 %tmp_29_37, %W_addr_5_22_loc_assign_4

ST_105: W_addr_5_38_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:413  %W_addr_5_38_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_37)

ST_105: W_addr_54 [1/1] 0.00ns
.preheader8.preheader:414  %W_addr_54 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 54

ST_105: stg_1379 [1/1] 2.71ns
.preheader8.preheader:415  store i32 %W_addr_5_38_loc_assign_4, i32* %W_addr_54, align 8

ST_105: tmp_50_s [1/1] 0.00ns (grouped into LUT with out node tmp_53_s)
.preheader8.preheader:1287  %tmp_50_s = or i32 %D_ret36_9, %C_ret35_9

ST_105: tmp_51_s [1/1] 0.00ns (grouped into LUT with out node tmp_53_s)
.preheader8.preheader:1288  %tmp_51_s = and i32 %tmp_50_s, %B_ret34_9

ST_105: tmp_52_s [1/1] 0.00ns (grouped into LUT with out node tmp_53_s)
.preheader8.preheader:1289  %tmp_52_s = and i32 %D_ret36_9, %C_ret35_9

ST_105: tmp_53_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1290  %tmp_53_s = or i32 %tmp_51_s, %tmp_52_s

ST_105: tmp_57_s [1/1] 1.97ns
.preheader8.preheader:1293  %tmp_57_s = add i32 %W_addr_5_34_loc_assign_4, %tmp_56_s

ST_105: temp_3_s [1/1] 1.97ns
.preheader8.preheader:1294  %temp_3_s = add i32 %tmp_53_s, %tmp_57_s

ST_105: call_ret45_s [1/1] 4.52ns
.preheader8.preheader:1295  %call_ret45_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_9, i32 %B_ret34_9, i32 %C_ret35_9, i32 %D_ret36_9, i32 %temp_3_s)

ST_105: call_ret11_s [1/1] 0.00ns
.preheader8.preheader:1296  %call_ret11_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 0

ST_105: A_ret33_s [1/1] 0.00ns
.preheader8.preheader:1297  %A_ret33_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 1

ST_105: B_ret34_s [1/1] 0.00ns
.preheader8.preheader:1298  %B_ret34_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 2

ST_105: C_ret35_s [1/1] 0.00ns
.preheader8.preheader:1299  %C_ret35_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 3

ST_105: D_ret36_s [1/1] 0.00ns
.preheader8.preheader:1300  %D_ret36_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 4


 <State 106>: 8.46ns
ST_106: tmp_49_10 [1/1] 4.52ns
.preheader8.preheader:1301  %tmp_49_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_s)

ST_106: tmp_55_10 [1/1] 1.97ns
.preheader8.preheader:1306  %tmp_55_10 = add i32 %tmp_49_10, -1894007588

ST_106: tmp_56_10 [1/1] 1.97ns
.preheader8.preheader:1307  %tmp_56_10 = add i32 %call_ret11_s, %tmp_55_10


 <State 107>: 8.60ns
ST_107: tmp_28_38 [1/1] 0.00ns (grouped into LUT with out node tmp_30_38)
.preheader8.preheader:416  %tmp_28_38 = xor i32 %W_addr_5_31_loc_assign_4, %W_addr_5_36_loc_assign_4

ST_107: tmp_29_38 [1/1] 0.00ns (grouped into LUT with out node tmp_30_38)
.preheader8.preheader:417  %tmp_29_38 = xor i32 %tmp_28_38, %W_addr_5_25_loc_assign_4

ST_107: tmp_30_38 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:418  %tmp_30_38 = xor i32 %tmp_29_38, %W_addr_5_23_loc_assign_4

ST_107: W_addr_5_39_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:419  %W_addr_5_39_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_38)

ST_107: W_addr_55 [1/1] 0.00ns
.preheader8.preheader:420  %W_addr_55 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 55

ST_107: stg_1400 [1/1] 2.71ns
.preheader8.preheader:421  store i32 %W_addr_5_39_loc_assign_4, i32* %W_addr_55, align 4

ST_107: tmp_50_10 [1/1] 0.00ns (grouped into LUT with out node tmp_53_10)
.preheader8.preheader:1302  %tmp_50_10 = or i32 %D_ret36_s, %C_ret35_s

ST_107: tmp_51_10 [1/1] 0.00ns (grouped into LUT with out node tmp_53_10)
.preheader8.preheader:1303  %tmp_51_10 = and i32 %tmp_50_10, %B_ret34_s

ST_107: tmp_52_10 [1/1] 0.00ns (grouped into LUT with out node tmp_53_10)
.preheader8.preheader:1304  %tmp_52_10 = and i32 %D_ret36_s, %C_ret35_s

ST_107: tmp_53_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1305  %tmp_53_10 = or i32 %tmp_51_10, %tmp_52_10

ST_107: tmp_57_10 [1/1] 1.97ns
.preheader8.preheader:1308  %tmp_57_10 = add i32 %W_addr_5_35_loc_assign_4, %tmp_56_10

ST_107: temp_3_10 [1/1] 1.97ns
.preheader8.preheader:1309  %temp_3_10 = add i32 %tmp_53_10, %tmp_57_10

ST_107: call_ret45_10 [1/1] 4.52ns
.preheader8.preheader:1310  %call_ret45_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_s, i32 %B_ret34_s, i32 %C_ret35_s, i32 %D_ret36_s, i32 %temp_3_10)

ST_107: call_ret11_10 [1/1] 0.00ns
.preheader8.preheader:1311  %call_ret11_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 0

ST_107: A_ret33_10 [1/1] 0.00ns
.preheader8.preheader:1312  %A_ret33_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 1

ST_107: B_ret34_10 [1/1] 0.00ns
.preheader8.preheader:1313  %B_ret34_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 2

ST_107: C_ret35_10 [1/1] 0.00ns
.preheader8.preheader:1314  %C_ret35_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 3

ST_107: D_ret36_10 [1/1] 0.00ns
.preheader8.preheader:1315  %D_ret36_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 4


 <State 108>: 8.46ns
ST_108: tmp_49_11 [1/1] 4.52ns
.preheader8.preheader:1316  %tmp_49_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_10)

ST_108: tmp_55_11 [1/1] 1.97ns
.preheader8.preheader:1321  %tmp_55_11 = add i32 %tmp_49_11, -1894007588

ST_108: tmp_56_11 [1/1] 1.97ns
.preheader8.preheader:1322  %tmp_56_11 = add i32 %call_ret11_10, %tmp_55_11


 <State 109>: 8.60ns
ST_109: tmp_28_39 [1/1] 0.00ns (grouped into LUT with out node tmp_30_39)
.preheader8.preheader:422  %tmp_28_39 = xor i32 %W_addr_5_32_loc_assign_4, %W_addr_5_37_loc_assign_4

ST_109: tmp_29_39 [1/1] 0.00ns (grouped into LUT with out node tmp_30_39)
.preheader8.preheader:423  %tmp_29_39 = xor i32 %tmp_28_39, %W_addr_5_26_loc_assign_4

ST_109: tmp_30_39 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:424  %tmp_30_39 = xor i32 %tmp_29_39, %W_addr_5_24_loc_assign_4

ST_109: W_addr_5_40_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:425  %W_addr_5_40_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_39)

ST_109: W_addr_56 [1/1] 0.00ns
.preheader8.preheader:426  %W_addr_56 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 56

ST_109: stg_1421 [1/1] 2.71ns
.preheader8.preheader:427  store i32 %W_addr_5_40_loc_assign_4, i32* %W_addr_56, align 16

ST_109: tmp_50_11 [1/1] 0.00ns (grouped into LUT with out node tmp_53_11)
.preheader8.preheader:1317  %tmp_50_11 = or i32 %D_ret36_10, %C_ret35_10

ST_109: tmp_51_11 [1/1] 0.00ns (grouped into LUT with out node tmp_53_11)
.preheader8.preheader:1318  %tmp_51_11 = and i32 %tmp_50_11, %B_ret34_10

ST_109: tmp_52_11 [1/1] 0.00ns (grouped into LUT with out node tmp_53_11)
.preheader8.preheader:1319  %tmp_52_11 = and i32 %D_ret36_10, %C_ret35_10

ST_109: tmp_53_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1320  %tmp_53_11 = or i32 %tmp_51_11, %tmp_52_11

ST_109: tmp_57_11 [1/1] 1.97ns
.preheader8.preheader:1323  %tmp_57_11 = add i32 %W_addr_5_36_loc_assign_4, %tmp_56_11

ST_109: temp_3_11 [1/1] 1.97ns
.preheader8.preheader:1324  %temp_3_11 = add i32 %tmp_53_11, %tmp_57_11

ST_109: call_ret45_11 [1/1] 4.52ns
.preheader8.preheader:1325  %call_ret45_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_10, i32 %B_ret34_10, i32 %C_ret35_10, i32 %D_ret36_10, i32 %temp_3_11)

ST_109: call_ret11_11 [1/1] 0.00ns
.preheader8.preheader:1326  %call_ret11_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 0

ST_109: A_ret33_11 [1/1] 0.00ns
.preheader8.preheader:1327  %A_ret33_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 1

ST_109: B_ret34_11 [1/1] 0.00ns
.preheader8.preheader:1328  %B_ret34_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 2

ST_109: C_ret35_11 [1/1] 0.00ns
.preheader8.preheader:1329  %C_ret35_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 3

ST_109: D_ret36_11 [1/1] 0.00ns
.preheader8.preheader:1330  %D_ret36_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 4


 <State 110>: 8.46ns
ST_110: tmp_49_12 [1/1] 4.52ns
.preheader8.preheader:1331  %tmp_49_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_11)

ST_110: tmp_55_12 [1/1] 1.97ns
.preheader8.preheader:1336  %tmp_55_12 = add i32 %tmp_49_12, -1894007588

ST_110: tmp_56_12 [1/1] 1.97ns
.preheader8.preheader:1337  %tmp_56_12 = add i32 %call_ret11_11, %tmp_55_12


 <State 111>: 8.60ns
ST_111: tmp_28_40 [1/1] 0.00ns (grouped into LUT with out node tmp_30_40)
.preheader8.preheader:428  %tmp_28_40 = xor i32 %W_addr_5_33_loc_assign_4, %W_addr_5_38_loc_assign_4

ST_111: tmp_29_40 [1/1] 0.00ns (grouped into LUT with out node tmp_30_40)
.preheader8.preheader:429  %tmp_29_40 = xor i32 %tmp_28_40, %W_addr_5_27_loc_assign_4

ST_111: tmp_30_40 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:430  %tmp_30_40 = xor i32 %tmp_29_40, %W_addr_5_25_loc_assign_4

ST_111: W_addr_5_41_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:431  %W_addr_5_41_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_40)

ST_111: W_addr_57 [1/1] 0.00ns
.preheader8.preheader:432  %W_addr_57 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 57

ST_111: stg_1442 [1/1] 2.71ns
.preheader8.preheader:433  store i32 %W_addr_5_41_loc_assign_4, i32* %W_addr_57, align 4

ST_111: tmp_50_12 [1/1] 0.00ns (grouped into LUT with out node tmp_53_12)
.preheader8.preheader:1332  %tmp_50_12 = or i32 %D_ret36_11, %C_ret35_11

ST_111: tmp_51_12 [1/1] 0.00ns (grouped into LUT with out node tmp_53_12)
.preheader8.preheader:1333  %tmp_51_12 = and i32 %tmp_50_12, %B_ret34_11

ST_111: tmp_52_12 [1/1] 0.00ns (grouped into LUT with out node tmp_53_12)
.preheader8.preheader:1334  %tmp_52_12 = and i32 %D_ret36_11, %C_ret35_11

ST_111: tmp_53_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1335  %tmp_53_12 = or i32 %tmp_51_12, %tmp_52_12

ST_111: tmp_57_12 [1/1] 1.97ns
.preheader8.preheader:1338  %tmp_57_12 = add i32 %W_addr_5_37_loc_assign_4, %tmp_56_12

ST_111: temp_3_12 [1/1] 1.97ns
.preheader8.preheader:1339  %temp_3_12 = add i32 %tmp_53_12, %tmp_57_12

ST_111: call_ret45_12 [1/1] 4.52ns
.preheader8.preheader:1340  %call_ret45_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_11, i32 %B_ret34_11, i32 %C_ret35_11, i32 %D_ret36_11, i32 %temp_3_12)

ST_111: call_ret11_12 [1/1] 0.00ns
.preheader8.preheader:1341  %call_ret11_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 0

ST_111: A_ret33_12 [1/1] 0.00ns
.preheader8.preheader:1342  %A_ret33_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 1

ST_111: B_ret34_12 [1/1] 0.00ns
.preheader8.preheader:1343  %B_ret34_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 2

ST_111: C_ret35_12 [1/1] 0.00ns
.preheader8.preheader:1344  %C_ret35_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 3

ST_111: D_ret36_12 [1/1] 0.00ns
.preheader8.preheader:1345  %D_ret36_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 4


 <State 112>: 8.46ns
ST_112: tmp_49_13 [1/1] 4.52ns
.preheader8.preheader:1346  %tmp_49_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_12)

ST_112: tmp_55_13 [1/1] 1.97ns
.preheader8.preheader:1351  %tmp_55_13 = add i32 %tmp_49_13, -1894007588

ST_112: tmp_56_13 [1/1] 1.97ns
.preheader8.preheader:1352  %tmp_56_13 = add i32 %call_ret11_12, %tmp_55_13


 <State 113>: 8.60ns
ST_113: tmp_28_41 [1/1] 0.00ns (grouped into LUT with out node tmp_30_41)
.preheader8.preheader:434  %tmp_28_41 = xor i32 %W_addr_5_34_loc_assign_4, %W_addr_5_39_loc_assign_4

ST_113: tmp_29_41 [1/1] 0.00ns (grouped into LUT with out node tmp_30_41)
.preheader8.preheader:435  %tmp_29_41 = xor i32 %tmp_28_41, %W_addr_5_28_loc_assign_4

ST_113: tmp_30_41 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:436  %tmp_30_41 = xor i32 %tmp_29_41, %W_addr_5_26_loc_assign_4

ST_113: W_addr_5_42_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:437  %W_addr_5_42_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_41)

ST_113: W_addr_58 [1/1] 0.00ns
.preheader8.preheader:438  %W_addr_58 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 58

ST_113: stg_1463 [1/1] 2.71ns
.preheader8.preheader:439  store i32 %W_addr_5_42_loc_assign_4, i32* %W_addr_58, align 8

ST_113: tmp_50_13 [1/1] 0.00ns (grouped into LUT with out node tmp_53_13)
.preheader8.preheader:1347  %tmp_50_13 = or i32 %D_ret36_12, %C_ret35_12

ST_113: tmp_51_13 [1/1] 0.00ns (grouped into LUT with out node tmp_53_13)
.preheader8.preheader:1348  %tmp_51_13 = and i32 %tmp_50_13, %B_ret34_12

ST_113: tmp_52_13 [1/1] 0.00ns (grouped into LUT with out node tmp_53_13)
.preheader8.preheader:1349  %tmp_52_13 = and i32 %D_ret36_12, %C_ret35_12

ST_113: tmp_53_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1350  %tmp_53_13 = or i32 %tmp_51_13, %tmp_52_13

ST_113: tmp_57_13 [1/1] 1.97ns
.preheader8.preheader:1353  %tmp_57_13 = add i32 %W_addr_5_38_loc_assign_4, %tmp_56_13

ST_113: temp_3_13 [1/1] 1.97ns
.preheader8.preheader:1354  %temp_3_13 = add i32 %tmp_53_13, %tmp_57_13

ST_113: call_ret45_13 [1/1] 4.52ns
.preheader8.preheader:1355  %call_ret45_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_12, i32 %B_ret34_12, i32 %C_ret35_12, i32 %D_ret36_12, i32 %temp_3_13)

ST_113: call_ret11_13 [1/1] 0.00ns
.preheader8.preheader:1356  %call_ret11_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 0

ST_113: A_ret33_13 [1/1] 0.00ns
.preheader8.preheader:1357  %A_ret33_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 1

ST_113: B_ret34_13 [1/1] 0.00ns
.preheader8.preheader:1358  %B_ret34_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 2

ST_113: C_ret35_13 [1/1] 0.00ns
.preheader8.preheader:1359  %C_ret35_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 3

ST_113: D_ret36_13 [1/1] 0.00ns
.preheader8.preheader:1360  %D_ret36_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 4


 <State 114>: 8.46ns
ST_114: tmp_49_14 [1/1] 4.52ns
.preheader8.preheader:1361  %tmp_49_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_13)

ST_114: tmp_55_14 [1/1] 1.97ns
.preheader8.preheader:1366  %tmp_55_14 = add i32 %tmp_49_14, -1894007588

ST_114: tmp_56_14 [1/1] 1.97ns
.preheader8.preheader:1367  %tmp_56_14 = add i32 %call_ret11_13, %tmp_55_14


 <State 115>: 8.60ns
ST_115: tmp_28_42 [1/1] 0.00ns (grouped into LUT with out node tmp_30_42)
.preheader8.preheader:440  %tmp_28_42 = xor i32 %W_addr_5_35_loc_assign_4, %W_addr_5_40_loc_assign_4

ST_115: tmp_29_42 [1/1] 0.00ns (grouped into LUT with out node tmp_30_42)
.preheader8.preheader:441  %tmp_29_42 = xor i32 %tmp_28_42, %W_addr_5_29_loc_assign_4

ST_115: tmp_30_42 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:442  %tmp_30_42 = xor i32 %tmp_29_42, %W_addr_5_27_loc_assign_4

ST_115: W_addr_5_43_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:443  %W_addr_5_43_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_42)

ST_115: W_addr_59 [1/1] 0.00ns
.preheader8.preheader:444  %W_addr_59 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 59

ST_115: stg_1484 [1/1] 2.71ns
.preheader8.preheader:445  store i32 %W_addr_5_43_loc_assign_4, i32* %W_addr_59, align 4

ST_115: tmp_50_14 [1/1] 0.00ns (grouped into LUT with out node tmp_53_14)
.preheader8.preheader:1362  %tmp_50_14 = or i32 %D_ret36_13, %C_ret35_13

ST_115: tmp_51_14 [1/1] 0.00ns (grouped into LUT with out node tmp_53_14)
.preheader8.preheader:1363  %tmp_51_14 = and i32 %tmp_50_14, %B_ret34_13

ST_115: tmp_52_14 [1/1] 0.00ns (grouped into LUT with out node tmp_53_14)
.preheader8.preheader:1364  %tmp_52_14 = and i32 %D_ret36_13, %C_ret35_13

ST_115: tmp_53_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1365  %tmp_53_14 = or i32 %tmp_51_14, %tmp_52_14

ST_115: tmp_57_14 [1/1] 1.97ns
.preheader8.preheader:1368  %tmp_57_14 = add i32 %W_addr_5_39_loc_assign_4, %tmp_56_14

ST_115: temp_3_14 [1/1] 1.97ns
.preheader8.preheader:1369  %temp_3_14 = add i32 %tmp_53_14, %tmp_57_14

ST_115: call_ret45_14 [1/1] 4.52ns
.preheader8.preheader:1370  %call_ret45_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_13, i32 %B_ret34_13, i32 %C_ret35_13, i32 %D_ret36_13, i32 %temp_3_14)

ST_115: call_ret11_14 [1/1] 0.00ns
.preheader8.preheader:1371  %call_ret11_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 0

ST_115: A_ret33_14 [1/1] 0.00ns
.preheader8.preheader:1372  %A_ret33_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 1

ST_115: B_ret34_14 [1/1] 0.00ns
.preheader8.preheader:1373  %B_ret34_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 2

ST_115: C_ret35_14 [1/1] 0.00ns
.preheader8.preheader:1374  %C_ret35_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 3

ST_115: D_ret36_14 [1/1] 0.00ns
.preheader8.preheader:1375  %D_ret36_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 4


 <State 116>: 8.46ns
ST_116: tmp_49_15 [1/1] 4.52ns
.preheader8.preheader:1376  %tmp_49_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_14)

ST_116: tmp_55_15 [1/1] 1.97ns
.preheader8.preheader:1381  %tmp_55_15 = add i32 %tmp_49_15, -1894007588

ST_116: tmp_56_15 [1/1] 1.97ns
.preheader8.preheader:1382  %tmp_56_15 = add i32 %call_ret11_14, %tmp_55_15


 <State 117>: 8.60ns
ST_117: tmp_28_43 [1/1] 0.00ns (grouped into LUT with out node tmp_30_43)
.preheader8.preheader:446  %tmp_28_43 = xor i32 %W_addr_5_36_loc_assign_4, %W_addr_5_41_loc_assign_4

ST_117: tmp_29_43 [1/1] 0.00ns (grouped into LUT with out node tmp_30_43)
.preheader8.preheader:447  %tmp_29_43 = xor i32 %tmp_28_43, %W_addr_5_30_loc_assign_4

ST_117: tmp_30_43 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:448  %tmp_30_43 = xor i32 %tmp_29_43, %W_addr_5_28_loc_assign_4

ST_117: W_addr_5_44_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:449  %W_addr_5_44_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_43)

ST_117: W_addr_60 [1/1] 0.00ns
.preheader8.preheader:450  %W_addr_60 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 60

ST_117: stg_1505 [1/1] 2.71ns
.preheader8.preheader:451  store i32 %W_addr_5_44_loc_assign_4, i32* %W_addr_60, align 16

ST_117: tmp_50_15 [1/1] 0.00ns (grouped into LUT with out node tmp_53_15)
.preheader8.preheader:1377  %tmp_50_15 = or i32 %D_ret36_14, %C_ret35_14

ST_117: tmp_51_15 [1/1] 0.00ns (grouped into LUT with out node tmp_53_15)
.preheader8.preheader:1378  %tmp_51_15 = and i32 %tmp_50_15, %B_ret34_14

ST_117: tmp_52_15 [1/1] 0.00ns (grouped into LUT with out node tmp_53_15)
.preheader8.preheader:1379  %tmp_52_15 = and i32 %D_ret36_14, %C_ret35_14

ST_117: tmp_53_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1380  %tmp_53_15 = or i32 %tmp_51_15, %tmp_52_15

ST_117: tmp_57_15 [1/1] 1.97ns
.preheader8.preheader:1383  %tmp_57_15 = add i32 %W_addr_5_40_loc_assign_4, %tmp_56_15

ST_117: temp_3_15 [1/1] 1.97ns
.preheader8.preheader:1384  %temp_3_15 = add i32 %tmp_53_15, %tmp_57_15

ST_117: call_ret45_15 [1/1] 4.52ns
.preheader8.preheader:1385  %call_ret45_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_14, i32 %B_ret34_14, i32 %C_ret35_14, i32 %D_ret36_14, i32 %temp_3_15)

ST_117: call_ret11_15 [1/1] 0.00ns
.preheader8.preheader:1386  %call_ret11_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 0

ST_117: A_ret33_15 [1/1] 0.00ns
.preheader8.preheader:1387  %A_ret33_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 1

ST_117: B_ret34_15 [1/1] 0.00ns
.preheader8.preheader:1388  %B_ret34_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 2

ST_117: C_ret35_15 [1/1] 0.00ns
.preheader8.preheader:1389  %C_ret35_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 3

ST_117: D_ret36_15 [1/1] 0.00ns
.preheader8.preheader:1390  %D_ret36_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 4


 <State 118>: 8.46ns
ST_118: tmp_49_16 [1/1] 4.52ns
.preheader8.preheader:1391  %tmp_49_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_15)

ST_118: tmp_55_16 [1/1] 1.97ns
.preheader8.preheader:1396  %tmp_55_16 = add i32 %tmp_49_16, -1894007588

ST_118: tmp_56_16 [1/1] 1.97ns
.preheader8.preheader:1397  %tmp_56_16 = add i32 %call_ret11_15, %tmp_55_16


 <State 119>: 8.60ns
ST_119: tmp_28_44 [1/1] 0.00ns (grouped into LUT with out node tmp_30_44)
.preheader8.preheader:452  %tmp_28_44 = xor i32 %W_addr_5_37_loc_assign_4, %W_addr_5_42_loc_assign_4

ST_119: tmp_29_44 [1/1] 0.00ns (grouped into LUT with out node tmp_30_44)
.preheader8.preheader:453  %tmp_29_44 = xor i32 %tmp_28_44, %W_addr_5_31_loc_assign_4

ST_119: tmp_30_44 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:454  %tmp_30_44 = xor i32 %tmp_29_44, %W_addr_5_29_loc_assign_4

ST_119: W_addr_5_45_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:455  %W_addr_5_45_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_44)

ST_119: W_addr_61 [1/1] 0.00ns
.preheader8.preheader:456  %W_addr_61 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 61

ST_119: stg_1526 [1/1] 2.71ns
.preheader8.preheader:457  store i32 %W_addr_5_45_loc_assign_4, i32* %W_addr_61, align 4

ST_119: tmp_50_16 [1/1] 0.00ns (grouped into LUT with out node tmp_53_16)
.preheader8.preheader:1392  %tmp_50_16 = or i32 %D_ret36_15, %C_ret35_15

ST_119: tmp_51_16 [1/1] 0.00ns (grouped into LUT with out node tmp_53_16)
.preheader8.preheader:1393  %tmp_51_16 = and i32 %tmp_50_16, %B_ret34_15

ST_119: tmp_52_16 [1/1] 0.00ns (grouped into LUT with out node tmp_53_16)
.preheader8.preheader:1394  %tmp_52_16 = and i32 %D_ret36_15, %C_ret35_15

ST_119: tmp_53_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1395  %tmp_53_16 = or i32 %tmp_51_16, %tmp_52_16

ST_119: tmp_57_16 [1/1] 1.97ns
.preheader8.preheader:1398  %tmp_57_16 = add i32 %W_addr_5_41_loc_assign_4, %tmp_56_16

ST_119: temp_3_16 [1/1] 1.97ns
.preheader8.preheader:1399  %temp_3_16 = add i32 %tmp_53_16, %tmp_57_16

ST_119: call_ret45_16 [1/1] 4.52ns
.preheader8.preheader:1400  %call_ret45_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_15, i32 %B_ret34_15, i32 %C_ret35_15, i32 %D_ret36_15, i32 %temp_3_16)

ST_119: call_ret11_16 [1/1] 0.00ns
.preheader8.preheader:1401  %call_ret11_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 0

ST_119: A_ret33_16 [1/1] 0.00ns
.preheader8.preheader:1402  %A_ret33_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 1

ST_119: B_ret34_16 [1/1] 0.00ns
.preheader8.preheader:1403  %B_ret34_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 2

ST_119: C_ret35_16 [1/1] 0.00ns
.preheader8.preheader:1404  %C_ret35_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 3

ST_119: D_ret36_16 [1/1] 0.00ns
.preheader8.preheader:1405  %D_ret36_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 4


 <State 120>: 8.46ns
ST_120: tmp_49_17 [1/1] 4.52ns
.preheader8.preheader:1406  %tmp_49_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_16)

ST_120: tmp_55_17 [1/1] 1.97ns
.preheader8.preheader:1411  %tmp_55_17 = add i32 %tmp_49_17, -1894007588

ST_120: tmp_56_17 [1/1] 1.97ns
.preheader8.preheader:1412  %tmp_56_17 = add i32 %call_ret11_16, %tmp_55_17


 <State 121>: 8.60ns
ST_121: tmp_28_45 [1/1] 0.00ns (grouped into LUT with out node tmp_30_45)
.preheader8.preheader:458  %tmp_28_45 = xor i32 %W_addr_5_38_loc_assign_4, %W_addr_5_43_loc_assign_4

ST_121: tmp_29_45 [1/1] 0.00ns (grouped into LUT with out node tmp_30_45)
.preheader8.preheader:459  %tmp_29_45 = xor i32 %tmp_28_45, %W_addr_5_32_loc_assign_4

ST_121: tmp_30_45 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:460  %tmp_30_45 = xor i32 %tmp_29_45, %W_addr_5_30_loc_assign_4

ST_121: W_addr_5_46_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:461  %W_addr_5_46_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_45)

ST_121: W_addr_62 [1/1] 0.00ns
.preheader8.preheader:462  %W_addr_62 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 62

ST_121: stg_1547 [1/1] 2.71ns
.preheader8.preheader:463  store i32 %W_addr_5_46_loc_assign_4, i32* %W_addr_62, align 8

ST_121: tmp_50_17 [1/1] 0.00ns (grouped into LUT with out node tmp_53_17)
.preheader8.preheader:1407  %tmp_50_17 = or i32 %D_ret36_16, %C_ret35_16

ST_121: tmp_51_17 [1/1] 0.00ns (grouped into LUT with out node tmp_53_17)
.preheader8.preheader:1408  %tmp_51_17 = and i32 %tmp_50_17, %B_ret34_16

ST_121: tmp_52_17 [1/1] 0.00ns (grouped into LUT with out node tmp_53_17)
.preheader8.preheader:1409  %tmp_52_17 = and i32 %D_ret36_16, %C_ret35_16

ST_121: tmp_53_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1410  %tmp_53_17 = or i32 %tmp_51_17, %tmp_52_17

ST_121: tmp_57_17 [1/1] 1.97ns
.preheader8.preheader:1413  %tmp_57_17 = add i32 %W_addr_5_42_loc_assign_4, %tmp_56_17

ST_121: temp_3_17 [1/1] 1.97ns
.preheader8.preheader:1414  %temp_3_17 = add i32 %tmp_53_17, %tmp_57_17

ST_121: call_ret45_17 [1/1] 4.52ns
.preheader8.preheader:1415  %call_ret45_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_16, i32 %B_ret34_16, i32 %C_ret35_16, i32 %D_ret36_16, i32 %temp_3_17)

ST_121: call_ret11_17 [1/1] 0.00ns
.preheader8.preheader:1416  %call_ret11_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 0

ST_121: A_ret33_17 [1/1] 0.00ns
.preheader8.preheader:1417  %A_ret33_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 1

ST_121: B_ret34_17 [1/1] 0.00ns
.preheader8.preheader:1418  %B_ret34_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 2

ST_121: C_ret35_17 [1/1] 0.00ns
.preheader8.preheader:1419  %C_ret35_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 3

ST_121: D_ret36_17 [1/1] 0.00ns
.preheader8.preheader:1420  %D_ret36_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 4


 <State 122>: 8.46ns
ST_122: tmp_49_18 [1/1] 4.52ns
.preheader8.preheader:1421  %tmp_49_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_17)

ST_122: tmp_55_18 [1/1] 1.97ns
.preheader8.preheader:1426  %tmp_55_18 = add i32 %tmp_49_18, -1894007588

ST_122: tmp_56_18 [1/1] 1.97ns
.preheader8.preheader:1427  %tmp_56_18 = add i32 %call_ret11_17, %tmp_55_18


 <State 123>: 8.60ns
ST_123: tmp_28_46 [1/1] 0.00ns (grouped into LUT with out node tmp_30_46)
.preheader8.preheader:464  %tmp_28_46 = xor i32 %W_addr_5_39_loc_assign_4, %W_addr_5_44_loc_assign_4

ST_123: tmp_29_46 [1/1] 0.00ns (grouped into LUT with out node tmp_30_46)
.preheader8.preheader:465  %tmp_29_46 = xor i32 %tmp_28_46, %W_addr_5_33_loc_assign_4

ST_123: tmp_30_46 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:466  %tmp_30_46 = xor i32 %tmp_29_46, %W_addr_5_31_loc_assign_4

ST_123: W_addr_5_47_loc_assign_4 [1/1] 4.52ns
.preheader8.preheader:467  %W_addr_5_47_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_46)

ST_123: W_addr_63 [1/1] 0.00ns
.preheader8.preheader:468  %W_addr_63 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 63

ST_123: stg_1568 [1/1] 2.71ns
.preheader8.preheader:469  store i32 %W_addr_5_47_loc_assign_4, i32* %W_addr_63, align 4

ST_123: tmp_50_18 [1/1] 0.00ns (grouped into LUT with out node tmp_53_18)
.preheader8.preheader:1422  %tmp_50_18 = or i32 %D_ret36_17, %C_ret35_17

ST_123: tmp_51_18 [1/1] 0.00ns (grouped into LUT with out node tmp_53_18)
.preheader8.preheader:1423  %tmp_51_18 = and i32 %tmp_50_18, %B_ret34_17

ST_123: tmp_52_18 [1/1] 0.00ns (grouped into LUT with out node tmp_53_18)
.preheader8.preheader:1424  %tmp_52_18 = and i32 %D_ret36_17, %C_ret35_17

ST_123: tmp_53_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1425  %tmp_53_18 = or i32 %tmp_51_18, %tmp_52_18

ST_123: tmp_57_18 [1/1] 1.97ns
.preheader8.preheader:1428  %tmp_57_18 = add i32 %W_addr_5_43_loc_assign_4, %tmp_56_18

ST_123: temp_3_18 [1/1] 1.97ns
.preheader8.preheader:1429  %temp_3_18 = add i32 %tmp_53_18, %tmp_57_18

ST_123: call_ret45_18 [1/1] 4.52ns
.preheader8.preheader:1430  %call_ret45_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_17, i32 %B_ret34_17, i32 %C_ret35_17, i32 %D_ret36_17, i32 %temp_3_18)

ST_123: call_ret11_18 [1/1] 0.00ns
.preheader8.preheader:1431  %call_ret11_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 0

ST_123: A_ret33_18 [1/1] 0.00ns
.preheader8.preheader:1432  %A_ret33_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 1

ST_123: B_ret34_18 [1/1] 0.00ns
.preheader8.preheader:1433  %B_ret34_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 2

ST_123: C_ret35_18 [1/1] 0.00ns
.preheader8.preheader:1434  %C_ret35_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 3

ST_123: D_ret36_18 [1/1] 0.00ns
.preheader8.preheader:1435  %D_ret36_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 4


 <State 124>: 8.46ns
ST_124: tmp_26 [1/1] 4.52ns
.preheader8.preheader:1436  %tmp_26 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_18)

ST_124: tmp_27 [1/1] 0.00ns (grouped into LUT with out node tmp_28)
.preheader8.preheader:1437  %tmp_27 = xor i32 %C_ret35_18, %B_ret34_18

ST_124: tmp_28 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1438  %tmp_28 = xor i32 %tmp_27, %D_ret36_18

ST_124: tmp_29 [1/1] 1.97ns
.preheader8.preheader:1439  %tmp_29 = add i32 %tmp_26, -899497514

ST_124: tmp_30 [1/1] 1.97ns
.preheader8.preheader:1440  %tmp_30 = add i32 %tmp_28, %tmp_29


 <State 125>: 8.60ns
ST_125: tmp_28_47 [1/1] 0.00ns (grouped into LUT with out node tmp_30_47)
.preheader8.preheader:470  %tmp_28_47 = xor i32 %W_addr_5_40_loc_assign_4, %W_addr_5_45_loc_assign_4

ST_125: tmp_29_47 [1/1] 0.00ns (grouped into LUT with out node tmp_30_47)
.preheader8.preheader:471  %tmp_29_47 = xor i32 %tmp_28_47, %W_addr_5_34_loc_assign_4

ST_125: tmp_30_47 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:472  %tmp_30_47 = xor i32 %tmp_29_47, %W_addr_5_32_loc_assign_4

ST_125: W_addr_5_48_loc_assign_3 [1/1] 4.52ns
.preheader8.preheader:473  %W_addr_5_48_loc_assign_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_47)

ST_125: W_addr_64 [1/1] 0.00ns
.preheader8.preheader:474  %W_addr_64 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 64

ST_125: stg_1591 [1/1] 2.71ns
.preheader8.preheader:475  store i32 %W_addr_5_48_loc_assign_3, i32* %W_addr_64, align 16

ST_125: tmp_31 [1/1] 1.97ns
.preheader8.preheader:1441  %tmp_31 = add i32 %call_ret11_18, %tmp_30

ST_125: temp_4 [1/1] 1.97ns
.preheader8.preheader:1442  %temp_4 = add i32 %W_addr_5_44_loc_assign_4, %tmp_31

ST_125: call_ret7 [1/1] 4.52ns
.preheader8.preheader:1443  %call_ret7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_18, i32 %B_ret34_18, i32 %C_ret35_18, i32 %D_ret36_18, i32 %temp_4)

ST_125: call_ret [1/1] 0.00ns
.preheader8.preheader:1444  %call_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 0

ST_125: A_ret3 [1/1] 0.00ns
.preheader8.preheader:1445  %A_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 1

ST_125: B_ret3 [1/1] 0.00ns
.preheader8.preheader:1446  %B_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 2

ST_125: C_ret3 [1/1] 0.00ns
.preheader8.preheader:1447  %C_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 3

ST_125: D_ret3 [1/1] 0.00ns
.preheader8.preheader:1448  %D_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 4


 <State 126>: 8.46ns
ST_126: tmp_63_1 [1/1] 4.52ns
.preheader8.preheader:1449  %tmp_63_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret3)

ST_126: tmp_64_1 [1/1] 0.00ns (grouped into LUT with out node tmp_65_1)
.preheader8.preheader:1450  %tmp_64_1 = xor i32 %C_ret3, %B_ret3

ST_126: tmp_65_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1451  %tmp_65_1 = xor i32 %tmp_64_1, %D_ret3

ST_126: tmp_67_1 [1/1] 1.97ns
.preheader8.preheader:1452  %tmp_67_1 = add i32 %tmp_63_1, -899497514

ST_126: tmp_68_1 [1/1] 1.97ns
.preheader8.preheader:1453  %tmp_68_1 = add i32 %tmp_65_1, %tmp_67_1


 <State 127>: 8.60ns
ST_127: tmp_28_48 [1/1] 0.00ns (grouped into LUT with out node tmp_30_48)
.preheader8.preheader:476  %tmp_28_48 = xor i32 %W_addr_5_41_loc_assign_4, %W_addr_5_46_loc_assign_4

ST_127: tmp_29_48 [1/1] 0.00ns (grouped into LUT with out node tmp_30_48)
.preheader8.preheader:477  %tmp_29_48 = xor i32 %tmp_28_48, %W_addr_5_35_loc_assign_4

ST_127: tmp_30_48 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:478  %tmp_30_48 = xor i32 %tmp_29_48, %W_addr_5_33_loc_assign_4

ST_127: W_addr_5_49_loc_assign_3 [1/1] 4.52ns
.preheader8.preheader:479  %W_addr_5_49_loc_assign_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_48)

ST_127: W_addr_65 [1/1] 0.00ns
.preheader8.preheader:480  %W_addr_65 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 65

ST_127: stg_1610 [1/1] 2.71ns
.preheader8.preheader:481  store i32 %W_addr_5_49_loc_assign_3, i32* %W_addr_65, align 4

ST_127: tmp_69_1 [1/1] 1.97ns
.preheader8.preheader:1454  %tmp_69_1 = add i32 %call_ret, %tmp_68_1

ST_127: temp_4_1 [1/1] 1.97ns
.preheader8.preheader:1455  %temp_4_1 = add i32 %W_addr_5_45_loc_assign_4, %tmp_69_1

ST_127: call_ret44_1 [1/1] 4.52ns
.preheader8.preheader:1456  %call_ret44_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret3, i32 %B_ret3, i32 %C_ret3, i32 %D_ret3, i32 %temp_4_1)

ST_127: call_ret_1 [1/1] 0.00ns
.preheader8.preheader:1457  %call_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 0

ST_127: A_ret39_1 [1/1] 0.00ns
.preheader8.preheader:1458  %A_ret39_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 1

ST_127: B_ret40_1 [1/1] 0.00ns
.preheader8.preheader:1459  %B_ret40_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 2

ST_127: C_ret41_1 [1/1] 0.00ns
.preheader8.preheader:1460  %C_ret41_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 3

ST_127: D_ret42_1 [1/1] 0.00ns
.preheader8.preheader:1461  %D_ret42_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 4


 <State 128>: 8.46ns
ST_128: tmp_63_2 [1/1] 4.52ns
.preheader8.preheader:1462  %tmp_63_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_1)

ST_128: tmp_64_2 [1/1] 0.00ns (grouped into LUT with out node tmp_65_2)
.preheader8.preheader:1463  %tmp_64_2 = xor i32 %C_ret41_1, %B_ret40_1

ST_128: tmp_65_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1464  %tmp_65_2 = xor i32 %tmp_64_2, %D_ret42_1

ST_128: tmp_67_2 [1/1] 1.97ns
.preheader8.preheader:1465  %tmp_67_2 = add i32 %tmp_63_2, -899497514

ST_128: tmp_68_2 [1/1] 1.97ns
.preheader8.preheader:1466  %tmp_68_2 = add i32 %tmp_65_2, %tmp_67_2


 <State 129>: 8.60ns
ST_129: tmp_28_49 [1/1] 0.00ns (grouped into LUT with out node tmp_30_49)
.preheader8.preheader:482  %tmp_28_49 = xor i32 %W_addr_5_42_loc_assign_4, %W_addr_5_47_loc_assign_4

ST_129: tmp_29_49 [1/1] 0.00ns (grouped into LUT with out node tmp_30_49)
.preheader8.preheader:483  %tmp_29_49 = xor i32 %tmp_28_49, %W_addr_5_36_loc_assign_4

ST_129: tmp_30_49 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:484  %tmp_30_49 = xor i32 %tmp_29_49, %W_addr_5_34_loc_assign_4

ST_129: W_addr_5_50_loc_assign_2 [1/1] 4.52ns
.preheader8.preheader:485  %W_addr_5_50_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_49)

ST_129: W_addr_66 [1/1] 0.00ns
.preheader8.preheader:486  %W_addr_66 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 66

ST_129: stg_1629 [1/1] 2.71ns
.preheader8.preheader:487  store i32 %W_addr_5_50_loc_assign_2, i32* %W_addr_66, align 8

ST_129: tmp_69_2 [1/1] 1.97ns
.preheader8.preheader:1467  %tmp_69_2 = add i32 %call_ret_1, %tmp_68_2

ST_129: temp_4_2 [1/1] 1.97ns
.preheader8.preheader:1468  %temp_4_2 = add i32 %W_addr_5_46_loc_assign_4, %tmp_69_2

ST_129: call_ret44_2 [1/1] 4.52ns
.preheader8.preheader:1469  %call_ret44_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_1, i32 %B_ret40_1, i32 %C_ret41_1, i32 %D_ret42_1, i32 %temp_4_2)

ST_129: call_ret_2 [1/1] 0.00ns
.preheader8.preheader:1470  %call_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 0

ST_129: A_ret39_2 [1/1] 0.00ns
.preheader8.preheader:1471  %A_ret39_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 1

ST_129: B_ret40_2 [1/1] 0.00ns
.preheader8.preheader:1472  %B_ret40_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 2

ST_129: C_ret41_2 [1/1] 0.00ns
.preheader8.preheader:1473  %C_ret41_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 3

ST_129: D_ret42_2 [1/1] 0.00ns
.preheader8.preheader:1474  %D_ret42_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 4


 <State 130>: 8.46ns
ST_130: tmp_63_3 [1/1] 4.52ns
.preheader8.preheader:1475  %tmp_63_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_2)

ST_130: tmp_64_3 [1/1] 0.00ns (grouped into LUT with out node tmp_65_3)
.preheader8.preheader:1476  %tmp_64_3 = xor i32 %C_ret41_2, %B_ret40_2

ST_130: tmp_65_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1477  %tmp_65_3 = xor i32 %tmp_64_3, %D_ret42_2

ST_130: tmp_67_3 [1/1] 1.97ns
.preheader8.preheader:1478  %tmp_67_3 = add i32 %tmp_63_3, -899497514

ST_130: tmp_68_3 [1/1] 1.97ns
.preheader8.preheader:1479  %tmp_68_3 = add i32 %tmp_65_3, %tmp_67_3


 <State 131>: 8.60ns
ST_131: tmp_28_50 [1/1] 0.00ns (grouped into LUT with out node tmp_30_50)
.preheader8.preheader:488  %tmp_28_50 = xor i32 %W_addr_5_43_loc_assign_4, %W_addr_5_48_loc_assign_3

ST_131: tmp_29_50 [1/1] 0.00ns (grouped into LUT with out node tmp_30_50)
.preheader8.preheader:489  %tmp_29_50 = xor i32 %tmp_28_50, %W_addr_5_37_loc_assign_4

ST_131: tmp_30_50 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:490  %tmp_30_50 = xor i32 %tmp_29_50, %W_addr_5_35_loc_assign_4

ST_131: W_addr_5_51_loc_assign_2 [1/1] 4.52ns
.preheader8.preheader:491  %W_addr_5_51_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_50)

ST_131: W_addr_67 [1/1] 0.00ns
.preheader8.preheader:492  %W_addr_67 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 67

ST_131: stg_1648 [1/1] 2.71ns
.preheader8.preheader:493  store i32 %W_addr_5_51_loc_assign_2, i32* %W_addr_67, align 4

ST_131: tmp_69_3 [1/1] 1.97ns
.preheader8.preheader:1480  %tmp_69_3 = add i32 %call_ret_2, %tmp_68_3

ST_131: temp_4_3 [1/1] 1.97ns
.preheader8.preheader:1481  %temp_4_3 = add i32 %W_addr_5_47_loc_assign_4, %tmp_69_3

ST_131: call_ret44_3 [1/1] 4.52ns
.preheader8.preheader:1482  %call_ret44_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_2, i32 %B_ret40_2, i32 %C_ret41_2, i32 %D_ret42_2, i32 %temp_4_3)

ST_131: call_ret_3 [1/1] 0.00ns
.preheader8.preheader:1483  %call_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 0

ST_131: A_ret39_3 [1/1] 0.00ns
.preheader8.preheader:1484  %A_ret39_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 1

ST_131: B_ret40_3 [1/1] 0.00ns
.preheader8.preheader:1485  %B_ret40_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 2

ST_131: C_ret41_3 [1/1] 0.00ns
.preheader8.preheader:1486  %C_ret41_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 3

ST_131: D_ret42_3 [1/1] 0.00ns
.preheader8.preheader:1487  %D_ret42_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 4


 <State 132>: 8.46ns
ST_132: tmp_63_4 [1/1] 4.52ns
.preheader8.preheader:1488  %tmp_63_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_3)

ST_132: tmp_64_4 [1/1] 0.00ns (grouped into LUT with out node tmp_65_4)
.preheader8.preheader:1489  %tmp_64_4 = xor i32 %C_ret41_3, %B_ret40_3

ST_132: tmp_65_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1490  %tmp_65_4 = xor i32 %tmp_64_4, %D_ret42_3

ST_132: tmp_67_4 [1/1] 1.97ns
.preheader8.preheader:1491  %tmp_67_4 = add i32 %tmp_63_4, -899497514

ST_132: tmp_68_4 [1/1] 1.97ns
.preheader8.preheader:1492  %tmp_68_4 = add i32 %tmp_65_4, %tmp_67_4


 <State 133>: 8.60ns
ST_133: tmp_28_51 [1/1] 0.00ns (grouped into LUT with out node tmp_30_51)
.preheader8.preheader:494  %tmp_28_51 = xor i32 %W_addr_5_44_loc_assign_4, %W_addr_5_49_loc_assign_3

ST_133: tmp_29_51 [1/1] 0.00ns (grouped into LUT with out node tmp_30_51)
.preheader8.preheader:495  %tmp_29_51 = xor i32 %tmp_28_51, %W_addr_5_38_loc_assign_4

ST_133: tmp_30_51 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:496  %tmp_30_51 = xor i32 %tmp_29_51, %W_addr_5_36_loc_assign_4

ST_133: W_addr_5_52_loc_assign_2 [1/1] 4.52ns
.preheader8.preheader:497  %W_addr_5_52_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_51)

ST_133: W_addr_68 [1/1] 0.00ns
.preheader8.preheader:498  %W_addr_68 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 68

ST_133: stg_1667 [1/1] 2.71ns
.preheader8.preheader:499  store i32 %W_addr_5_52_loc_assign_2, i32* %W_addr_68, align 16

ST_133: tmp_69_4 [1/1] 1.97ns
.preheader8.preheader:1493  %tmp_69_4 = add i32 %call_ret_3, %tmp_68_4

ST_133: temp_4_4 [1/1] 1.97ns
.preheader8.preheader:1494  %temp_4_4 = add i32 %W_addr_5_48_loc_assign_3, %tmp_69_4

ST_133: call_ret44_4 [1/1] 4.52ns
.preheader8.preheader:1495  %call_ret44_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_3, i32 %B_ret40_3, i32 %C_ret41_3, i32 %D_ret42_3, i32 %temp_4_4)

ST_133: call_ret_4 [1/1] 0.00ns
.preheader8.preheader:1496  %call_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 0

ST_133: A_ret39_4 [1/1] 0.00ns
.preheader8.preheader:1497  %A_ret39_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 1

ST_133: B_ret40_4 [1/1] 0.00ns
.preheader8.preheader:1498  %B_ret40_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 2

ST_133: C_ret41_4 [1/1] 0.00ns
.preheader8.preheader:1499  %C_ret41_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 3

ST_133: D_ret42_4 [1/1] 0.00ns
.preheader8.preheader:1500  %D_ret42_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 4


 <State 134>: 8.46ns
ST_134: tmp_63_5 [1/1] 4.52ns
.preheader8.preheader:1501  %tmp_63_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_4)

ST_134: tmp_64_5 [1/1] 0.00ns (grouped into LUT with out node tmp_65_5)
.preheader8.preheader:1502  %tmp_64_5 = xor i32 %C_ret41_4, %B_ret40_4

ST_134: tmp_65_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1503  %tmp_65_5 = xor i32 %tmp_64_5, %D_ret42_4

ST_134: tmp_67_5 [1/1] 1.97ns
.preheader8.preheader:1504  %tmp_67_5 = add i32 %tmp_63_5, -899497514

ST_134: tmp_68_5 [1/1] 1.97ns
.preheader8.preheader:1505  %tmp_68_5 = add i32 %tmp_65_5, %tmp_67_5


 <State 135>: 8.60ns
ST_135: tmp_28_52 [1/1] 0.00ns (grouped into LUT with out node tmp_30_52)
.preheader8.preheader:500  %tmp_28_52 = xor i32 %W_addr_5_45_loc_assign_4, %W_addr_5_50_loc_assign_2

ST_135: tmp_29_52 [1/1] 0.00ns (grouped into LUT with out node tmp_30_52)
.preheader8.preheader:501  %tmp_29_52 = xor i32 %tmp_28_52, %W_addr_5_39_loc_assign_4

ST_135: tmp_30_52 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:502  %tmp_30_52 = xor i32 %tmp_29_52, %W_addr_5_37_loc_assign_4

ST_135: W_addr_5_53_loc_assign_2 [1/1] 4.52ns
.preheader8.preheader:503  %W_addr_5_53_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_52)

ST_135: W_addr_69 [1/1] 0.00ns
.preheader8.preheader:504  %W_addr_69 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 69

ST_135: stg_1686 [1/1] 2.71ns
.preheader8.preheader:505  store i32 %W_addr_5_53_loc_assign_2, i32* %W_addr_69, align 4

ST_135: tmp_69_5 [1/1] 1.97ns
.preheader8.preheader:1506  %tmp_69_5 = add i32 %call_ret_4, %tmp_68_5

ST_135: temp_4_5 [1/1] 1.97ns
.preheader8.preheader:1507  %temp_4_5 = add i32 %W_addr_5_49_loc_assign_3, %tmp_69_5

ST_135: call_ret44_5 [1/1] 4.52ns
.preheader8.preheader:1508  %call_ret44_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_4, i32 %B_ret40_4, i32 %C_ret41_4, i32 %D_ret42_4, i32 %temp_4_5)

ST_135: call_ret_5 [1/1] 0.00ns
.preheader8.preheader:1509  %call_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 0

ST_135: A_ret39_5 [1/1] 0.00ns
.preheader8.preheader:1510  %A_ret39_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 1

ST_135: B_ret40_5 [1/1] 0.00ns
.preheader8.preheader:1511  %B_ret40_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 2

ST_135: C_ret41_5 [1/1] 0.00ns
.preheader8.preheader:1512  %C_ret41_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 3

ST_135: D_ret42_5 [1/1] 0.00ns
.preheader8.preheader:1513  %D_ret42_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 4


 <State 136>: 8.46ns
ST_136: tmp_63_6 [1/1] 4.52ns
.preheader8.preheader:1514  %tmp_63_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_5)

ST_136: tmp_64_6 [1/1] 0.00ns (grouped into LUT with out node tmp_65_6)
.preheader8.preheader:1515  %tmp_64_6 = xor i32 %C_ret41_5, %B_ret40_5

ST_136: tmp_65_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1516  %tmp_65_6 = xor i32 %tmp_64_6, %D_ret42_5

ST_136: tmp_67_6 [1/1] 1.97ns
.preheader8.preheader:1517  %tmp_67_6 = add i32 %tmp_63_6, -899497514

ST_136: tmp_68_6 [1/1] 1.97ns
.preheader8.preheader:1518  %tmp_68_6 = add i32 %tmp_65_6, %tmp_67_6


 <State 137>: 8.60ns
ST_137: tmp_28_53 [1/1] 0.00ns (grouped into LUT with out node tmp_30_53)
.preheader8.preheader:506  %tmp_28_53 = xor i32 %W_addr_5_46_loc_assign_4, %W_addr_5_51_loc_assign_2

ST_137: tmp_29_53 [1/1] 0.00ns (grouped into LUT with out node tmp_30_53)
.preheader8.preheader:507  %tmp_29_53 = xor i32 %tmp_28_53, %W_addr_5_40_loc_assign_4

ST_137: tmp_30_53 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:508  %tmp_30_53 = xor i32 %tmp_29_53, %W_addr_5_38_loc_assign_4

ST_137: W_addr_5_54_loc_assign_2 [1/1] 4.52ns
.preheader8.preheader:509  %W_addr_5_54_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_53)

ST_137: W_addr_70 [1/1] 0.00ns
.preheader8.preheader:510  %W_addr_70 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 70

ST_137: stg_1705 [1/1] 2.71ns
.preheader8.preheader:511  store i32 %W_addr_5_54_loc_assign_2, i32* %W_addr_70, align 8

ST_137: tmp_69_6 [1/1] 1.97ns
.preheader8.preheader:1519  %tmp_69_6 = add i32 %call_ret_5, %tmp_68_6

ST_137: temp_4_6 [1/1] 1.97ns
.preheader8.preheader:1520  %temp_4_6 = add i32 %W_addr_5_50_loc_assign_2, %tmp_69_6

ST_137: call_ret44_6 [1/1] 4.52ns
.preheader8.preheader:1521  %call_ret44_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_5, i32 %B_ret40_5, i32 %C_ret41_5, i32 %D_ret42_5, i32 %temp_4_6)

ST_137: call_ret_6 [1/1] 0.00ns
.preheader8.preheader:1522  %call_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 0

ST_137: A_ret39_6 [1/1] 0.00ns
.preheader8.preheader:1523  %A_ret39_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 1

ST_137: B_ret40_6 [1/1] 0.00ns
.preheader8.preheader:1524  %B_ret40_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 2

ST_137: C_ret41_6 [1/1] 0.00ns
.preheader8.preheader:1525  %C_ret41_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 3

ST_137: D_ret42_6 [1/1] 0.00ns
.preheader8.preheader:1526  %D_ret42_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 4


 <State 138>: 8.46ns
ST_138: tmp_63_7 [1/1] 4.52ns
.preheader8.preheader:1527  %tmp_63_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_6)

ST_138: tmp_64_7 [1/1] 0.00ns (grouped into LUT with out node tmp_65_7)
.preheader8.preheader:1528  %tmp_64_7 = xor i32 %C_ret41_6, %B_ret40_6

ST_138: tmp_65_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1529  %tmp_65_7 = xor i32 %tmp_64_7, %D_ret42_6

ST_138: tmp_67_7 [1/1] 1.97ns
.preheader8.preheader:1530  %tmp_67_7 = add i32 %tmp_63_7, -899497514

ST_138: tmp_68_7 [1/1] 1.97ns
.preheader8.preheader:1531  %tmp_68_7 = add i32 %tmp_65_7, %tmp_67_7


 <State 139>: 8.60ns
ST_139: tmp_28_54 [1/1] 0.00ns (grouped into LUT with out node tmp_30_54)
.preheader8.preheader:512  %tmp_28_54 = xor i32 %W_addr_5_47_loc_assign_4, %W_addr_5_52_loc_assign_2

ST_139: tmp_29_54 [1/1] 0.00ns (grouped into LUT with out node tmp_30_54)
.preheader8.preheader:513  %tmp_29_54 = xor i32 %tmp_28_54, %W_addr_5_41_loc_assign_4

ST_139: tmp_30_54 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:514  %tmp_30_54 = xor i32 %tmp_29_54, %W_addr_5_39_loc_assign_4

ST_139: W_addr_5_55_loc_assign_2 [1/1] 4.52ns
.preheader8.preheader:515  %W_addr_5_55_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_54)

ST_139: W_addr_71 [1/1] 0.00ns
.preheader8.preheader:516  %W_addr_71 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 71

ST_139: stg_1724 [1/1] 2.71ns
.preheader8.preheader:517  store i32 %W_addr_5_55_loc_assign_2, i32* %W_addr_71, align 4

ST_139: tmp_28_55 [1/1] 0.00ns (grouped into LUT with out node tmp_30_55)
.preheader8.preheader:518  %tmp_28_55 = xor i32 %W_addr_5_48_loc_assign_3, %W_addr_5_53_loc_assign_2

ST_139: tmp_29_55 [1/1] 0.00ns (grouped into LUT with out node tmp_30_55)
.preheader8.preheader:519  %tmp_29_55 = xor i32 %tmp_28_55, %W_addr_5_42_loc_assign_4

ST_139: tmp_30_55 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:520  %tmp_30_55 = xor i32 %tmp_29_55, %W_addr_5_40_loc_assign_4

ST_139: tmp_28_57 [1/1] 0.00ns (grouped into LUT with out node tmp_30_57)
.preheader8.preheader:530  %tmp_28_57 = xor i32 %W_addr_5_50_loc_assign_2, %W_addr_5_55_loc_assign_2

ST_139: tmp_29_57 [1/1] 0.00ns (grouped into LUT with out node tmp_30_57)
.preheader8.preheader:531  %tmp_29_57 = xor i32 %tmp_28_57, %W_addr_5_44_loc_assign_4

ST_139: tmp_30_57 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:532  %tmp_30_57 = xor i32 %tmp_29_57, %W_addr_5_42_loc_assign_4

ST_139: tmp_69_7 [1/1] 1.97ns
.preheader8.preheader:1532  %tmp_69_7 = add i32 %call_ret_6, %tmp_68_7

ST_139: temp_4_7 [1/1] 1.97ns
.preheader8.preheader:1533  %temp_4_7 = add i32 %W_addr_5_51_loc_assign_2, %tmp_69_7

ST_139: call_ret44_7 [1/1] 4.52ns
.preheader8.preheader:1534  %call_ret44_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_6, i32 %B_ret40_6, i32 %C_ret41_6, i32 %D_ret42_6, i32 %temp_4_7)

ST_139: call_ret_7 [1/1] 0.00ns
.preheader8.preheader:1535  %call_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 0

ST_139: A_ret39_7 [1/1] 0.00ns
.preheader8.preheader:1536  %A_ret39_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 1

ST_139: B_ret40_7 [1/1] 0.00ns
.preheader8.preheader:1537  %B_ret40_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 2

ST_139: C_ret41_7 [1/1] 0.00ns
.preheader8.preheader:1538  %C_ret41_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 3

ST_139: D_ret42_7 [1/1] 0.00ns
.preheader8.preheader:1539  %D_ret42_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 4


 <State 140>: 8.46ns
ST_140: tmp_63_8 [1/1] 4.52ns
.preheader8.preheader:1540  %tmp_63_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_7)

ST_140: tmp_64_8 [1/1] 0.00ns (grouped into LUT with out node tmp_65_8)
.preheader8.preheader:1541  %tmp_64_8 = xor i32 %C_ret41_7, %B_ret40_7

ST_140: tmp_65_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1542  %tmp_65_8 = xor i32 %tmp_64_8, %D_ret42_7

ST_140: tmp_67_8 [1/1] 1.97ns
.preheader8.preheader:1543  %tmp_67_8 = add i32 %tmp_63_8, -899497514

ST_140: tmp_68_8 [1/1] 1.97ns
.preheader8.preheader:1544  %tmp_68_8 = add i32 %tmp_65_8, %tmp_67_8


 <State 141>: 8.46ns
ST_141: W_addr_5_56_loc_assign_1 [1/1] 4.52ns
.preheader8.preheader:521  %W_addr_5_56_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_55)

ST_141: W_addr_72 [1/1] 0.00ns
.preheader8.preheader:522  %W_addr_72 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 72

ST_141: stg_1746 [1/1] 2.71ns
.preheader8.preheader:523  store i32 %W_addr_5_56_loc_assign_1, i32* %W_addr_72, align 16

ST_141: tmp_28_56 [1/1] 0.00ns (grouped into LUT with out node tmp_30_56)
.preheader8.preheader:524  %tmp_28_56 = xor i32 %W_addr_5_49_loc_assign_3, %W_addr_5_54_loc_assign_2

ST_141: tmp_29_56 [1/1] 0.00ns (grouped into LUT with out node tmp_30_56)
.preheader8.preheader:525  %tmp_29_56 = xor i32 %tmp_28_56, %W_addr_5_43_loc_assign_4

ST_141: tmp_30_56 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:526  %tmp_30_56 = xor i32 %tmp_29_56, %W_addr_5_41_loc_assign_4

ST_141: tmp_28_58 [1/1] 0.00ns (grouped into LUT with out node tmp_30_58)
.preheader8.preheader:536  %tmp_28_58 = xor i32 %W_addr_5_51_loc_assign_2, %W_addr_5_56_loc_assign_1

ST_141: tmp_29_58 [1/1] 0.00ns (grouped into LUT with out node tmp_30_58)
.preheader8.preheader:537  %tmp_29_58 = xor i32 %tmp_28_58, %W_addr_5_45_loc_assign_4

ST_141: tmp_30_58 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:538  %tmp_30_58 = xor i32 %tmp_29_58, %W_addr_5_43_loc_assign_4

ST_141: tmp_69_8 [1/1] 1.97ns
.preheader8.preheader:1545  %tmp_69_8 = add i32 %call_ret_7, %tmp_68_8

ST_141: temp_4_8 [1/1] 1.97ns
.preheader8.preheader:1546  %temp_4_8 = add i32 %W_addr_5_52_loc_assign_2, %tmp_69_8

ST_141: call_ret44_8 [1/1] 4.52ns
.preheader8.preheader:1547  %call_ret44_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_7, i32 %B_ret40_7, i32 %C_ret41_7, i32 %D_ret42_7, i32 %temp_4_8)

ST_141: call_ret_8 [1/1] 0.00ns
.preheader8.preheader:1548  %call_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 0

ST_141: A_ret39_8 [1/1] 0.00ns
.preheader8.preheader:1549  %A_ret39_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 1

ST_141: B_ret40_8 [1/1] 0.00ns
.preheader8.preheader:1550  %B_ret40_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 2

ST_141: C_ret41_8 [1/1] 0.00ns
.preheader8.preheader:1551  %C_ret41_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 3

ST_141: D_ret42_8 [1/1] 0.00ns
.preheader8.preheader:1552  %D_ret42_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 4


 <State 142>: 8.46ns
ST_142: tmp_63_9 [1/1] 4.52ns
.preheader8.preheader:1553  %tmp_63_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_8)

ST_142: tmp_64_9 [1/1] 0.00ns (grouped into LUT with out node tmp_65_9)
.preheader8.preheader:1554  %tmp_64_9 = xor i32 %C_ret41_8, %B_ret40_8

ST_142: tmp_65_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1555  %tmp_65_9 = xor i32 %tmp_64_9, %D_ret42_8

ST_142: tmp_67_9 [1/1] 1.97ns
.preheader8.preheader:1556  %tmp_67_9 = add i32 %tmp_63_9, -899497514

ST_142: tmp_68_9 [1/1] 1.97ns
.preheader8.preheader:1557  %tmp_68_9 = add i32 %tmp_65_9, %tmp_67_9


 <State 143>: 8.46ns
ST_143: W_addr_5_57_loc_assign_1 [1/1] 4.52ns
.preheader8.preheader:527  %W_addr_5_57_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_56)

ST_143: W_addr_73 [1/1] 0.00ns
.preheader8.preheader:528  %W_addr_73 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 73

ST_143: stg_1768 [1/1] 2.71ns
.preheader8.preheader:529  store i32 %W_addr_5_57_loc_assign_1, i32* %W_addr_73, align 4

ST_143: tmp_28_59 [1/1] 0.00ns (grouped into LUT with out node tmp_30_59)
.preheader8.preheader:542  %tmp_28_59 = xor i32 %W_addr_5_52_loc_assign_2, %W_addr_5_57_loc_assign_1

ST_143: tmp_29_59 [1/1] 0.00ns (grouped into LUT with out node tmp_30_59)
.preheader8.preheader:543  %tmp_29_59 = xor i32 %tmp_28_59, %W_addr_5_46_loc_assign_4

ST_143: tmp_30_59 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:544  %tmp_30_59 = xor i32 %tmp_29_59, %W_addr_5_44_loc_assign_4

ST_143: tmp_69_9 [1/1] 1.97ns
.preheader8.preheader:1558  %tmp_69_9 = add i32 %call_ret_8, %tmp_68_9

ST_143: temp_4_9 [1/1] 1.97ns
.preheader8.preheader:1559  %temp_4_9 = add i32 %W_addr_5_53_loc_assign_2, %tmp_69_9

ST_143: call_ret44_9 [1/1] 4.52ns
.preheader8.preheader:1560  %call_ret44_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_8, i32 %B_ret40_8, i32 %C_ret41_8, i32 %D_ret42_8, i32 %temp_4_9)

ST_143: call_ret_9 [1/1] 0.00ns
.preheader8.preheader:1561  %call_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 0

ST_143: A_ret39_9 [1/1] 0.00ns
.preheader8.preheader:1562  %A_ret39_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 1

ST_143: B_ret40_9 [1/1] 0.00ns
.preheader8.preheader:1563  %B_ret40_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 2

ST_143: C_ret41_9 [1/1] 0.00ns
.preheader8.preheader:1564  %C_ret41_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 3

ST_143: D_ret42_9 [1/1] 0.00ns
.preheader8.preheader:1565  %D_ret42_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 4


 <State 144>: 8.46ns
ST_144: tmp_63_s [1/1] 4.52ns
.preheader8.preheader:1566  %tmp_63_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_9)

ST_144: tmp_64_s [1/1] 0.00ns (grouped into LUT with out node tmp_65_s)
.preheader8.preheader:1567  %tmp_64_s = xor i32 %C_ret41_9, %B_ret40_9

ST_144: tmp_65_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1568  %tmp_65_s = xor i32 %tmp_64_s, %D_ret42_9

ST_144: tmp_67_s [1/1] 1.97ns
.preheader8.preheader:1569  %tmp_67_s = add i32 %tmp_63_s, -899497514

ST_144: tmp_68_s [1/1] 1.97ns
.preheader8.preheader:1570  %tmp_68_s = add i32 %tmp_65_s, %tmp_67_s


 <State 145>: 8.46ns
ST_145: W_addr_5_58_loc_assign_1 [1/1] 4.52ns
.preheader8.preheader:533  %W_addr_5_58_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_57)

ST_145: W_addr_74 [1/1] 0.00ns
.preheader8.preheader:534  %W_addr_74 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 74

ST_145: stg_1787 [1/1] 2.71ns
.preheader8.preheader:535  store i32 %W_addr_5_58_loc_assign_1, i32* %W_addr_74, align 8

ST_145: tmp_28_60 [1/1] 0.00ns (grouped into LUT with out node tmp_30_60)
.preheader8.preheader:548  %tmp_28_60 = xor i32 %W_addr_5_53_loc_assign_2, %W_addr_5_58_loc_assign_1

ST_145: tmp_29_60 [1/1] 0.00ns (grouped into LUT with out node tmp_30_60)
.preheader8.preheader:549  %tmp_29_60 = xor i32 %tmp_28_60, %W_addr_5_47_loc_assign_4

ST_145: tmp_30_60 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:550  %tmp_30_60 = xor i32 %tmp_29_60, %W_addr_5_45_loc_assign_4

ST_145: tmp_69_s [1/1] 1.97ns
.preheader8.preheader:1571  %tmp_69_s = add i32 %call_ret_9, %tmp_68_s

ST_145: temp_4_s [1/1] 1.97ns
.preheader8.preheader:1572  %temp_4_s = add i32 %W_addr_5_54_loc_assign_2, %tmp_69_s

ST_145: call_ret44_s [1/1] 4.52ns
.preheader8.preheader:1573  %call_ret44_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_9, i32 %B_ret40_9, i32 %C_ret41_9, i32 %D_ret42_9, i32 %temp_4_s)

ST_145: call_ret_s [1/1] 0.00ns
.preheader8.preheader:1574  %call_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 0

ST_145: A_ret39_s [1/1] 0.00ns
.preheader8.preheader:1575  %A_ret39_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 1

ST_145: B_ret40_s [1/1] 0.00ns
.preheader8.preheader:1576  %B_ret40_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 2

ST_145: C_ret41_s [1/1] 0.00ns
.preheader8.preheader:1577  %C_ret41_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 3

ST_145: D_ret42_s [1/1] 0.00ns
.preheader8.preheader:1578  %D_ret42_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 4


 <State 146>: 8.46ns
ST_146: tmp_63_10 [1/1] 4.52ns
.preheader8.preheader:1579  %tmp_63_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_s)

ST_146: tmp_64_10 [1/1] 0.00ns (grouped into LUT with out node tmp_65_10)
.preheader8.preheader:1580  %tmp_64_10 = xor i32 %C_ret41_s, %B_ret40_s

ST_146: tmp_65_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1581  %tmp_65_10 = xor i32 %tmp_64_10, %D_ret42_s

ST_146: tmp_67_10 [1/1] 1.97ns
.preheader8.preheader:1582  %tmp_67_10 = add i32 %tmp_63_10, -899497514

ST_146: tmp_68_10 [1/1] 1.97ns
.preheader8.preheader:1583  %tmp_68_10 = add i32 %tmp_65_10, %tmp_67_10


 <State 147>: 8.46ns
ST_147: W_addr_5_59_loc_assign_1 [1/1] 4.52ns
.preheader8.preheader:539  %W_addr_5_59_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_58)

ST_147: W_addr_75 [1/1] 0.00ns
.preheader8.preheader:540  %W_addr_75 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 75

ST_147: stg_1806 [1/1] 2.71ns
.preheader8.preheader:541  store i32 %W_addr_5_59_loc_assign_1, i32* %W_addr_75, align 4

ST_147: tmp_28_61 [1/1] 0.00ns (grouped into LUT with out node tmp_30_61)
.preheader8.preheader:554  %tmp_28_61 = xor i32 %W_addr_5_54_loc_assign_2, %W_addr_5_59_loc_assign_1

ST_147: tmp_29_61 [1/1] 0.00ns (grouped into LUT with out node tmp_30_61)
.preheader8.preheader:555  %tmp_29_61 = xor i32 %tmp_28_61, %W_addr_5_48_loc_assign_3

ST_147: tmp_30_61 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:556  %tmp_30_61 = xor i32 %tmp_29_61, %W_addr_5_46_loc_assign_4

ST_147: tmp_69_10 [1/1] 1.97ns
.preheader8.preheader:1584  %tmp_69_10 = add i32 %call_ret_s, %tmp_68_10

ST_147: temp_4_10 [1/1] 1.97ns
.preheader8.preheader:1585  %temp_4_10 = add i32 %W_addr_5_55_loc_assign_2, %tmp_69_10

ST_147: call_ret44_10 [1/1] 4.52ns
.preheader8.preheader:1586  %call_ret44_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_s, i32 %B_ret40_s, i32 %C_ret41_s, i32 %D_ret42_s, i32 %temp_4_10)

ST_147: call_ret_10 [1/1] 0.00ns
.preheader8.preheader:1587  %call_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 0

ST_147: A_ret39_10 [1/1] 0.00ns
.preheader8.preheader:1588  %A_ret39_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 1

ST_147: B_ret40_10 [1/1] 0.00ns
.preheader8.preheader:1589  %B_ret40_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 2

ST_147: C_ret41_10 [1/1] 0.00ns
.preheader8.preheader:1590  %C_ret41_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 3

ST_147: D_ret42_10 [1/1] 0.00ns
.preheader8.preheader:1591  %D_ret42_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 4


 <State 148>: 8.46ns
ST_148: tmp_63_11 [1/1] 4.52ns
.preheader8.preheader:1592  %tmp_63_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_10)

ST_148: tmp_64_11 [1/1] 0.00ns (grouped into LUT with out node tmp_65_11)
.preheader8.preheader:1593  %tmp_64_11 = xor i32 %C_ret41_10, %B_ret40_10

ST_148: tmp_65_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1594  %tmp_65_11 = xor i32 %tmp_64_11, %D_ret42_10

ST_148: tmp_67_11 [1/1] 1.97ns
.preheader8.preheader:1595  %tmp_67_11 = add i32 %tmp_63_11, -899497514

ST_148: tmp_68_11 [1/1] 1.97ns
.preheader8.preheader:1596  %tmp_68_11 = add i32 %tmp_65_11, %tmp_67_11


 <State 149>: 8.46ns
ST_149: W_addr_5_60_loc_assign_1 [1/1] 4.52ns
.preheader8.preheader:545  %W_addr_5_60_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_59)

ST_149: W_addr_76 [1/1] 0.00ns
.preheader8.preheader:546  %W_addr_76 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 76

ST_149: stg_1825 [1/1] 2.71ns
.preheader8.preheader:547  store i32 %W_addr_5_60_loc_assign_1, i32* %W_addr_76, align 16

ST_149: tmp_28_62 [1/1] 0.00ns (grouped into LUT with out node tmp_30_62)
.preheader8.preheader:560  %tmp_28_62 = xor i32 %W_addr_5_55_loc_assign_2, %W_addr_5_60_loc_assign_1

ST_149: tmp_29_62 [1/1] 0.00ns (grouped into LUT with out node tmp_30_62)
.preheader8.preheader:561  %tmp_29_62 = xor i32 %tmp_28_62, %W_addr_5_49_loc_assign_3

ST_149: tmp_30_62 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:562  %tmp_30_62 = xor i32 %tmp_29_62, %W_addr_5_47_loc_assign_4

ST_149: tmp_69_11 [1/1] 1.97ns
.preheader8.preheader:1597  %tmp_69_11 = add i32 %call_ret_10, %tmp_68_11

ST_149: temp_4_11 [1/1] 1.97ns
.preheader8.preheader:1598  %temp_4_11 = add i32 %W_addr_5_56_loc_assign_1, %tmp_69_11

ST_149: call_ret44_11 [1/1] 4.52ns
.preheader8.preheader:1599  %call_ret44_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_10, i32 %B_ret40_10, i32 %C_ret41_10, i32 %D_ret42_10, i32 %temp_4_11)

ST_149: call_ret_11 [1/1] 0.00ns
.preheader8.preheader:1600  %call_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 0

ST_149: A_ret39_11 [1/1] 0.00ns
.preheader8.preheader:1601  %A_ret39_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 1

ST_149: B_ret40_11 [1/1] 0.00ns
.preheader8.preheader:1602  %B_ret40_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 2

ST_149: C_ret41_11 [1/1] 0.00ns
.preheader8.preheader:1603  %C_ret41_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 3

ST_149: D_ret42_11 [1/1] 0.00ns
.preheader8.preheader:1604  %D_ret42_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 4


 <State 150>: 8.46ns
ST_150: tmp_63_12 [1/1] 4.52ns
.preheader8.preheader:1605  %tmp_63_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_11)

ST_150: tmp_64_12 [1/1] 0.00ns (grouped into LUT with out node tmp_65_12)
.preheader8.preheader:1606  %tmp_64_12 = xor i32 %C_ret41_11, %B_ret40_11

ST_150: tmp_65_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1607  %tmp_65_12 = xor i32 %tmp_64_12, %D_ret42_11

ST_150: tmp_67_12 [1/1] 1.97ns
.preheader8.preheader:1608  %tmp_67_12 = add i32 %tmp_63_12, -899497514

ST_150: tmp_68_12 [1/1] 1.97ns
.preheader8.preheader:1609  %tmp_68_12 = add i32 %tmp_65_12, %tmp_67_12


 <State 151>: 8.46ns
ST_151: tmp_31_s [1/1] 4.52ns
.preheader8.preheader:551  %tmp_31_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_60)

ST_151: W_addr_77 [1/1] 0.00ns
.preheader8.preheader:552  %W_addr_77 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 77

ST_151: stg_1844 [1/1] 2.71ns
.preheader8.preheader:553  store i32 %tmp_31_s, i32* %W_addr_77, align 4

ST_151: tmp_69_12 [1/1] 1.97ns
.preheader8.preheader:1610  %tmp_69_12 = add i32 %call_ret_11, %tmp_68_12

ST_151: temp_4_12 [1/1] 1.97ns
.preheader8.preheader:1611  %temp_4_12 = add i32 %W_addr_5_57_loc_assign_1, %tmp_69_12

ST_151: call_ret44_12 [1/1] 4.52ns
.preheader8.preheader:1612  %call_ret44_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_11, i32 %B_ret40_11, i32 %C_ret41_11, i32 %D_ret42_11, i32 %temp_4_12)

ST_151: call_ret_12 [1/1] 0.00ns
.preheader8.preheader:1613  %call_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 0

ST_151: A_ret39_12 [1/1] 0.00ns
.preheader8.preheader:1614  %A_ret39_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 1

ST_151: B_ret40_12 [1/1] 0.00ns
.preheader8.preheader:1615  %B_ret40_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 2

ST_151: C_ret41_12 [1/1] 0.00ns
.preheader8.preheader:1616  %C_ret41_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 3

ST_151: D_ret42_12 [1/1] 0.00ns
.preheader8.preheader:1617  %D_ret42_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 4


 <State 152>: 8.46ns
ST_152: tmp_63_13 [1/1] 4.52ns
.preheader8.preheader:1618  %tmp_63_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_12)

ST_152: tmp_64_13 [1/1] 0.00ns (grouped into LUT with out node tmp_65_13)
.preheader8.preheader:1619  %tmp_64_13 = xor i32 %C_ret41_12, %B_ret40_12

ST_152: tmp_65_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1620  %tmp_65_13 = xor i32 %tmp_64_13, %D_ret42_12

ST_152: tmp_67_13 [1/1] 1.97ns
.preheader8.preheader:1621  %tmp_67_13 = add i32 %tmp_63_13, -899497514

ST_152: tmp_68_13 [1/1] 1.97ns
.preheader8.preheader:1622  %tmp_68_13 = add i32 %tmp_65_13, %tmp_67_13

ST_152: W_load [2/2] 2.71ns
.preheader8.preheader:1660  %W_load = load i32* %W_addr_77, align 4


 <State 153>: 8.46ns
ST_153: tmp_31_1 [1/1] 4.52ns
.preheader8.preheader:557  %tmp_31_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_61)

ST_153: W_addr_78 [1/1] 0.00ns
.preheader8.preheader:558  %W_addr_78 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 78

ST_153: stg_1861 [1/1] 2.71ns
.preheader8.preheader:559  store i32 %tmp_31_1, i32* %W_addr_78, align 8

ST_153: tmp_69_13 [1/1] 1.97ns
.preheader8.preheader:1623  %tmp_69_13 = add i32 %call_ret_12, %tmp_68_13

ST_153: temp_4_13 [1/1] 1.97ns
.preheader8.preheader:1624  %temp_4_13 = add i32 %W_addr_5_58_loc_assign_1, %tmp_69_13

ST_153: call_ret44_13 [1/1] 4.52ns
.preheader8.preheader:1625  %call_ret44_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_12, i32 %B_ret40_12, i32 %C_ret41_12, i32 %D_ret42_12, i32 %temp_4_13)

ST_153: call_ret_13 [1/1] 0.00ns
.preheader8.preheader:1626  %call_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 0

ST_153: A_ret39_13 [1/1] 0.00ns
.preheader8.preheader:1627  %A_ret39_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 1

ST_153: B_ret40_13 [1/1] 0.00ns
.preheader8.preheader:1628  %B_ret40_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 2

ST_153: C_ret41_13 [1/1] 0.00ns
.preheader8.preheader:1629  %C_ret41_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 3

ST_153: D_ret42_13 [1/1] 0.00ns
.preheader8.preheader:1630  %D_ret42_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 4

ST_153: W_load [1/2] 2.71ns
.preheader8.preheader:1660  %W_load = load i32* %W_addr_77, align 4


 <State 154>: 8.46ns
ST_154: tmp_63_14 [1/1] 4.52ns
.preheader8.preheader:1631  %tmp_63_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_13)

ST_154: tmp_64_14 [1/1] 0.00ns (grouped into LUT with out node tmp_65_14)
.preheader8.preheader:1632  %tmp_64_14 = xor i32 %C_ret41_13, %B_ret40_13

ST_154: tmp_65_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1633  %tmp_65_14 = xor i32 %tmp_64_14, %D_ret42_13

ST_154: tmp_67_14 [1/1] 1.97ns
.preheader8.preheader:1634  %tmp_67_14 = add i32 %tmp_63_14, -899497514

ST_154: tmp_68_14 [1/1] 1.97ns
.preheader8.preheader:1635  %tmp_68_14 = add i32 %tmp_65_14, %tmp_67_14

ST_154: W_load_1 [2/2] 2.71ns
.preheader8.preheader:1674  %W_load_1 = load i32* %W_addr_78, align 8


 <State 155>: 8.46ns
ST_155: tmp_31_2 [1/1] 4.52ns
.preheader8.preheader:563  %tmp_31_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_62)

ST_155: W_addr_79 [1/1] 0.00ns
.preheader8.preheader:564  %W_addr_79 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 79

ST_155: stg_1879 [1/1] 2.71ns
.preheader8.preheader:565  store i32 %tmp_31_2, i32* %W_addr_79, align 4

ST_155: tmp_69_14 [1/1] 1.97ns
.preheader8.preheader:1636  %tmp_69_14 = add i32 %call_ret_13, %tmp_68_14

ST_155: temp_4_14 [1/1] 1.97ns
.preheader8.preheader:1637  %temp_4_14 = add i32 %W_addr_5_59_loc_assign_1, %tmp_69_14

ST_155: call_ret44_14 [1/1] 4.52ns
.preheader8.preheader:1638  %call_ret44_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_13, i32 %B_ret40_13, i32 %C_ret41_13, i32 %D_ret42_13, i32 %temp_4_14)

ST_155: call_ret_14 [1/1] 0.00ns
.preheader8.preheader:1639  %call_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 0

ST_155: A_ret39_14 [1/1] 0.00ns
.preheader8.preheader:1640  %A_ret39_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 1

ST_155: B_ret40_14 [1/1] 0.00ns
.preheader8.preheader:1641  %B_ret40_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 2

ST_155: C_ret41_14 [1/1] 0.00ns
.preheader8.preheader:1642  %C_ret41_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 3

ST_155: D_ret42_14 [1/1] 0.00ns
.preheader8.preheader:1643  %D_ret42_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 4

ST_155: W_load_1 [1/2] 2.71ns
.preheader8.preheader:1674  %W_load_1 = load i32* %W_addr_78, align 8


 <State 156>: 8.46ns
ST_156: tmp_63_15 [1/1] 4.52ns
.preheader8.preheader:1644  %tmp_63_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_14)

ST_156: tmp_64_15 [1/1] 0.00ns (grouped into LUT with out node tmp_65_15)
.preheader8.preheader:1645  %tmp_64_15 = xor i32 %C_ret41_14, %B_ret40_14

ST_156: tmp_65_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1646  %tmp_65_15 = xor i32 %tmp_64_15, %D_ret42_14

ST_156: tmp_67_15 [1/1] 1.97ns
.preheader8.preheader:1647  %tmp_67_15 = add i32 %tmp_63_15, -899497514

ST_156: tmp_68_15 [1/1] 1.97ns
.preheader8.preheader:1648  %tmp_68_15 = add i32 %tmp_65_15, %tmp_67_15

ST_156: W_load_2 [2/2] 2.71ns
.preheader8.preheader:1688  %W_load_2 = load i32* %W_addr_79, align 4


 <State 157>: 8.46ns
ST_157: tmp_69_15 [1/1] 1.97ns
.preheader8.preheader:1649  %tmp_69_15 = add i32 %call_ret_14, %tmp_68_15

ST_157: temp_4_15 [1/1] 1.97ns
.preheader8.preheader:1650  %temp_4_15 = add i32 %W_addr_5_60_loc_assign_1, %tmp_69_15

ST_157: call_ret44_15 [1/1] 4.52ns
.preheader8.preheader:1651  %call_ret44_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_14, i32 %B_ret40_14, i32 %C_ret41_14, i32 %D_ret42_14, i32 %temp_4_15)

ST_157: call_ret_15 [1/1] 0.00ns
.preheader8.preheader:1652  %call_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 0

ST_157: A_ret39_15 [1/1] 0.00ns
.preheader8.preheader:1653  %A_ret39_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 1

ST_157: B_ret40_15 [1/1] 0.00ns
.preheader8.preheader:1654  %B_ret40_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 2

ST_157: C_ret41_15 [1/1] 0.00ns
.preheader8.preheader:1655  %C_ret41_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 3

ST_157: D_ret42_15 [1/1] 0.00ns
.preheader8.preheader:1656  %D_ret42_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 4

ST_157: W_load_2 [1/2] 2.71ns
.preheader8.preheader:1688  %W_load_2 = load i32* %W_addr_79, align 4


 <State 158>: 8.46ns
ST_158: tmp_63_16 [1/1] 4.52ns
.preheader8.preheader:1657  %tmp_63_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_15)

ST_158: tmp_64_16 [1/1] 0.00ns (grouped into LUT with out node tmp_65_16)
.preheader8.preheader:1658  %tmp_64_16 = xor i32 %C_ret41_15, %B_ret40_15

ST_158: tmp_65_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1659  %tmp_65_16 = xor i32 %tmp_64_16, %D_ret42_15

ST_158: tmp_67_16 [1/1] 1.97ns
.preheader8.preheader:1661  %tmp_67_16 = add i32 %tmp_63_16, -899497514

ST_158: tmp_68_16 [1/1] 1.97ns
.preheader8.preheader:1662  %tmp_68_16 = add i32 %tmp_65_16, %tmp_67_16


 <State 159>: 8.46ns
ST_159: tmp_69_16 [1/1] 1.97ns
.preheader8.preheader:1663  %tmp_69_16 = add i32 %call_ret_15, %tmp_68_16

ST_159: temp_4_16 [1/1] 1.97ns
.preheader8.preheader:1664  %temp_4_16 = add i32 %W_load, %tmp_69_16

ST_159: call_ret44_16 [1/1] 4.52ns
.preheader8.preheader:1665  %call_ret44_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_15, i32 %B_ret40_15, i32 %C_ret41_15, i32 %D_ret42_15, i32 %temp_4_16)

ST_159: call_ret_16 [1/1] 0.00ns
.preheader8.preheader:1666  %call_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 0

ST_159: A_ret39_16 [1/1] 0.00ns
.preheader8.preheader:1667  %A_ret39_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 1

ST_159: B_ret40_16 [1/1] 0.00ns
.preheader8.preheader:1668  %B_ret40_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 2

ST_159: C_ret41_16 [1/1] 0.00ns
.preheader8.preheader:1669  %C_ret41_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 3

ST_159: D_ret42_16 [1/1] 0.00ns
.preheader8.preheader:1670  %D_ret42_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 4


 <State 160>: 8.46ns
ST_160: tmp_63_17 [1/1] 4.52ns
.preheader8.preheader:1671  %tmp_63_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_16)

ST_160: tmp_64_17 [1/1] 0.00ns (grouped into LUT with out node tmp_65_17)
.preheader8.preheader:1672  %tmp_64_17 = xor i32 %C_ret41_16, %B_ret40_16

ST_160: tmp_65_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1673  %tmp_65_17 = xor i32 %tmp_64_17, %D_ret42_16

ST_160: tmp_67_17 [1/1] 1.97ns
.preheader8.preheader:1675  %tmp_67_17 = add i32 %tmp_63_17, -899497514

ST_160: tmp_68_17 [1/1] 1.97ns
.preheader8.preheader:1676  %tmp_68_17 = add i32 %tmp_65_17, %tmp_67_17


 <State 161>: 8.46ns
ST_161: tmp_69_17 [1/1] 1.97ns
.preheader8.preheader:1677  %tmp_69_17 = add i32 %call_ret_16, %tmp_68_17

ST_161: temp_4_17 [1/1] 1.97ns
.preheader8.preheader:1678  %temp_4_17 = add i32 %W_load_1, %tmp_69_17

ST_161: call_ret44_17 [1/1] 4.52ns
.preheader8.preheader:1679  %call_ret44_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_16, i32 %B_ret40_16, i32 %C_ret41_16, i32 %D_ret42_16, i32 %temp_4_17)

ST_161: call_ret_17 [1/1] 0.00ns
.preheader8.preheader:1680  %call_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 0

ST_161: A_ret39_17 [1/1] 0.00ns
.preheader8.preheader:1681  %A_ret39_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 1

ST_161: B_ret40_17 [1/1] 0.00ns
.preheader8.preheader:1682  %B_ret40_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 2

ST_161: C_ret41_17 [1/1] 0.00ns
.preheader8.preheader:1683  %C_ret41_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 3

ST_161: D_ret42_17 [1/1] 0.00ns
.preheader8.preheader:1684  %D_ret42_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 4


 <State 162>: 8.46ns
ST_162: tmp_63_18 [1/1] 4.52ns
.preheader8.preheader:1685  %tmp_63_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_17)

ST_162: tmp_64_18 [1/1] 0.00ns (grouped into LUT with out node tmp_65_18)
.preheader8.preheader:1686  %tmp_64_18 = xor i32 %C_ret41_17, %B_ret40_17

ST_162: tmp_65_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:1687  %tmp_65_18 = xor i32 %tmp_64_18, %D_ret42_17

ST_162: tmp_67_18 [1/1] 1.97ns
.preheader8.preheader:1689  %tmp_67_18 = add i32 %tmp_63_18, -899497514

ST_162: tmp_68_18 [1/1] 1.97ns
.preheader8.preheader:1690  %tmp_68_18 = add i32 %tmp_65_18, %tmp_67_18


 <State 163>: 8.46ns
ST_163: tmp_69_18 [1/1] 1.97ns
.preheader8.preheader:1691  %tmp_69_18 = add i32 %call_ret_17, %tmp_68_18

ST_163: temp_4_18 [1/1] 1.97ns
.preheader8.preheader:1692  %temp_4_18 = add i32 %W_load_2, %tmp_69_18

ST_163: call_ret44_18 [1/1] 4.52ns
.preheader8.preheader:1693  %call_ret44_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_17, i32 %B_ret40_17, i32 %C_ret41_17, i32 %D_ret42_17, i32 %temp_4_18)


 <State 164>: 4.83ns
ST_164: call_ret_18 [1/1] 0.00ns (grouped into LUT with out node tmp_36)
.preheader8.preheader:1694  %call_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 0

ST_164: A_ret39_18 [1/1] 0.00ns (grouped into LUT with out node tmp_32)
.preheader8.preheader:1695  %A_ret39_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 1

ST_164: B_ret40_18 [1/1] 0.00ns (grouped into LUT with out node tmp_33)
.preheader8.preheader:1696  %B_ret40_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 2

ST_164: C_ret41_18 [1/1] 0.00ns (grouped into LUT with out node tmp_34)
.preheader8.preheader:1697  %C_ret41_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 3

ST_164: D_ret42_18 [1/1] 0.00ns (grouped into LUT with out node tmp_35)
.preheader8.preheader:1698  %D_ret42_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 4

ST_164: tmp_32 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1700  %tmp_32 = add i32 %A_ret39_18, %context_Intermediate_Hash_load

ST_164: stg_1944 [1/1] 2.39ns
.preheader8.preheader:1701  store i32 %tmp_32, i32* %context_Intermediate_Hash_addr, align 4

ST_164: tmp_33 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1703  %tmp_33 = add i32 %B_ret40_18, %context_Intermediate_Hash_load_1

ST_164: stg_1946 [1/1] 2.39ns
.preheader8.preheader:1704  store i32 %tmp_33, i32* %context_Intermediate_Hash_addr_1, align 4

ST_164: tmp_34 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1706  %tmp_34 = add i32 %C_ret41_18, %context_Intermediate_Hash_load_2

ST_164: tmp_35 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1709  %tmp_35 = add i32 %D_ret42_18, %context_Intermediate_Hash_load_3

ST_164: tmp_36 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1712  %tmp_36 = add i32 %call_ret_18, %context_Intermediate_Hash_load_4


 <State 165>: 2.39ns
ST_165: stg_1950 [1/1] 2.39ns
.preheader8.preheader:1707  store i32 %tmp_34, i32* %context_Intermediate_Hash_addr_2, align 4

ST_165: stg_1951 [1/1] 2.39ns
.preheader8.preheader:1710  store i32 %tmp_35, i32* %context_Intermediate_Hash_addr_3, align 4


 <State 166>: 2.39ns
ST_166: stg_1952 [1/1] 0.00ns
.preheader8.preheader:0  call void (...)* @_ssdm_op_SpecBitsMap([5 x i32]* %context_Intermediate_Hash), !map !19

ST_166: stg_1953 [1/1] 0.00ns
.preheader8.preheader:1  call void (...)* @_ssdm_op_SpecBitsMap(i16* %context_Message_Block_Index), !map !25

ST_166: stg_1954 [1/1] 0.00ns
.preheader8.preheader:2  call void (...)* @_ssdm_op_SpecBitsMap([64 x i8]* %context_Message_Block), !map !31

ST_166: stg_1955 [1/1] 0.00ns
.preheader8.preheader:3  call void (...)* @_ssdm_op_SpecTopModule([24 x i8]* @SHA1ProcessMessageBlock_str) nounwind

ST_166: stg_1956 [1/1] 0.00ns
.preheader8.preheader:5  call void (...)* @_ssdm_op_SpecPipeline(i32 4, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_166: stg_1957 [1/1] 2.39ns
.preheader8.preheader:1713  store i32 %tmp_36, i32* %context_Intermediate_Hash_addr_4, align 4

ST_166: stg_1958 [1/1] 0.00ns
.preheader8.preheader:1714  call void @_ssdm_op_Write.ap_auto.i16P(i16* %context_Message_Block_Index, i16 0)

ST_166: stg_1959 [1/1] 0.00ns
.preheader8.preheader:1715  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158
	State 159
	State 160
	State 161
	State 162
	State 163
	State 164
	State 165
	State 166


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
