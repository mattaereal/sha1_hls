; ModuleID = '/home/matt/workspace/sha1_hls/pipeline_balancingon/.autopilot/db/a.o.2.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SHA1ProcessMessageBlock_str = internal unnamed_addr constant [24 x i8] c"SHA1ProcessMessageBlock\00"
@p_str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

declare void @llvm.dbg.value(metadata, i64, metadata) nounwind readnone

declare void @llvm.dbg.declare(metadata, metadata) nounwind readnone

define weak void @_ssdm_op_Write.ap_auto.i16P(i16*, i16) {
entry:
  store i16 %1, i16* %0
  ret void
}

define weak void @_ssdm_op_SpecTopModule(...) {
entry:
  ret void
}

define weak void @_ssdm_op_SpecPipeline(...) nounwind {
entry:
  ret void
}

define weak void @_ssdm_op_SpecBitsMap(...) {
entry:
  ret void
}

define weak i6 @_ssdm_op_Read.ap_auto.i6(i6) {
entry:
  ret i6 %0
}

define weak i32 @_ssdm_op_Read.ap_auto.i32(i32) {
entry:
  ret i32 %0
}

define weak i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8, i8, i8, i8) nounwind readnone {
entry:
  %empty = zext i8 %2 to i16
  %empty_3 = zext i8 %3 to i16
  %empty_4 = shl i16 %empty, 8
  %empty_5 = or i16 %empty_4, %empty_3
  %empty_6 = zext i8 %1 to i24
  %empty_7 = zext i16 %empty_5 to i24
  %empty_8 = shl i24 %empty_6, 16
  %empty_9 = or i24 %empty_8, %empty_7
  %empty_10 = zext i8 %0 to i32
  %empty_11 = zext i24 %empty_9 to i32
  %empty_12 = shl i32 %empty_10, 24
  %empty_13 = or i32 %empty_12, %empty_11
  ret i32 %empty_13
}

define internal fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_read, i32 %B_r, i32 %C_read, i32 %D_read, i32 %temp_read) readnone {
  %temp_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %temp_read)
  %D_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %D_read)
  %C_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %C_read)
  %B_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %B_r)
  %A_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %A_read)
  call void (...)* @_ssdm_op_SpecPipeline(i32 4, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind
  %C_write_assign = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 30, i32 %B_read_1)
  %mrv = insertvalue { i32, i32, i32, i32, i32 } undef, i32 %D_read_1, 0
  %mrv_1 = insertvalue { i32, i32, i32, i32, i32 } %mrv, i32 %temp_read_1, 1
  %mrv_2 = insertvalue { i32, i32, i32, i32, i32 } %mrv_1, i32 %A_read_1, 2
  %mrv_3 = insertvalue { i32, i32, i32, i32, i32 } %mrv_2, i32 %C_write_assign, 3
  %mrv_4 = insertvalue { i32, i32, i32, i32, i32 } %mrv_3, i32 %C_read_1, 4
  ret { i32, i32, i32, i32, i32 } %mrv_4
}

define void @SHA1ProcessMessageBlock([5 x i32]* %context_Intermediate_Hash, i16* %context_Message_Block_Index, [64 x i8]* %context_Message_Block) {
.preheader8.preheader:
  call void (...)* @_ssdm_op_SpecBitsMap([5 x i32]* %context_Intermediate_Hash), !map !19
  call void (...)* @_ssdm_op_SpecBitsMap(i16* %context_Message_Block_Index), !map !25
  call void (...)* @_ssdm_op_SpecBitsMap([64 x i8]* %context_Message_Block), !map !31
  call void (...)* @_ssdm_op_SpecTopModule([24 x i8]* @SHA1ProcessMessageBlock_str) nounwind
  %W = alloca [80 x i32], align 16
  call void (...)* @_ssdm_op_SpecPipeline(i32 4, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind
  %context_Message_Block_addr = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 0
  %context_Message_Block_load = load i8* %context_Message_Block_addr, align 1
  %W_addr = getelementptr inbounds [80 x i32]* %W, i64 0, i64 0
  %context_Message_Block_addr_1 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 1
  %context_Message_Block_load_1 = load i8* %context_Message_Block_addr_1, align 1
  %context_Message_Block_addr_2 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 2
  %context_Message_Block_load_2 = load i8* %context_Message_Block_addr_2, align 1
  %context_Message_Block_addr_3 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 3
  %context_Message_Block_load_3 = load i8* %context_Message_Block_addr_3, align 1
  %tmp_s = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load, i8 %context_Message_Block_load_1, i8 %context_Message_Block_load_2, i8 %context_Message_Block_load_3)
  store i32 %tmp_s, i32* %W_addr, align 16
  %context_Message_Block_addr_16 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 4
  %context_Message_Block_load_16 = load i8* %context_Message_Block_addr_16, align 1
  %W_addr_1 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 1
  %context_Message_Block_addr_17 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 5
  %context_Message_Block_load_17 = load i8* %context_Message_Block_addr_17, align 1
  %context_Message_Block_addr_18 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 6
  %context_Message_Block_load_18 = load i8* %context_Message_Block_addr_18, align 1
  %context_Message_Block_addr_19 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 7
  %context_Message_Block_load_19 = load i8* %context_Message_Block_addr_19, align 1
  %W_addr_157_loc_assign_1 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_16, i8 %context_Message_Block_load_17, i8 %context_Message_Block_load_18, i8 %context_Message_Block_load_19)
  store i32 %W_addr_157_loc_assign_1, i32* %W_addr_1, align 4
  %context_Message_Block_addr_20 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 8
  %context_Message_Block_load_20 = load i8* %context_Message_Block_addr_20, align 1
  %W_addr_2 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 2
  %context_Message_Block_addr_21 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 9
  %context_Message_Block_load_21 = load i8* %context_Message_Block_addr_21, align 1
  %context_Message_Block_addr_22 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 10
  %context_Message_Block_load_22 = load i8* %context_Message_Block_addr_22, align 1
  %context_Message_Block_addr_23 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 11
  %context_Message_Block_load_23 = load i8* %context_Message_Block_addr_23, align 1
  %W_addr_262_loc_assign_1 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_20, i8 %context_Message_Block_load_21, i8 %context_Message_Block_load_22, i8 %context_Message_Block_load_23)
  store i32 %W_addr_262_loc_assign_1, i32* %W_addr_2, align 8
  %context_Message_Block_addr_24 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 12
  %context_Message_Block_load_24 = load i8* %context_Message_Block_addr_24, align 1
  %W_addr_3 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 3
  %context_Message_Block_addr_25 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 13
  %context_Message_Block_load_25 = load i8* %context_Message_Block_addr_25, align 1
  %context_Message_Block_addr_26 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 14
  %context_Message_Block_load_26 = load i8* %context_Message_Block_addr_26, align 1
  %context_Message_Block_addr_27 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 15
  %context_Message_Block_load_27 = load i8* %context_Message_Block_addr_27, align 1
  %W_addr_367_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_24, i8 %context_Message_Block_load_25, i8 %context_Message_Block_load_26, i8 %context_Message_Block_load_27)
  store i32 %W_addr_367_loc_assign_2, i32* %W_addr_3, align 4
  %context_Message_Block_addr_4 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 16
  %context_Message_Block_load_4 = load i8* %context_Message_Block_addr_4, align 1
  %W_addr_4 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 4
  %context_Message_Block_addr_28 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 17
  %context_Message_Block_load_28 = load i8* %context_Message_Block_addr_28, align 1
  %context_Message_Block_addr_29 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 18
  %context_Message_Block_load_29 = load i8* %context_Message_Block_addr_29, align 1
  %context_Message_Block_addr_30 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 19
  %context_Message_Block_load_30 = load i8* %context_Message_Block_addr_30, align 1
  %W_addr_470_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_4, i8 %context_Message_Block_load_28, i8 %context_Message_Block_load_29, i8 %context_Message_Block_load_30)
  store i32 %W_addr_470_loc_assign_2, i32* %W_addr_4, align 16
  %context_Message_Block_addr_5 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 20
  %context_Message_Block_load_5 = load i8* %context_Message_Block_addr_5, align 1
  %W_addr_5 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 5
  %context_Message_Block_addr_31 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 21
  %context_Message_Block_load_31 = load i8* %context_Message_Block_addr_31, align 1
  %context_Message_Block_addr_32 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 22
  %context_Message_Block_load_32 = load i8* %context_Message_Block_addr_32, align 1
  %context_Message_Block_addr_33 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 23
  %context_Message_Block_load_33 = load i8* %context_Message_Block_addr_33, align 1
  %W_addr_573_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_5, i8 %context_Message_Block_load_31, i8 %context_Message_Block_load_32, i8 %context_Message_Block_load_33)
  store i32 %W_addr_573_loc_assign_2, i32* %W_addr_5, align 4
  %context_Message_Block_addr_6 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 24
  %context_Message_Block_load_6 = load i8* %context_Message_Block_addr_6, align 1
  %W_addr_6 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 6
  %context_Message_Block_addr_34 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 25
  %context_Message_Block_load_34 = load i8* %context_Message_Block_addr_34, align 1
  %context_Message_Block_addr_35 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 26
  %context_Message_Block_load_35 = load i8* %context_Message_Block_addr_35, align 1
  %context_Message_Block_addr_36 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 27
  %context_Message_Block_load_36 = load i8* %context_Message_Block_addr_36, align 1
  %W_addr_676_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_6, i8 %context_Message_Block_load_34, i8 %context_Message_Block_load_35, i8 %context_Message_Block_load_36)
  store i32 %W_addr_676_loc_assign_2, i32* %W_addr_6, align 8
  %context_Message_Block_addr_7 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 28
  %context_Message_Block_load_7 = load i8* %context_Message_Block_addr_7, align 1
  %W_addr_7 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 7
  %context_Message_Block_addr_37 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 29
  %context_Message_Block_load_37 = load i8* %context_Message_Block_addr_37, align 1
  %context_Message_Block_addr_38 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 30
  %context_Message_Block_load_38 = load i8* %context_Message_Block_addr_38, align 1
  %context_Message_Block_addr_39 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 31
  %context_Message_Block_load_39 = load i8* %context_Message_Block_addr_39, align 1
  %W_addr_779_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_7, i8 %context_Message_Block_load_37, i8 %context_Message_Block_load_38, i8 %context_Message_Block_load_39)
  store i32 %W_addr_779_loc_assign_2, i32* %W_addr_7, align 4
  %context_Message_Block_addr_8 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 32
  %context_Message_Block_load_8 = load i8* %context_Message_Block_addr_8, align 1
  %W_addr_8 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 8
  %context_Message_Block_addr_40 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 33
  %context_Message_Block_load_40 = load i8* %context_Message_Block_addr_40, align 1
  %context_Message_Block_addr_41 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 34
  %context_Message_Block_load_41 = load i8* %context_Message_Block_addr_41, align 1
  %context_Message_Block_addr_42 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 35
  %context_Message_Block_load_42 = load i8* %context_Message_Block_addr_42, align 1
  %W_addr_882_loc_assign_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_8, i8 %context_Message_Block_load_40, i8 %context_Message_Block_load_41, i8 %context_Message_Block_load_42)
  store i32 %W_addr_882_loc_assign_2, i32* %W_addr_8, align 16
  %context_Message_Block_addr_9 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 36
  %context_Message_Block_load_9 = load i8* %context_Message_Block_addr_9, align 1
  %W_addr_9 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 9
  %context_Message_Block_addr_43 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 37
  %context_Message_Block_load_43 = load i8* %context_Message_Block_addr_43, align 1
  %context_Message_Block_addr_44 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 38
  %context_Message_Block_load_44 = load i8* %context_Message_Block_addr_44, align 1
  %context_Message_Block_addr_45 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 39
  %context_Message_Block_load_45 = load i8* %context_Message_Block_addr_45, align 1
  %W_addr_985_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_9, i8 %context_Message_Block_load_43, i8 %context_Message_Block_load_44, i8 %context_Message_Block_load_45)
  store i32 %W_addr_985_loc_assign_3, i32* %W_addr_9, align 4
  %context_Message_Block_addr_10 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 40
  %context_Message_Block_load_10 = load i8* %context_Message_Block_addr_10, align 1
  %W_addr_10 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 10
  %context_Message_Block_addr_46 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 41
  %context_Message_Block_load_46 = load i8* %context_Message_Block_addr_46, align 1
  %context_Message_Block_addr_47 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 42
  %context_Message_Block_load_47 = load i8* %context_Message_Block_addr_47, align 1
  %context_Message_Block_addr_48 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 43
  %context_Message_Block_load_48 = load i8* %context_Message_Block_addr_48, align 1
  %W_addr_10_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_10, i8 %context_Message_Block_load_46, i8 %context_Message_Block_load_47, i8 %context_Message_Block_load_48)
  store i32 %W_addr_10_loc_assign_3, i32* %W_addr_10, align 8
  %context_Message_Block_addr_11 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 44
  %context_Message_Block_load_11 = load i8* %context_Message_Block_addr_11, align 1
  %W_addr_11 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 11
  %context_Message_Block_addr_49 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 45
  %context_Message_Block_load_49 = load i8* %context_Message_Block_addr_49, align 1
  %context_Message_Block_addr_50 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 46
  %context_Message_Block_load_50 = load i8* %context_Message_Block_addr_50, align 1
  %context_Message_Block_addr_51 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 47
  %context_Message_Block_load_51 = load i8* %context_Message_Block_addr_51, align 1
  %W_addr_11_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_11, i8 %context_Message_Block_load_49, i8 %context_Message_Block_load_50, i8 %context_Message_Block_load_51)
  store i32 %W_addr_11_loc_assign_3, i32* %W_addr_11, align 4
  %context_Message_Block_addr_12 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 48
  %context_Message_Block_load_12 = load i8* %context_Message_Block_addr_12, align 1
  %W_addr_12 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 12
  %context_Message_Block_addr_52 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 49
  %context_Message_Block_load_52 = load i8* %context_Message_Block_addr_52, align 1
  %context_Message_Block_addr_53 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 50
  %context_Message_Block_load_53 = load i8* %context_Message_Block_addr_53, align 1
  %context_Message_Block_addr_54 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 51
  %context_Message_Block_load_54 = load i8* %context_Message_Block_addr_54, align 1
  %W_addr_12_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_12, i8 %context_Message_Block_load_52, i8 %context_Message_Block_load_53, i8 %context_Message_Block_load_54)
  store i32 %W_addr_12_loc_assign_3, i32* %W_addr_12, align 16
  %context_Message_Block_addr_13 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 52
  %context_Message_Block_load_13 = load i8* %context_Message_Block_addr_13, align 1
  %W_addr_13 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 13
  %context_Message_Block_addr_55 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 53
  %context_Message_Block_load_55 = load i8* %context_Message_Block_addr_55, align 1
  %context_Message_Block_addr_56 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 54
  %context_Message_Block_load_56 = load i8* %context_Message_Block_addr_56, align 1
  %context_Message_Block_addr_57 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 55
  %context_Message_Block_load_57 = load i8* %context_Message_Block_addr_57, align 1
  %W_addr_13_loc_assign_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_13, i8 %context_Message_Block_load_55, i8 %context_Message_Block_load_56, i8 %context_Message_Block_load_57)
  store i32 %W_addr_13_loc_assign_3, i32* %W_addr_13, align 4
  %context_Message_Block_addr_14 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 56
  %context_Message_Block_load_14 = load i8* %context_Message_Block_addr_14, align 1
  %W_addr_14 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 14
  %context_Message_Block_addr_58 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 57
  %context_Message_Block_load_58 = load i8* %context_Message_Block_addr_58, align 1
  %context_Message_Block_addr_59 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 58
  %context_Message_Block_load_59 = load i8* %context_Message_Block_addr_59, align 1
  %context_Message_Block_addr_60 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 59
  %context_Message_Block_load_60 = load i8* %context_Message_Block_addr_60, align 1
  %W_addr_14_loc_assign_4 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_14, i8 %context_Message_Block_load_58, i8 %context_Message_Block_load_59, i8 %context_Message_Block_load_60)
  store i32 %W_addr_14_loc_assign_4, i32* %W_addr_14, align 8
  %context_Message_Block_addr_15 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 60
  %context_Message_Block_load_15 = load i8* %context_Message_Block_addr_15, align 1
  %W_addr_15 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 15
  %context_Message_Block_addr_61 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 61
  %context_Message_Block_load_61 = load i8* %context_Message_Block_addr_61, align 1
  %context_Message_Block_addr_62 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 62
  %context_Message_Block_load_62 = load i8* %context_Message_Block_addr_62, align 1
  %context_Message_Block_addr_63 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 63
  %context_Message_Block_load_63 = load i8* %context_Message_Block_addr_63, align 1
  %W_addr_15_loc_assign_4 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load_15, i8 %context_Message_Block_load_61, i8 %context_Message_Block_load_62, i8 %context_Message_Block_load_63)
  store i32 %W_addr_15_loc_assign_4, i32* %W_addr_15, align 4
  %tmp = xor i32 %W_addr_882_loc_assign_2, %W_addr_13_loc_assign_3
  %tmp1 = xor i32 %W_addr_262_loc_assign_1, %tmp_s
  %tmp_1 = xor i32 %tmp1, %tmp
  %W_addr_5_0_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_1)
  %W_addr_16 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 16
  store i32 %W_addr_5_0_loc_assign_4, i32* %W_addr_16, align 16
  %tmp2 = xor i32 %W_addr_985_loc_assign_3, %W_addr_14_loc_assign_4
  %tmp3 = xor i32 %W_addr_367_loc_assign_2, %W_addr_157_loc_assign_1
  %tmp_30_1 = xor i32 %tmp3, %tmp2
  %W_addr_5_1_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_1)
  %W_addr_17 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 17
  store i32 %W_addr_5_1_loc_assign_4, i32* %W_addr_17, align 4
  %tmp4 = xor i32 %W_addr_10_loc_assign_3, %W_addr_15_loc_assign_4
  %tmp5 = xor i32 %W_addr_470_loc_assign_2, %W_addr_262_loc_assign_1
  %tmp_30_2 = xor i32 %tmp5, %tmp4
  %W_addr_5_2_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_2)
  %W_addr_18 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 18
  store i32 %W_addr_5_2_loc_assign_4, i32* %W_addr_18, align 8
  %tmp6 = xor i32 %W_addr_11_loc_assign_3, %W_addr_5_0_loc_assign_4
  %tmp7 = xor i32 %W_addr_573_loc_assign_2, %W_addr_367_loc_assign_2
  %tmp_30_3 = xor i32 %tmp7, %tmp6
  %W_addr_5_3_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_3)
  %W_addr_19 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 19
  store i32 %W_addr_5_3_loc_assign_4, i32* %W_addr_19, align 4
  %tmp8 = xor i32 %W_addr_12_loc_assign_3, %W_addr_5_1_loc_assign_4
  %tmp9 = xor i32 %W_addr_676_loc_assign_2, %W_addr_470_loc_assign_2
  %tmp_30_4 = xor i32 %tmp9, %tmp8
  %W_addr_5_4_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_4)
  %W_addr_20 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 20
  store i32 %W_addr_5_4_loc_assign_4, i32* %W_addr_20, align 16
  %tmp10 = xor i32 %W_addr_13_loc_assign_3, %W_addr_5_2_loc_assign_4
  %tmp11 = xor i32 %W_addr_779_loc_assign_2, %W_addr_573_loc_assign_2
  %tmp_30_5 = xor i32 %tmp11, %tmp10
  %W_addr_5_5_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_5)
  %W_addr_21 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 21
  store i32 %W_addr_5_5_loc_assign_4, i32* %W_addr_21, align 4
  %tmp12 = xor i32 %W_addr_14_loc_assign_4, %W_addr_5_3_loc_assign_4
  %tmp13 = xor i32 %W_addr_882_loc_assign_2, %W_addr_676_loc_assign_2
  %tmp_30_6 = xor i32 %tmp13, %tmp12
  %W_addr_5_6_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_6)
  %W_addr_22 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 22
  store i32 %W_addr_5_6_loc_assign_4, i32* %W_addr_22, align 8
  %tmp14 = xor i32 %W_addr_15_loc_assign_4, %W_addr_5_4_loc_assign_4
  %tmp15 = xor i32 %W_addr_985_loc_assign_3, %W_addr_779_loc_assign_2
  %tmp_30_7 = xor i32 %tmp15, %tmp14
  %W_addr_5_7_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_7)
  %W_addr_23 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 23
  store i32 %W_addr_5_7_loc_assign_4, i32* %W_addr_23, align 4
  %tmp16 = xor i32 %W_addr_5_0_loc_assign_4, %W_addr_5_5_loc_assign_4
  %tmp17 = xor i32 %W_addr_10_loc_assign_3, %W_addr_882_loc_assign_2
  %tmp_30_8 = xor i32 %tmp17, %tmp16
  %W_addr_5_8_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_8)
  %W_addr_24 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 24
  store i32 %W_addr_5_8_loc_assign_4, i32* %W_addr_24, align 16
  %tmp18 = xor i32 %W_addr_5_1_loc_assign_4, %W_addr_5_6_loc_assign_4
  %tmp19 = xor i32 %W_addr_11_loc_assign_3, %W_addr_985_loc_assign_3
  %tmp_30_9 = xor i32 %tmp19, %tmp18
  %W_addr_5_9_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_9)
  %W_addr_25 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 25
  store i32 %W_addr_5_9_loc_assign_4, i32* %W_addr_25, align 4
  %tmp20 = xor i32 %W_addr_5_2_loc_assign_4, %W_addr_5_7_loc_assign_4
  %tmp21 = xor i32 %W_addr_12_loc_assign_3, %W_addr_10_loc_assign_3
  %tmp_30_s = xor i32 %tmp21, %tmp20
  %W_addr_5_10_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_s)
  %W_addr_26 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 26
  store i32 %W_addr_5_10_loc_assign_4, i32* %W_addr_26, align 8
  %tmp22 = xor i32 %W_addr_5_3_loc_assign_4, %W_addr_5_8_loc_assign_4
  %tmp23 = xor i32 %W_addr_13_loc_assign_3, %W_addr_11_loc_assign_3
  %tmp_30_10 = xor i32 %tmp23, %tmp22
  %W_addr_5_11_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_10)
  %W_addr_27 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 27
  store i32 %W_addr_5_11_loc_assign_4, i32* %W_addr_27, align 4
  %tmp24 = xor i32 %W_addr_5_4_loc_assign_4, %W_addr_5_9_loc_assign_4
  %tmp25 = xor i32 %W_addr_14_loc_assign_4, %W_addr_12_loc_assign_3
  %tmp_30_11 = xor i32 %tmp25, %tmp24
  %W_addr_5_12_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_11)
  %W_addr_28 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 28
  store i32 %W_addr_5_12_loc_assign_4, i32* %W_addr_28, align 16
  %tmp26 = xor i32 %W_addr_5_5_loc_assign_4, %W_addr_5_10_loc_assign_4
  %tmp27 = xor i32 %W_addr_15_loc_assign_4, %W_addr_13_loc_assign_3
  %tmp_30_12 = xor i32 %tmp27, %tmp26
  %W_addr_5_13_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_12)
  %W_addr_29 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 29
  store i32 %W_addr_5_13_loc_assign_4, i32* %W_addr_29, align 4
  %tmp28 = xor i32 %W_addr_5_6_loc_assign_4, %W_addr_5_11_loc_assign_4
  %tmp29 = xor i32 %W_addr_5_0_loc_assign_4, %W_addr_14_loc_assign_4
  %tmp_30_13 = xor i32 %tmp29, %tmp28
  %W_addr_5_14_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_13)
  %W_addr_30 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 30
  store i32 %W_addr_5_14_loc_assign_4, i32* %W_addr_30, align 8
  %tmp30 = xor i32 %W_addr_5_7_loc_assign_4, %W_addr_5_12_loc_assign_4
  %tmp31 = xor i32 %W_addr_5_1_loc_assign_4, %W_addr_15_loc_assign_4
  %tmp_30_14 = xor i32 %tmp31, %tmp30
  %W_addr_5_15_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_14)
  %W_addr_31 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 31
  store i32 %W_addr_5_15_loc_assign_4, i32* %W_addr_31, align 4
  %tmp32 = xor i32 %W_addr_5_8_loc_assign_4, %W_addr_5_13_loc_assign_4
  %tmp33 = xor i32 %W_addr_5_2_loc_assign_4, %W_addr_5_0_loc_assign_4
  %tmp_30_15 = xor i32 %tmp33, %tmp32
  %W_addr_5_16_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_15)
  %W_addr_32 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 32
  store i32 %W_addr_5_16_loc_assign_4, i32* %W_addr_32, align 16
  %tmp34 = xor i32 %W_addr_5_9_loc_assign_4, %W_addr_5_14_loc_assign_4
  %tmp35 = xor i32 %W_addr_5_3_loc_assign_4, %W_addr_5_1_loc_assign_4
  %tmp_30_16 = xor i32 %tmp35, %tmp34
  %W_addr_5_17_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_16)
  %W_addr_33 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 33
  store i32 %W_addr_5_17_loc_assign_4, i32* %W_addr_33, align 4
  %tmp36 = xor i32 %W_addr_5_10_loc_assign_4, %W_addr_5_15_loc_assign_4
  %tmp37 = xor i32 %W_addr_5_4_loc_assign_4, %W_addr_5_2_loc_assign_4
  %tmp_30_17 = xor i32 %tmp37, %tmp36
  %W_addr_5_18_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_17)
  %W_addr_34 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 34
  store i32 %W_addr_5_18_loc_assign_4, i32* %W_addr_34, align 8
  %tmp38 = xor i32 %W_addr_5_11_loc_assign_4, %W_addr_5_16_loc_assign_4
  %tmp39 = xor i32 %W_addr_5_5_loc_assign_4, %W_addr_5_3_loc_assign_4
  %tmp_30_18 = xor i32 %tmp39, %tmp38
  %W_addr_5_19_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_18)
  %W_addr_35 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 35
  store i32 %W_addr_5_19_loc_assign_4, i32* %W_addr_35, align 4
  %tmp40 = xor i32 %W_addr_5_12_loc_assign_4, %W_addr_5_17_loc_assign_4
  %tmp41 = xor i32 %W_addr_5_6_loc_assign_4, %W_addr_5_4_loc_assign_4
  %tmp_30_19 = xor i32 %tmp41, %tmp40
  %W_addr_5_20_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_19)
  %W_addr_36 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 36
  store i32 %W_addr_5_20_loc_assign_4, i32* %W_addr_36, align 16
  %tmp42 = xor i32 %W_addr_5_13_loc_assign_4, %W_addr_5_18_loc_assign_4
  %tmp43 = xor i32 %W_addr_5_7_loc_assign_4, %W_addr_5_5_loc_assign_4
  %tmp_30_20 = xor i32 %tmp43, %tmp42
  %W_addr_5_21_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_20)
  %W_addr_37 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 37
  store i32 %W_addr_5_21_loc_assign_4, i32* %W_addr_37, align 4
  %tmp44 = xor i32 %W_addr_5_14_loc_assign_4, %W_addr_5_19_loc_assign_4
  %tmp45 = xor i32 %W_addr_5_8_loc_assign_4, %W_addr_5_6_loc_assign_4
  %tmp_30_21 = xor i32 %tmp45, %tmp44
  %W_addr_5_22_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_21)
  %W_addr_38 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 38
  store i32 %W_addr_5_22_loc_assign_4, i32* %W_addr_38, align 8
  %tmp46 = xor i32 %W_addr_5_15_loc_assign_4, %W_addr_5_20_loc_assign_4
  %tmp47 = xor i32 %W_addr_5_9_loc_assign_4, %W_addr_5_7_loc_assign_4
  %tmp_30_22 = xor i32 %tmp47, %tmp46
  %W_addr_5_23_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_22)
  %W_addr_39 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 39
  store i32 %W_addr_5_23_loc_assign_4, i32* %W_addr_39, align 4
  %tmp48 = xor i32 %W_addr_5_16_loc_assign_4, %W_addr_5_21_loc_assign_4
  %tmp49 = xor i32 %W_addr_5_10_loc_assign_4, %W_addr_5_8_loc_assign_4
  %tmp_30_23 = xor i32 %tmp49, %tmp48
  %W_addr_5_24_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_23)
  %W_addr_40 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 40
  store i32 %W_addr_5_24_loc_assign_4, i32* %W_addr_40, align 16
  %tmp50 = xor i32 %W_addr_5_17_loc_assign_4, %W_addr_5_22_loc_assign_4
  %tmp51 = xor i32 %W_addr_5_11_loc_assign_4, %W_addr_5_9_loc_assign_4
  %tmp_30_24 = xor i32 %tmp51, %tmp50
  %W_addr_5_25_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_24)
  %W_addr_41 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 41
  store i32 %W_addr_5_25_loc_assign_4, i32* %W_addr_41, align 4
  %tmp52 = xor i32 %W_addr_5_18_loc_assign_4, %W_addr_5_23_loc_assign_4
  %tmp53 = xor i32 %W_addr_5_12_loc_assign_4, %W_addr_5_10_loc_assign_4
  %tmp_30_25 = xor i32 %tmp53, %tmp52
  %W_addr_5_26_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_25)
  %W_addr_42 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 42
  store i32 %W_addr_5_26_loc_assign_4, i32* %W_addr_42, align 8
  %tmp54 = xor i32 %W_addr_5_19_loc_assign_4, %W_addr_5_24_loc_assign_4
  %tmp55 = xor i32 %W_addr_5_13_loc_assign_4, %W_addr_5_11_loc_assign_4
  %tmp_30_26 = xor i32 %tmp55, %tmp54
  %W_addr_5_27_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_26)
  %W_addr_43 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 43
  store i32 %W_addr_5_27_loc_assign_4, i32* %W_addr_43, align 4
  %tmp56 = xor i32 %W_addr_5_20_loc_assign_4, %W_addr_5_25_loc_assign_4
  %tmp57 = xor i32 %W_addr_5_14_loc_assign_4, %W_addr_5_12_loc_assign_4
  %tmp_30_27 = xor i32 %tmp57, %tmp56
  %W_addr_5_28_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_27)
  %W_addr_44 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 44
  store i32 %W_addr_5_28_loc_assign_4, i32* %W_addr_44, align 16
  %tmp58 = xor i32 %W_addr_5_21_loc_assign_4, %W_addr_5_26_loc_assign_4
  %tmp59 = xor i32 %W_addr_5_15_loc_assign_4, %W_addr_5_13_loc_assign_4
  %tmp_30_28 = xor i32 %tmp59, %tmp58
  %W_addr_5_29_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_28)
  %W_addr_45 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 45
  store i32 %W_addr_5_29_loc_assign_4, i32* %W_addr_45, align 4
  %tmp60 = xor i32 %W_addr_5_22_loc_assign_4, %W_addr_5_27_loc_assign_4
  %tmp61 = xor i32 %W_addr_5_16_loc_assign_4, %W_addr_5_14_loc_assign_4
  %tmp_30_29 = xor i32 %tmp61, %tmp60
  %W_addr_5_30_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_29)
  %W_addr_46 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 46
  store i32 %W_addr_5_30_loc_assign_4, i32* %W_addr_46, align 8
  %tmp62 = xor i32 %W_addr_5_23_loc_assign_4, %W_addr_5_28_loc_assign_4
  %tmp63 = xor i32 %W_addr_5_17_loc_assign_4, %W_addr_5_15_loc_assign_4
  %tmp_30_30 = xor i32 %tmp63, %tmp62
  %W_addr_5_31_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_30)
  %W_addr_47 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 47
  store i32 %W_addr_5_31_loc_assign_4, i32* %W_addr_47, align 4
  %tmp64 = xor i32 %W_addr_5_24_loc_assign_4, %W_addr_5_29_loc_assign_4
  %tmp65 = xor i32 %W_addr_5_18_loc_assign_4, %W_addr_5_16_loc_assign_4
  %tmp_30_31 = xor i32 %tmp65, %tmp64
  %W_addr_5_32_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_31)
  %W_addr_48 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 48
  store i32 %W_addr_5_32_loc_assign_4, i32* %W_addr_48, align 16
  %tmp66 = xor i32 %W_addr_5_25_loc_assign_4, %W_addr_5_30_loc_assign_4
  %tmp67 = xor i32 %W_addr_5_19_loc_assign_4, %W_addr_5_17_loc_assign_4
  %tmp_30_32 = xor i32 %tmp67, %tmp66
  %W_addr_5_33_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_32)
  %W_addr_49 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 49
  store i32 %W_addr_5_33_loc_assign_4, i32* %W_addr_49, align 4
  %tmp68 = xor i32 %W_addr_5_26_loc_assign_4, %W_addr_5_31_loc_assign_4
  %tmp69 = xor i32 %W_addr_5_20_loc_assign_4, %W_addr_5_18_loc_assign_4
  %tmp_30_33 = xor i32 %tmp69, %tmp68
  %W_addr_5_34_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_33)
  %W_addr_50 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 50
  store i32 %W_addr_5_34_loc_assign_4, i32* %W_addr_50, align 8
  %tmp70 = xor i32 %W_addr_5_27_loc_assign_4, %W_addr_5_32_loc_assign_4
  %tmp71 = xor i32 %W_addr_5_21_loc_assign_4, %W_addr_5_19_loc_assign_4
  %tmp_30_34 = xor i32 %tmp71, %tmp70
  %W_addr_5_35_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_34)
  %W_addr_51 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 51
  store i32 %W_addr_5_35_loc_assign_4, i32* %W_addr_51, align 4
  %tmp72 = xor i32 %W_addr_5_28_loc_assign_4, %W_addr_5_33_loc_assign_4
  %tmp73 = xor i32 %W_addr_5_22_loc_assign_4, %W_addr_5_20_loc_assign_4
  %tmp_30_35 = xor i32 %tmp73, %tmp72
  %W_addr_5_36_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_35)
  %W_addr_52 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 52
  store i32 %W_addr_5_36_loc_assign_4, i32* %W_addr_52, align 16
  %tmp74 = xor i32 %W_addr_5_29_loc_assign_4, %W_addr_5_34_loc_assign_4
  %tmp75 = xor i32 %W_addr_5_23_loc_assign_4, %W_addr_5_21_loc_assign_4
  %tmp_30_36 = xor i32 %tmp75, %tmp74
  %W_addr_5_37_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_36)
  %W_addr_53 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 53
  store i32 %W_addr_5_37_loc_assign_4, i32* %W_addr_53, align 4
  %tmp76 = xor i32 %W_addr_5_30_loc_assign_4, %W_addr_5_35_loc_assign_4
  %tmp77 = xor i32 %W_addr_5_24_loc_assign_4, %W_addr_5_22_loc_assign_4
  %tmp_30_37 = xor i32 %tmp77, %tmp76
  %W_addr_5_38_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_37)
  %W_addr_54 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 54
  store i32 %W_addr_5_38_loc_assign_4, i32* %W_addr_54, align 8
  %tmp78 = xor i32 %W_addr_5_31_loc_assign_4, %W_addr_5_36_loc_assign_4
  %tmp79 = xor i32 %W_addr_5_25_loc_assign_4, %W_addr_5_23_loc_assign_4
  %tmp_30_38 = xor i32 %tmp79, %tmp78
  %W_addr_5_39_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_38)
  %W_addr_55 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 55
  store i32 %W_addr_5_39_loc_assign_4, i32* %W_addr_55, align 4
  %tmp80 = xor i32 %W_addr_5_32_loc_assign_4, %W_addr_5_37_loc_assign_4
  %tmp81 = xor i32 %W_addr_5_26_loc_assign_4, %W_addr_5_24_loc_assign_4
  %tmp_30_39 = xor i32 %tmp81, %tmp80
  %W_addr_5_40_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_39)
  %W_addr_56 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 56
  store i32 %W_addr_5_40_loc_assign_4, i32* %W_addr_56, align 16
  %tmp82 = xor i32 %W_addr_5_33_loc_assign_4, %W_addr_5_38_loc_assign_4
  %tmp83 = xor i32 %W_addr_5_27_loc_assign_4, %W_addr_5_25_loc_assign_4
  %tmp_30_40 = xor i32 %tmp83, %tmp82
  %W_addr_5_41_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_40)
  %W_addr_57 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 57
  store i32 %W_addr_5_41_loc_assign_4, i32* %W_addr_57, align 4
  %tmp84 = xor i32 %W_addr_5_34_loc_assign_4, %W_addr_5_39_loc_assign_4
  %tmp85 = xor i32 %W_addr_5_28_loc_assign_4, %W_addr_5_26_loc_assign_4
  %tmp_30_41 = xor i32 %tmp85, %tmp84
  %W_addr_5_42_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_41)
  %W_addr_58 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 58
  store i32 %W_addr_5_42_loc_assign_4, i32* %W_addr_58, align 8
  %tmp86 = xor i32 %W_addr_5_35_loc_assign_4, %W_addr_5_40_loc_assign_4
  %tmp87 = xor i32 %W_addr_5_29_loc_assign_4, %W_addr_5_27_loc_assign_4
  %tmp_30_42 = xor i32 %tmp87, %tmp86
  %W_addr_5_43_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_42)
  %W_addr_59 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 59
  store i32 %W_addr_5_43_loc_assign_4, i32* %W_addr_59, align 4
  %tmp88 = xor i32 %W_addr_5_36_loc_assign_4, %W_addr_5_41_loc_assign_4
  %tmp89 = xor i32 %W_addr_5_30_loc_assign_4, %W_addr_5_28_loc_assign_4
  %tmp_30_43 = xor i32 %tmp89, %tmp88
  %W_addr_5_44_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_43)
  %W_addr_60 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 60
  store i32 %W_addr_5_44_loc_assign_4, i32* %W_addr_60, align 16
  %tmp90 = xor i32 %W_addr_5_37_loc_assign_4, %W_addr_5_42_loc_assign_4
  %tmp91 = xor i32 %W_addr_5_31_loc_assign_4, %W_addr_5_29_loc_assign_4
  %tmp_30_44 = xor i32 %tmp91, %tmp90
  %W_addr_5_45_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_44)
  %W_addr_61 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 61
  store i32 %W_addr_5_45_loc_assign_4, i32* %W_addr_61, align 4
  %tmp92 = xor i32 %W_addr_5_38_loc_assign_4, %W_addr_5_43_loc_assign_4
  %tmp93 = xor i32 %W_addr_5_32_loc_assign_4, %W_addr_5_30_loc_assign_4
  %tmp_30_45 = xor i32 %tmp93, %tmp92
  %W_addr_5_46_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_45)
  %W_addr_62 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 62
  store i32 %W_addr_5_46_loc_assign_4, i32* %W_addr_62, align 8
  %tmp94 = xor i32 %W_addr_5_39_loc_assign_4, %W_addr_5_44_loc_assign_4
  %tmp95 = xor i32 %W_addr_5_33_loc_assign_4, %W_addr_5_31_loc_assign_4
  %tmp_30_46 = xor i32 %tmp95, %tmp94
  %W_addr_5_47_loc_assign_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_46)
  %W_addr_63 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 63
  store i32 %W_addr_5_47_loc_assign_4, i32* %W_addr_63, align 4
  %tmp96 = xor i32 %W_addr_5_40_loc_assign_4, %W_addr_5_45_loc_assign_4
  %tmp97 = xor i32 %W_addr_5_34_loc_assign_4, %W_addr_5_32_loc_assign_4
  %tmp_30_47 = xor i32 %tmp97, %tmp96
  %W_addr_5_48_loc_assign_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_47)
  %W_addr_64 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 64
  store i32 %W_addr_5_48_loc_assign_3, i32* %W_addr_64, align 16
  %tmp98 = xor i32 %W_addr_5_41_loc_assign_4, %W_addr_5_46_loc_assign_4
  %tmp99 = xor i32 %W_addr_5_35_loc_assign_4, %W_addr_5_33_loc_assign_4
  %tmp_30_48 = xor i32 %tmp99, %tmp98
  %W_addr_5_49_loc_assign_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_48)
  %W_addr_65 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 65
  store i32 %W_addr_5_49_loc_assign_3, i32* %W_addr_65, align 4
  %tmp100 = xor i32 %W_addr_5_42_loc_assign_4, %W_addr_5_47_loc_assign_4
  %tmp101 = xor i32 %W_addr_5_36_loc_assign_4, %W_addr_5_34_loc_assign_4
  %tmp_30_49 = xor i32 %tmp101, %tmp100
  %W_addr_5_50_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_49)
  %W_addr_66 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 66
  store i32 %W_addr_5_50_loc_assign_2, i32* %W_addr_66, align 8
  %tmp102 = xor i32 %W_addr_5_43_loc_assign_4, %W_addr_5_48_loc_assign_3
  %tmp103 = xor i32 %W_addr_5_37_loc_assign_4, %W_addr_5_35_loc_assign_4
  %tmp_30_50 = xor i32 %tmp103, %tmp102
  %W_addr_5_51_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_50)
  %W_addr_67 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 67
  store i32 %W_addr_5_51_loc_assign_2, i32* %W_addr_67, align 4
  %tmp104 = xor i32 %W_addr_5_44_loc_assign_4, %W_addr_5_49_loc_assign_3
  %tmp105 = xor i32 %W_addr_5_38_loc_assign_4, %W_addr_5_36_loc_assign_4
  %tmp_30_51 = xor i32 %tmp105, %tmp104
  %W_addr_5_52_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_51)
  %W_addr_68 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 68
  store i32 %W_addr_5_52_loc_assign_2, i32* %W_addr_68, align 16
  %tmp106 = xor i32 %W_addr_5_45_loc_assign_4, %W_addr_5_50_loc_assign_2
  %tmp107 = xor i32 %W_addr_5_39_loc_assign_4, %W_addr_5_37_loc_assign_4
  %tmp_30_52 = xor i32 %tmp107, %tmp106
  %W_addr_5_53_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_52)
  %W_addr_69 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 69
  store i32 %W_addr_5_53_loc_assign_2, i32* %W_addr_69, align 4
  %tmp108 = xor i32 %W_addr_5_46_loc_assign_4, %W_addr_5_51_loc_assign_2
  %tmp109 = xor i32 %W_addr_5_40_loc_assign_4, %W_addr_5_38_loc_assign_4
  %tmp_30_53 = xor i32 %tmp109, %tmp108
  %W_addr_5_54_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_53)
  %W_addr_70 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 70
  store i32 %W_addr_5_54_loc_assign_2, i32* %W_addr_70, align 8
  %tmp110 = xor i32 %W_addr_5_47_loc_assign_4, %W_addr_5_52_loc_assign_2
  %tmp111 = xor i32 %W_addr_5_41_loc_assign_4, %W_addr_5_39_loc_assign_4
  %tmp_30_54 = xor i32 %tmp111, %tmp110
  %W_addr_5_55_loc_assign_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_54)
  %W_addr_71 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 71
  store i32 %W_addr_5_55_loc_assign_2, i32* %W_addr_71, align 4
  %tmp112 = xor i32 %W_addr_5_48_loc_assign_3, %W_addr_5_53_loc_assign_2
  %tmp113 = xor i32 %W_addr_5_42_loc_assign_4, %W_addr_5_40_loc_assign_4
  %tmp_30_55 = xor i32 %tmp113, %tmp112
  %W_addr_5_56_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_55)
  %W_addr_72 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 72
  store i32 %W_addr_5_56_loc_assign_1, i32* %W_addr_72, align 16
  %tmp114 = xor i32 %W_addr_5_49_loc_assign_3, %W_addr_5_54_loc_assign_2
  %tmp115 = xor i32 %W_addr_5_43_loc_assign_4, %W_addr_5_41_loc_assign_4
  %tmp_30_56 = xor i32 %tmp115, %tmp114
  %W_addr_5_57_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_56)
  %W_addr_73 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 73
  store i32 %W_addr_5_57_loc_assign_1, i32* %W_addr_73, align 4
  %tmp116 = xor i32 %W_addr_5_50_loc_assign_2, %W_addr_5_55_loc_assign_2
  %tmp117 = xor i32 %W_addr_5_44_loc_assign_4, %W_addr_5_42_loc_assign_4
  %tmp_30_57 = xor i32 %tmp117, %tmp116
  %W_addr_5_58_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_57)
  %W_addr_74 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 74
  store i32 %W_addr_5_58_loc_assign_1, i32* %W_addr_74, align 8
  %tmp118 = xor i32 %W_addr_5_51_loc_assign_2, %W_addr_5_56_loc_assign_1
  %tmp119 = xor i32 %W_addr_5_45_loc_assign_4, %W_addr_5_43_loc_assign_4
  %tmp_30_58 = xor i32 %tmp119, %tmp118
  %W_addr_5_59_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_58)
  %W_addr_75 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 75
  store i32 %W_addr_5_59_loc_assign_1, i32* %W_addr_75, align 4
  %tmp120 = xor i32 %W_addr_5_52_loc_assign_2, %W_addr_5_57_loc_assign_1
  %tmp121 = xor i32 %W_addr_5_46_loc_assign_4, %W_addr_5_44_loc_assign_4
  %tmp_30_59 = xor i32 %tmp121, %tmp120
  %W_addr_5_60_loc_assign_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_59)
  %W_addr_76 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 76
  store i32 %W_addr_5_60_loc_assign_1, i32* %W_addr_76, align 16
  %tmp122 = xor i32 %W_addr_5_53_loc_assign_2, %W_addr_5_58_loc_assign_1
  %tmp123 = xor i32 %W_addr_5_47_loc_assign_4, %W_addr_5_45_loc_assign_4
  %tmp_30_60 = xor i32 %tmp123, %tmp122
  %tmp_31_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_60)
  %W_addr_77 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 77
  store i32 %tmp_31_s, i32* %W_addr_77, align 4
  %tmp124 = xor i32 %W_addr_5_54_loc_assign_2, %W_addr_5_59_loc_assign_1
  %tmp125 = xor i32 %W_addr_5_48_loc_assign_3, %W_addr_5_46_loc_assign_4
  %tmp_30_61 = xor i32 %tmp125, %tmp124
  %tmp_31_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_61)
  %W_addr_78 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 78
  store i32 %tmp_31_1, i32* %W_addr_78, align 8
  %tmp126 = xor i32 %W_addr_5_55_loc_assign_2, %W_addr_5_60_loc_assign_1
  %tmp127 = xor i32 %W_addr_5_49_loc_assign_3, %W_addr_5_47_loc_assign_4
  %tmp_30_62 = xor i32 %tmp127, %tmp126
  %tmp_31_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_30_62)
  %W_addr_79 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 79
  store i32 %tmp_31_2, i32* %W_addr_79, align 4
  %context_Intermediate_Hash_addr = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 0
  %A = load i32* %context_Intermediate_Hash_addr, align 4
  %context_Intermediate_Hash_addr_1 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 1
  %B = load i32* %context_Intermediate_Hash_addr_1, align 4
  %context_Intermediate_Hash_addr_2 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 2
  %C = load i32* %context_Intermediate_Hash_addr_2, align 4
  %context_Intermediate_Hash_addr_3 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 3
  %D = load i32* %context_Intermediate_Hash_addr_3, align 4
  %context_Intermediate_Hash_addr_4 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 4
  %E = load i32* %context_Intermediate_Hash_addr_4, align 4
  %tmp_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A)
  %tmp_3 = and i32 %C, %B
  %tmp_4 = xor i32 %B, -1
  %tmp_5 = and i32 %D, %tmp_4
  %tmp_6 = or i32 %tmp_5, %tmp_3
  %tmp128 = add i32 %E, %tmp_2
  %tmp129 = add i32 %tmp_s, 1518500249
  %tmp130 = add i32 %tmp129, %tmp_6
  %temp_1 = add i32 %tmp130, %tmp128
  %call_ret1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A, i32 %B, i32 %C, i32 %D, i32 %temp_1)
  %call_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 0
  %A_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 1
  %B_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 2
  %C_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 3
  %D_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 4
  %tmp_33_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret)
  %tmp_34_1 = and i32 %C_ret, %B_ret
  %tmp_35_1 = xor i32 %B_ret, -1
  %tmp_36_1 = and i32 %D_ret, %tmp_35_1
  %tmp_37_1 = or i32 %tmp_36_1, %tmp_34_1
  %tmp131 = add i32 %tmp_33_1, %call_ret2
  %tmp132 = add i32 %W_addr_157_loc_assign_1, 1518500249
  %tmp133 = add i32 %tmp132, %tmp_37_1
  %temp_1_1 = add i32 %tmp133, %tmp131
  %call_ret47_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret, i32 %B_ret, i32 %C_ret, i32 %D_ret, i32 %temp_1_1)
  %call_ret23_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 0
  %A_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 1
  %B_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 2
  %C_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 3
  %D_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 4
  %tmp_33_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_1)
  %tmp_34_2 = and i32 %C_ret_1, %B_ret_1
  %tmp_35_2 = xor i32 %B_ret_1, -1
  %tmp_36_2 = and i32 %D_ret_1, %tmp_35_2
  %tmp_37_2 = or i32 %tmp_36_2, %tmp_34_2
  %tmp134 = add i32 %tmp_33_2, %call_ret23_1
  %tmp135 = add i32 %W_addr_262_loc_assign_1, 1518500249
  %tmp136 = add i32 %tmp135, %tmp_37_2
  %temp_1_2 = add i32 %tmp136, %tmp134
  %call_ret47_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_1, i32 %B_ret_1, i32 %C_ret_1, i32 %D_ret_1, i32 %temp_1_2)
  %call_ret23_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 0
  %A_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 1
  %B_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 2
  %C_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 3
  %D_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 4
  %tmp_33_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_2)
  %tmp_34_3 = and i32 %C_ret_2, %B_ret_2
  %tmp_35_3 = xor i32 %B_ret_2, -1
  %tmp_36_3 = and i32 %D_ret_2, %tmp_35_3
  %tmp_37_3 = or i32 %tmp_36_3, %tmp_34_3
  %tmp137 = add i32 %tmp_33_3, %call_ret23_2
  %tmp138 = add i32 %W_addr_367_loc_assign_2, 1518500249
  %tmp139 = add i32 %tmp138, %tmp_37_3
  %temp_1_3 = add i32 %tmp139, %tmp137
  %call_ret47_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_2, i32 %B_ret_2, i32 %C_ret_2, i32 %D_ret_2, i32 %temp_1_3)
  %call_ret23_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 0
  %A_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 1
  %B_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 2
  %C_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 3
  %D_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 4
  %tmp_33_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_3)
  %tmp_34_4 = and i32 %C_ret_3, %B_ret_3
  %tmp_35_4 = xor i32 %B_ret_3, -1
  %tmp_36_4 = and i32 %D_ret_3, %tmp_35_4
  %tmp_37_4 = or i32 %tmp_36_4, %tmp_34_4
  %tmp140 = add i32 %tmp_33_4, %call_ret23_3
  %tmp141 = add i32 %W_addr_470_loc_assign_2, 1518500249
  %tmp142 = add i32 %tmp141, %tmp_37_4
  %temp_1_4 = add i32 %tmp142, %tmp140
  %call_ret47_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_3, i32 %B_ret_3, i32 %C_ret_3, i32 %D_ret_3, i32 %temp_1_4)
  %call_ret23_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 0
  %A_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 1
  %B_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 2
  %C_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 3
  %D_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 4
  %tmp_33_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_4)
  %tmp_34_5 = and i32 %C_ret_4, %B_ret_4
  %tmp_35_5 = xor i32 %B_ret_4, -1
  %tmp_36_5 = and i32 %D_ret_4, %tmp_35_5
  %tmp_37_5 = or i32 %tmp_36_5, %tmp_34_5
  %tmp143 = add i32 %tmp_33_5, %call_ret23_4
  %tmp144 = add i32 %W_addr_573_loc_assign_2, 1518500249
  %tmp145 = add i32 %tmp144, %tmp_37_5
  %temp_1_5 = add i32 %tmp145, %tmp143
  %call_ret47_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_4, i32 %B_ret_4, i32 %C_ret_4, i32 %D_ret_4, i32 %temp_1_5)
  %call_ret23_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 0
  %A_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 1
  %B_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 2
  %C_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 3
  %D_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 4
  %tmp_33_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_5)
  %tmp_34_6 = and i32 %C_ret_5, %B_ret_5
  %tmp_35_6 = xor i32 %B_ret_5, -1
  %tmp_36_6 = and i32 %D_ret_5, %tmp_35_6
  %tmp_37_6 = or i32 %tmp_36_6, %tmp_34_6
  %tmp146 = add i32 %tmp_33_6, %call_ret23_5
  %tmp147 = add i32 %W_addr_676_loc_assign_2, 1518500249
  %tmp148 = add i32 %tmp147, %tmp_37_6
  %temp_1_6 = add i32 %tmp148, %tmp146
  %call_ret47_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_5, i32 %B_ret_5, i32 %C_ret_5, i32 %D_ret_5, i32 %temp_1_6)
  %call_ret23_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 0
  %A_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 1
  %B_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 2
  %C_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 3
  %D_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 4
  %tmp_33_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_6)
  %tmp_34_7 = and i32 %C_ret_6, %B_ret_6
  %tmp_35_7 = xor i32 %B_ret_6, -1
  %tmp_36_7 = and i32 %D_ret_6, %tmp_35_7
  %tmp_37_7 = or i32 %tmp_36_7, %tmp_34_7
  %tmp149 = add i32 %tmp_33_7, %call_ret23_6
  %tmp150 = add i32 %W_addr_779_loc_assign_2, 1518500249
  %tmp151 = add i32 %tmp150, %tmp_37_7
  %temp_1_7 = add i32 %tmp151, %tmp149
  %call_ret47_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_6, i32 %B_ret_6, i32 %C_ret_6, i32 %D_ret_6, i32 %temp_1_7)
  %call_ret23_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 0
  %A_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 1
  %B_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 2
  %C_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 3
  %D_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 4
  %tmp_33_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_7)
  %tmp_34_8 = and i32 %C_ret_7, %B_ret_7
  %tmp_35_8 = xor i32 %B_ret_7, -1
  %tmp_36_8 = and i32 %D_ret_7, %tmp_35_8
  %tmp_37_8 = or i32 %tmp_36_8, %tmp_34_8
  %tmp152 = add i32 %tmp_33_8, %call_ret23_7
  %tmp153 = add i32 %W_addr_882_loc_assign_2, 1518500249
  %tmp154 = add i32 %tmp153, %tmp_37_8
  %temp_1_8 = add i32 %tmp154, %tmp152
  %call_ret47_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_7, i32 %B_ret_7, i32 %C_ret_7, i32 %D_ret_7, i32 %temp_1_8)
  %call_ret23_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 0
  %A_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 1
  %B_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 2
  %C_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 3
  %D_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 4
  %tmp_33_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_8)
  %tmp_34_9 = and i32 %C_ret_8, %B_ret_8
  %tmp_35_9 = xor i32 %B_ret_8, -1
  %tmp_36_9 = and i32 %D_ret_8, %tmp_35_9
  %tmp_37_9 = or i32 %tmp_36_9, %tmp_34_9
  %tmp155 = add i32 %tmp_33_9, %call_ret23_8
  %tmp156 = add i32 %W_addr_985_loc_assign_3, 1518500249
  %tmp157 = add i32 %tmp156, %tmp_37_9
  %temp_1_9 = add i32 %tmp157, %tmp155
  %call_ret47_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_8, i32 %B_ret_8, i32 %C_ret_8, i32 %D_ret_8, i32 %temp_1_9)
  %call_ret23_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 0
  %A_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 1
  %B_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 2
  %C_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 3
  %D_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 4
  %tmp_33_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_9)
  %tmp_34_s = and i32 %C_ret_9, %B_ret_9
  %tmp_35_s = xor i32 %B_ret_9, -1
  %tmp_36_s = and i32 %D_ret_9, %tmp_35_s
  %tmp_37_s = or i32 %tmp_36_s, %tmp_34_s
  %tmp158 = add i32 %tmp_33_s, %call_ret23_9
  %tmp159 = add i32 %W_addr_10_loc_assign_3, 1518500249
  %tmp160 = add i32 %tmp159, %tmp_37_s
  %temp_1_s = add i32 %tmp160, %tmp158
  %call_ret47_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_9, i32 %B_ret_9, i32 %C_ret_9, i32 %D_ret_9, i32 %temp_1_s)
  %call_ret23_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 0
  %A_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 1
  %B_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 2
  %C_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 3
  %D_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 4
  %tmp_33_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_s)
  %tmp_34_10 = and i32 %C_ret_s, %B_ret_s
  %tmp_35_10 = xor i32 %B_ret_s, -1
  %tmp_36_10 = and i32 %D_ret_s, %tmp_35_10
  %tmp_37_10 = or i32 %tmp_36_10, %tmp_34_10
  %tmp161 = add i32 %tmp_33_10, %call_ret23_s
  %tmp162 = add i32 %W_addr_11_loc_assign_3, 1518500249
  %tmp163 = add i32 %tmp162, %tmp_37_10
  %temp_1_10 = add i32 %tmp163, %tmp161
  %call_ret47_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_s, i32 %B_ret_s, i32 %C_ret_s, i32 %D_ret_s, i32 %temp_1_10)
  %call_ret23_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 0
  %A_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 1
  %B_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 2
  %C_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 3
  %D_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 4
  %tmp_33_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_10)
  %tmp_34_11 = and i32 %C_ret_10, %B_ret_10
  %tmp_35_11 = xor i32 %B_ret_10, -1
  %tmp_36_11 = and i32 %D_ret_10, %tmp_35_11
  %tmp_37_11 = or i32 %tmp_36_11, %tmp_34_11
  %tmp164 = add i32 %tmp_33_11, %call_ret23_10
  %tmp165 = add i32 %W_addr_12_loc_assign_3, 1518500249
  %tmp166 = add i32 %tmp165, %tmp_37_11
  %temp_1_11 = add i32 %tmp166, %tmp164
  %call_ret47_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_10, i32 %B_ret_10, i32 %C_ret_10, i32 %D_ret_10, i32 %temp_1_11)
  %call_ret23_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 0
  %A_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 1
  %B_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 2
  %C_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 3
  %D_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 4
  %tmp_33_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_11)
  %tmp_34_12 = and i32 %C_ret_11, %B_ret_11
  %tmp_35_12 = xor i32 %B_ret_11, -1
  %tmp_36_12 = and i32 %D_ret_11, %tmp_35_12
  %tmp_37_12 = or i32 %tmp_36_12, %tmp_34_12
  %tmp167 = add i32 %tmp_33_12, %call_ret23_11
  %tmp168 = add i32 %W_addr_13_loc_assign_3, 1518500249
  %tmp169 = add i32 %tmp168, %tmp_37_12
  %temp_1_12 = add i32 %tmp169, %tmp167
  %call_ret47_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_11, i32 %B_ret_11, i32 %C_ret_11, i32 %D_ret_11, i32 %temp_1_12)
  %call_ret23_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 0
  %A_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 1
  %B_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 2
  %C_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 3
  %D_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 4
  %tmp_33_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_12)
  %tmp_34_13 = and i32 %C_ret_12, %B_ret_12
  %tmp_35_13 = xor i32 %B_ret_12, -1
  %tmp_36_13 = and i32 %D_ret_12, %tmp_35_13
  %tmp_37_13 = or i32 %tmp_36_13, %tmp_34_13
  %tmp170 = add i32 %tmp_33_13, %call_ret23_12
  %tmp171 = add i32 %W_addr_14_loc_assign_4, 1518500249
  %tmp172 = add i32 %tmp171, %tmp_37_13
  %temp_1_13 = add i32 %tmp172, %tmp170
  %call_ret47_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_12, i32 %B_ret_12, i32 %C_ret_12, i32 %D_ret_12, i32 %temp_1_13)
  %call_ret23_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 0
  %A_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 1
  %B_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 2
  %C_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 3
  %D_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 4
  %tmp_33_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_13)
  %tmp_34_14 = and i32 %C_ret_13, %B_ret_13
  %tmp_35_14 = xor i32 %B_ret_13, -1
  %tmp_36_14 = and i32 %D_ret_13, %tmp_35_14
  %tmp_37_14 = or i32 %tmp_36_14, %tmp_34_14
  %tmp173 = add i32 %tmp_33_14, %call_ret23_13
  %tmp174 = add i32 %W_addr_15_loc_assign_4, 1518500249
  %tmp175 = add i32 %tmp174, %tmp_37_14
  %temp_1_14 = add i32 %tmp175, %tmp173
  %call_ret47_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_13, i32 %B_ret_13, i32 %C_ret_13, i32 %D_ret_13, i32 %temp_1_14)
  %call_ret23_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 0
  %A_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 1
  %B_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 2
  %C_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 3
  %D_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 4
  %tmp_33_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_14)
  %tmp_34_15 = and i32 %C_ret_14, %B_ret_14
  %tmp_35_15 = xor i32 %B_ret_14, -1
  %tmp_36_15 = and i32 %D_ret_14, %tmp_35_15
  %tmp_37_15 = or i32 %tmp_36_15, %tmp_34_15
  %tmp176 = add i32 %tmp_33_15, %call_ret23_14
  %tmp177 = add i32 %W_addr_5_0_loc_assign_4, 1518500249
  %tmp178 = add i32 %tmp177, %tmp_37_15
  %temp_1_15 = add i32 %tmp178, %tmp176
  %call_ret47_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_14, i32 %B_ret_14, i32 %C_ret_14, i32 %D_ret_14, i32 %temp_1_15)
  %call_ret23_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 0
  %A_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 1
  %B_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 2
  %C_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 3
  %D_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 4
  %tmp_33_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_15)
  %tmp_34_16 = and i32 %C_ret_15, %B_ret_15
  %tmp_35_16 = xor i32 %B_ret_15, -1
  %tmp_36_16 = and i32 %D_ret_15, %tmp_35_16
  %tmp_37_16 = or i32 %tmp_36_16, %tmp_34_16
  %tmp179 = add i32 %tmp_33_16, %call_ret23_15
  %tmp180 = add i32 %W_addr_5_1_loc_assign_4, 1518500249
  %tmp181 = add i32 %tmp180, %tmp_37_16
  %temp_1_16 = add i32 %tmp181, %tmp179
  %call_ret47_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_15, i32 %B_ret_15, i32 %C_ret_15, i32 %D_ret_15, i32 %temp_1_16)
  %call_ret23_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 0
  %A_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 1
  %B_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 2
  %C_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 3
  %D_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 4
  %tmp_33_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_16)
  %tmp_34_17 = and i32 %C_ret_16, %B_ret_16
  %tmp_35_17 = xor i32 %B_ret_16, -1
  %tmp_36_17 = and i32 %D_ret_16, %tmp_35_17
  %tmp_37_17 = or i32 %tmp_36_17, %tmp_34_17
  %tmp182 = add i32 %tmp_33_17, %call_ret23_16
  %tmp183 = add i32 %W_addr_5_2_loc_assign_4, 1518500249
  %tmp184 = add i32 %tmp183, %tmp_37_17
  %temp_1_17 = add i32 %tmp184, %tmp182
  %call_ret47_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_16, i32 %B_ret_16, i32 %C_ret_16, i32 %D_ret_16, i32 %temp_1_17)
  %call_ret23_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 0
  %A_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 1
  %B_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 2
  %C_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 3
  %D_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 4
  %tmp_33_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_17)
  %tmp_34_18 = and i32 %C_ret_17, %B_ret_17
  %tmp_35_18 = xor i32 %B_ret_17, -1
  %tmp_36_18 = and i32 %D_ret_17, %tmp_35_18
  %tmp_37_18 = or i32 %tmp_36_18, %tmp_34_18
  %tmp185 = add i32 %tmp_33_18, %call_ret23_17
  %tmp186 = add i32 %W_addr_5_3_loc_assign_4, 1518500249
  %tmp187 = add i32 %tmp186, %tmp_37_18
  %temp_1_18 = add i32 %tmp187, %tmp185
  %call_ret47_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_17, i32 %B_ret_17, i32 %C_ret_17, i32 %D_ret_17, i32 %temp_1_18)
  %call_ret23_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 0
  %A_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 1
  %B_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 2
  %C_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 3
  %D_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 4
  %tmp_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret_18)
  %tmp188 = xor i32 %B_ret_18, %D_ret_18
  %tmp_8 = xor i32 %tmp188, %C_ret_18
  %tmp189 = add i32 %tmp_7, %tmp_8
  %tmp190 = add i32 %W_addr_5_4_loc_assign_4, 1859775393
  %tmp191 = add i32 %tmp190, %call_ret23_18
  %temp_2 = add i32 %tmp191, %tmp189
  %call_ret3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_18, i32 %B_ret_18, i32 %C_ret_18, i32 %D_ret_18, i32 %temp_2)
  %call_ret4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 0
  %A_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 1
  %B_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 2
  %C_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 3
  %D_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 4
  %tmp_42_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret1)
  %tmp192 = xor i32 %B_ret1, %D_ret1
  %tmp_44_1 = xor i32 %tmp192, %C_ret1
  %tmp193 = add i32 %tmp_42_1, %tmp_44_1
  %tmp194 = add i32 %W_addr_5_5_loc_assign_4, 1859775393
  %tmp195 = add i32 %tmp194, %call_ret4
  %temp_2_1 = add i32 %tmp195, %tmp193
  %call_ret46_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret1, i32 %B_ret1, i32 %C_ret1, i32 %D_ret1, i32 %temp_2_1)
  %call_ret17_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 0
  %A_ret27_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 1
  %B_ret28_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 2
  %C_ret29_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 3
  %D_ret30_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 4
  %tmp_42_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_1)
  %tmp196 = xor i32 %B_ret28_1, %D_ret30_1
  %tmp_44_2 = xor i32 %tmp196, %C_ret29_1
  %tmp197 = add i32 %tmp_42_2, %tmp_44_2
  %tmp198 = add i32 %W_addr_5_6_loc_assign_4, 1859775393
  %tmp199 = add i32 %tmp198, %call_ret17_1
  %temp_2_2 = add i32 %tmp199, %tmp197
  %call_ret46_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_1, i32 %B_ret28_1, i32 %C_ret29_1, i32 %D_ret30_1, i32 %temp_2_2)
  %call_ret17_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 0
  %A_ret27_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 1
  %B_ret28_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 2
  %C_ret29_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 3
  %D_ret30_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 4
  %tmp_42_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_2)
  %tmp200 = xor i32 %B_ret28_2, %D_ret30_2
  %tmp_44_3 = xor i32 %tmp200, %C_ret29_2
  %tmp201 = add i32 %tmp_42_3, %tmp_44_3
  %tmp202 = add i32 %W_addr_5_7_loc_assign_4, 1859775393
  %tmp203 = add i32 %tmp202, %call_ret17_2
  %temp_2_3 = add i32 %tmp203, %tmp201
  %call_ret46_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_2, i32 %B_ret28_2, i32 %C_ret29_2, i32 %D_ret30_2, i32 %temp_2_3)
  %call_ret17_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 0
  %A_ret27_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 1
  %B_ret28_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 2
  %C_ret29_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 3
  %D_ret30_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 4
  %tmp_42_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_3)
  %tmp204 = xor i32 %B_ret28_3, %D_ret30_3
  %tmp_44_4 = xor i32 %tmp204, %C_ret29_3
  %tmp205 = add i32 %tmp_42_4, %tmp_44_4
  %tmp206 = add i32 %W_addr_5_8_loc_assign_4, 1859775393
  %tmp207 = add i32 %tmp206, %call_ret17_3
  %temp_2_4 = add i32 %tmp207, %tmp205
  %call_ret46_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_3, i32 %B_ret28_3, i32 %C_ret29_3, i32 %D_ret30_3, i32 %temp_2_4)
  %call_ret17_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 0
  %A_ret27_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 1
  %B_ret28_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 2
  %C_ret29_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 3
  %D_ret30_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 4
  %tmp_42_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_4)
  %tmp208 = xor i32 %B_ret28_4, %D_ret30_4
  %tmp_44_5 = xor i32 %tmp208, %C_ret29_4
  %tmp209 = add i32 %tmp_42_5, %tmp_44_5
  %tmp210 = add i32 %W_addr_5_9_loc_assign_4, 1859775393
  %tmp211 = add i32 %tmp210, %call_ret17_4
  %temp_2_5 = add i32 %tmp211, %tmp209
  %call_ret46_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_4, i32 %B_ret28_4, i32 %C_ret29_4, i32 %D_ret30_4, i32 %temp_2_5)
  %call_ret17_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 0
  %A_ret27_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 1
  %B_ret28_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 2
  %C_ret29_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 3
  %D_ret30_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 4
  %tmp_42_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_5)
  %tmp212 = xor i32 %B_ret28_5, %D_ret30_5
  %tmp_44_6 = xor i32 %tmp212, %C_ret29_5
  %tmp213 = add i32 %tmp_42_6, %tmp_44_6
  %tmp214 = add i32 %W_addr_5_10_loc_assign_4, 1859775393
  %tmp215 = add i32 %tmp214, %call_ret17_5
  %temp_2_6 = add i32 %tmp215, %tmp213
  %call_ret46_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_5, i32 %B_ret28_5, i32 %C_ret29_5, i32 %D_ret30_5, i32 %temp_2_6)
  %call_ret17_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 0
  %A_ret27_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 1
  %B_ret28_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 2
  %C_ret29_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 3
  %D_ret30_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 4
  %tmp_42_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_6)
  %tmp216 = xor i32 %B_ret28_6, %D_ret30_6
  %tmp_44_7 = xor i32 %tmp216, %C_ret29_6
  %tmp217 = add i32 %tmp_42_7, %tmp_44_7
  %tmp218 = add i32 %W_addr_5_11_loc_assign_4, 1859775393
  %tmp219 = add i32 %tmp218, %call_ret17_6
  %temp_2_7 = add i32 %tmp219, %tmp217
  %call_ret46_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_6, i32 %B_ret28_6, i32 %C_ret29_6, i32 %D_ret30_6, i32 %temp_2_7)
  %call_ret17_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 0
  %A_ret27_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 1
  %B_ret28_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 2
  %C_ret29_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 3
  %D_ret30_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 4
  %tmp_42_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_7)
  %tmp220 = xor i32 %B_ret28_7, %D_ret30_7
  %tmp_44_8 = xor i32 %tmp220, %C_ret29_7
  %tmp221 = add i32 %tmp_42_8, %tmp_44_8
  %tmp222 = add i32 %W_addr_5_12_loc_assign_4, 1859775393
  %tmp223 = add i32 %tmp222, %call_ret17_7
  %temp_2_8 = add i32 %tmp223, %tmp221
  %call_ret46_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_7, i32 %B_ret28_7, i32 %C_ret29_7, i32 %D_ret30_7, i32 %temp_2_8)
  %call_ret17_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 0
  %A_ret27_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 1
  %B_ret28_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 2
  %C_ret29_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 3
  %D_ret30_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 4
  %tmp_42_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_8)
  %tmp224 = xor i32 %B_ret28_8, %D_ret30_8
  %tmp_44_9 = xor i32 %tmp224, %C_ret29_8
  %tmp225 = add i32 %tmp_42_9, %tmp_44_9
  %tmp226 = add i32 %W_addr_5_13_loc_assign_4, 1859775393
  %tmp227 = add i32 %tmp226, %call_ret17_8
  %temp_2_9 = add i32 %tmp227, %tmp225
  %call_ret46_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_8, i32 %B_ret28_8, i32 %C_ret29_8, i32 %D_ret30_8, i32 %temp_2_9)
  %call_ret17_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 0
  %A_ret27_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 1
  %B_ret28_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 2
  %C_ret29_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 3
  %D_ret30_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 4
  %tmp_42_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_9)
  %tmp228 = xor i32 %B_ret28_9, %D_ret30_9
  %tmp_44_s = xor i32 %tmp228, %C_ret29_9
  %tmp229 = add i32 %tmp_42_s, %tmp_44_s
  %tmp230 = add i32 %W_addr_5_14_loc_assign_4, 1859775393
  %tmp231 = add i32 %tmp230, %call_ret17_9
  %temp_2_s = add i32 %tmp231, %tmp229
  %call_ret46_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_9, i32 %B_ret28_9, i32 %C_ret29_9, i32 %D_ret30_9, i32 %temp_2_s)
  %call_ret17_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 0
  %A_ret27_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 1
  %B_ret28_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 2
  %C_ret29_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 3
  %D_ret30_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 4
  %tmp_42_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_s)
  %tmp232 = xor i32 %B_ret28_s, %D_ret30_s
  %tmp_44_10 = xor i32 %tmp232, %C_ret29_s
  %tmp233 = add i32 %tmp_42_10, %tmp_44_10
  %tmp234 = add i32 %W_addr_5_15_loc_assign_4, 1859775393
  %tmp235 = add i32 %tmp234, %call_ret17_s
  %temp_2_10 = add i32 %tmp235, %tmp233
  %call_ret46_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_s, i32 %B_ret28_s, i32 %C_ret29_s, i32 %D_ret30_s, i32 %temp_2_10)
  %call_ret17_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 0
  %A_ret27_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 1
  %B_ret28_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 2
  %C_ret29_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 3
  %D_ret30_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 4
  %tmp_42_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_10)
  %tmp236 = xor i32 %B_ret28_10, %D_ret30_10
  %tmp_44_11 = xor i32 %tmp236, %C_ret29_10
  %tmp237 = add i32 %tmp_42_11, %tmp_44_11
  %tmp238 = add i32 %W_addr_5_16_loc_assign_4, 1859775393
  %tmp239 = add i32 %tmp238, %call_ret17_10
  %temp_2_11 = add i32 %tmp239, %tmp237
  %call_ret46_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_10, i32 %B_ret28_10, i32 %C_ret29_10, i32 %D_ret30_10, i32 %temp_2_11)
  %call_ret17_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 0
  %A_ret27_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 1
  %B_ret28_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 2
  %C_ret29_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 3
  %D_ret30_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 4
  %tmp_42_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_11)
  %tmp240 = xor i32 %B_ret28_11, %D_ret30_11
  %tmp_44_12 = xor i32 %tmp240, %C_ret29_11
  %tmp241 = add i32 %tmp_42_12, %tmp_44_12
  %tmp242 = add i32 %W_addr_5_17_loc_assign_4, 1859775393
  %tmp243 = add i32 %tmp242, %call_ret17_11
  %temp_2_12 = add i32 %tmp243, %tmp241
  %call_ret46_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_11, i32 %B_ret28_11, i32 %C_ret29_11, i32 %D_ret30_11, i32 %temp_2_12)
  %call_ret17_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 0
  %A_ret27_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 1
  %B_ret28_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 2
  %C_ret29_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 3
  %D_ret30_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 4
  %tmp_42_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_12)
  %tmp244 = xor i32 %B_ret28_12, %D_ret30_12
  %tmp_44_13 = xor i32 %tmp244, %C_ret29_12
  %tmp245 = add i32 %tmp_42_13, %tmp_44_13
  %tmp246 = add i32 %W_addr_5_18_loc_assign_4, 1859775393
  %tmp247 = add i32 %tmp246, %call_ret17_12
  %temp_2_13 = add i32 %tmp247, %tmp245
  %call_ret46_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_12, i32 %B_ret28_12, i32 %C_ret29_12, i32 %D_ret30_12, i32 %temp_2_13)
  %call_ret17_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 0
  %A_ret27_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 1
  %B_ret28_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 2
  %C_ret29_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 3
  %D_ret30_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 4
  %tmp_42_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_13)
  %tmp248 = xor i32 %B_ret28_13, %D_ret30_13
  %tmp_44_14 = xor i32 %tmp248, %C_ret29_13
  %tmp249 = add i32 %tmp_42_14, %tmp_44_14
  %tmp250 = add i32 %W_addr_5_19_loc_assign_4, 1859775393
  %tmp251 = add i32 %tmp250, %call_ret17_13
  %temp_2_14 = add i32 %tmp251, %tmp249
  %call_ret46_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_13, i32 %B_ret28_13, i32 %C_ret29_13, i32 %D_ret30_13, i32 %temp_2_14)
  %call_ret17_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 0
  %A_ret27_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 1
  %B_ret28_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 2
  %C_ret29_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 3
  %D_ret30_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 4
  %tmp_42_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_14)
  %tmp252 = xor i32 %B_ret28_14, %D_ret30_14
  %tmp_44_15 = xor i32 %tmp252, %C_ret29_14
  %tmp253 = add i32 %tmp_42_15, %tmp_44_15
  %tmp254 = add i32 %W_addr_5_20_loc_assign_4, 1859775393
  %tmp255 = add i32 %tmp254, %call_ret17_14
  %temp_2_15 = add i32 %tmp255, %tmp253
  %call_ret46_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_14, i32 %B_ret28_14, i32 %C_ret29_14, i32 %D_ret30_14, i32 %temp_2_15)
  %call_ret17_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 0
  %A_ret27_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 1
  %B_ret28_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 2
  %C_ret29_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 3
  %D_ret30_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 4
  %tmp_42_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_15)
  %tmp256 = xor i32 %B_ret28_15, %D_ret30_15
  %tmp_44_16 = xor i32 %tmp256, %C_ret29_15
  %tmp257 = add i32 %tmp_42_16, %tmp_44_16
  %tmp258 = add i32 %W_addr_5_21_loc_assign_4, 1859775393
  %tmp259 = add i32 %tmp258, %call_ret17_15
  %temp_2_16 = add i32 %tmp259, %tmp257
  %call_ret46_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_15, i32 %B_ret28_15, i32 %C_ret29_15, i32 %D_ret30_15, i32 %temp_2_16)
  %call_ret17_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 0
  %A_ret27_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 1
  %B_ret28_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 2
  %C_ret29_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 3
  %D_ret30_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 4
  %tmp_42_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_16)
  %tmp260 = xor i32 %B_ret28_16, %D_ret30_16
  %tmp_44_17 = xor i32 %tmp260, %C_ret29_16
  %tmp261 = add i32 %tmp_42_17, %tmp_44_17
  %tmp262 = add i32 %W_addr_5_22_loc_assign_4, 1859775393
  %tmp263 = add i32 %tmp262, %call_ret17_16
  %temp_2_17 = add i32 %tmp263, %tmp261
  %call_ret46_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_16, i32 %B_ret28_16, i32 %C_ret29_16, i32 %D_ret30_16, i32 %temp_2_17)
  %call_ret17_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 0
  %A_ret27_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 1
  %B_ret28_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 2
  %C_ret29_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 3
  %D_ret30_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 4
  %tmp_42_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_17)
  %tmp264 = xor i32 %B_ret28_17, %D_ret30_17
  %tmp_44_18 = xor i32 %tmp264, %C_ret29_17
  %tmp265 = add i32 %tmp_42_18, %tmp_44_18
  %tmp266 = add i32 %W_addr_5_23_loc_assign_4, 1859775393
  %tmp267 = add i32 %tmp266, %call_ret17_17
  %temp_2_18 = add i32 %tmp267, %tmp265
  %call_ret46_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_17, i32 %B_ret28_17, i32 %C_ret29_17, i32 %D_ret30_17, i32 %temp_2_18)
  %call_ret17_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 0
  %A_ret27_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 1
  %B_ret28_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 2
  %C_ret29_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 3
  %D_ret30_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 4
  %tmp_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret27_18)
  %tmp_10 = or i32 %D_ret30_18, %C_ret29_18
  %tmp_11 = and i32 %tmp_10, %B_ret28_18
  %tmp_12 = and i32 %D_ret30_18, %C_ret29_18
  %tmp_13 = or i32 %tmp_11, %tmp_12
  %tmp268 = add i32 %tmp_9, -1894007588
  %tmp269 = add i32 %W_addr_5_24_loc_assign_4, %tmp_13
  %tmp270 = add i32 %tmp269, %call_ret17_18
  %temp_3 = add i32 %tmp270, %tmp268
  %call_ret5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_18, i32 %B_ret28_18, i32 %C_ret29_18, i32 %D_ret30_18, i32 %temp_3)
  %call_ret6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 0
  %A_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 1
  %B_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 2
  %C_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 3
  %D_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 4
  %tmp_49_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret2)
  %tmp_50_1 = or i32 %D_ret2, %C_ret2
  %tmp_51_1 = and i32 %tmp_50_1, %B_ret2
  %tmp_52_1 = and i32 %D_ret2, %C_ret2
  %tmp_53_1 = or i32 %tmp_51_1, %tmp_52_1
  %tmp271 = add i32 %tmp_49_1, -1894007588
  %tmp272 = add i32 %W_addr_5_25_loc_assign_4, %tmp_53_1
  %tmp273 = add i32 %tmp272, %call_ret6
  %temp_3_1 = add i32 %tmp273, %tmp271
  %call_ret45_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret2, i32 %B_ret2, i32 %C_ret2, i32 %D_ret2, i32 %temp_3_1)
  %call_ret11_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 0
  %A_ret33_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 1
  %B_ret34_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 2
  %C_ret35_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 3
  %D_ret36_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 4
  %tmp_49_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_1)
  %tmp_50_2 = or i32 %D_ret36_1, %C_ret35_1
  %tmp_51_2 = and i32 %tmp_50_2, %B_ret34_1
  %tmp_52_2 = and i32 %D_ret36_1, %C_ret35_1
  %tmp_53_2 = or i32 %tmp_51_2, %tmp_52_2
  %tmp274 = add i32 %tmp_49_2, -1894007588
  %tmp275 = add i32 %W_addr_5_26_loc_assign_4, %tmp_53_2
  %tmp276 = add i32 %tmp275, %call_ret11_1
  %temp_3_2 = add i32 %tmp276, %tmp274
  %call_ret45_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_1, i32 %B_ret34_1, i32 %C_ret35_1, i32 %D_ret36_1, i32 %temp_3_2)
  %call_ret11_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 0
  %A_ret33_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 1
  %B_ret34_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 2
  %C_ret35_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 3
  %D_ret36_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 4
  %tmp_49_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_2)
  %tmp_50_3 = or i32 %D_ret36_2, %C_ret35_2
  %tmp_51_3 = and i32 %tmp_50_3, %B_ret34_2
  %tmp_52_3 = and i32 %D_ret36_2, %C_ret35_2
  %tmp_53_3 = or i32 %tmp_51_3, %tmp_52_3
  %tmp277 = add i32 %tmp_49_3, -1894007588
  %tmp278 = add i32 %W_addr_5_27_loc_assign_4, %tmp_53_3
  %tmp279 = add i32 %tmp278, %call_ret11_2
  %temp_3_3 = add i32 %tmp279, %tmp277
  %call_ret45_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_2, i32 %B_ret34_2, i32 %C_ret35_2, i32 %D_ret36_2, i32 %temp_3_3)
  %call_ret11_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 0
  %A_ret33_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 1
  %B_ret34_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 2
  %C_ret35_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 3
  %D_ret36_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 4
  %tmp_49_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_3)
  %tmp_50_4 = or i32 %D_ret36_3, %C_ret35_3
  %tmp_51_4 = and i32 %tmp_50_4, %B_ret34_3
  %tmp_52_4 = and i32 %D_ret36_3, %C_ret35_3
  %tmp_53_4 = or i32 %tmp_51_4, %tmp_52_4
  %tmp280 = add i32 %tmp_49_4, -1894007588
  %tmp281 = add i32 %W_addr_5_28_loc_assign_4, %tmp_53_4
  %tmp282 = add i32 %tmp281, %call_ret11_3
  %temp_3_4 = add i32 %tmp282, %tmp280
  %call_ret45_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_3, i32 %B_ret34_3, i32 %C_ret35_3, i32 %D_ret36_3, i32 %temp_3_4)
  %call_ret11_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 0
  %A_ret33_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 1
  %B_ret34_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 2
  %C_ret35_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 3
  %D_ret36_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 4
  %tmp_49_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_4)
  %tmp_50_5 = or i32 %D_ret36_4, %C_ret35_4
  %tmp_51_5 = and i32 %tmp_50_5, %B_ret34_4
  %tmp_52_5 = and i32 %D_ret36_4, %C_ret35_4
  %tmp_53_5 = or i32 %tmp_51_5, %tmp_52_5
  %tmp283 = add i32 %tmp_49_5, -1894007588
  %tmp284 = add i32 %W_addr_5_29_loc_assign_4, %tmp_53_5
  %tmp285 = add i32 %tmp284, %call_ret11_4
  %temp_3_5 = add i32 %tmp285, %tmp283
  %call_ret45_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_4, i32 %B_ret34_4, i32 %C_ret35_4, i32 %D_ret36_4, i32 %temp_3_5)
  %call_ret11_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 0
  %A_ret33_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 1
  %B_ret34_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 2
  %C_ret35_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 3
  %D_ret36_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 4
  %tmp_49_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_5)
  %tmp_50_6 = or i32 %D_ret36_5, %C_ret35_5
  %tmp_51_6 = and i32 %tmp_50_6, %B_ret34_5
  %tmp_52_6 = and i32 %D_ret36_5, %C_ret35_5
  %tmp_53_6 = or i32 %tmp_51_6, %tmp_52_6
  %tmp286 = add i32 %tmp_49_6, -1894007588
  %tmp287 = add i32 %W_addr_5_30_loc_assign_4, %tmp_53_6
  %tmp288 = add i32 %tmp287, %call_ret11_5
  %temp_3_6 = add i32 %tmp288, %tmp286
  %call_ret45_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_5, i32 %B_ret34_5, i32 %C_ret35_5, i32 %D_ret36_5, i32 %temp_3_6)
  %call_ret11_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 0
  %A_ret33_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 1
  %B_ret34_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 2
  %C_ret35_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 3
  %D_ret36_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 4
  %tmp_49_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_6)
  %tmp_50_7 = or i32 %D_ret36_6, %C_ret35_6
  %tmp_51_7 = and i32 %tmp_50_7, %B_ret34_6
  %tmp_52_7 = and i32 %D_ret36_6, %C_ret35_6
  %tmp_53_7 = or i32 %tmp_51_7, %tmp_52_7
  %tmp289 = add i32 %tmp_49_7, -1894007588
  %tmp290 = add i32 %W_addr_5_31_loc_assign_4, %tmp_53_7
  %tmp291 = add i32 %tmp290, %call_ret11_6
  %temp_3_7 = add i32 %tmp291, %tmp289
  %call_ret45_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_6, i32 %B_ret34_6, i32 %C_ret35_6, i32 %D_ret36_6, i32 %temp_3_7)
  %call_ret11_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 0
  %A_ret33_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 1
  %B_ret34_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 2
  %C_ret35_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 3
  %D_ret36_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 4
  %tmp_49_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_7)
  %tmp_50_8 = or i32 %D_ret36_7, %C_ret35_7
  %tmp_51_8 = and i32 %tmp_50_8, %B_ret34_7
  %tmp_52_8 = and i32 %D_ret36_7, %C_ret35_7
  %tmp_53_8 = or i32 %tmp_51_8, %tmp_52_8
  %tmp292 = add i32 %tmp_49_8, -1894007588
  %tmp293 = add i32 %W_addr_5_32_loc_assign_4, %tmp_53_8
  %tmp294 = add i32 %tmp293, %call_ret11_7
  %temp_3_8 = add i32 %tmp294, %tmp292
  %call_ret45_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_7, i32 %B_ret34_7, i32 %C_ret35_7, i32 %D_ret36_7, i32 %temp_3_8)
  %call_ret11_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 0
  %A_ret33_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 1
  %B_ret34_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 2
  %C_ret35_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 3
  %D_ret36_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 4
  %tmp_49_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_8)
  %tmp_50_9 = or i32 %D_ret36_8, %C_ret35_8
  %tmp_51_9 = and i32 %tmp_50_9, %B_ret34_8
  %tmp_52_9 = and i32 %D_ret36_8, %C_ret35_8
  %tmp_53_9 = or i32 %tmp_51_9, %tmp_52_9
  %tmp295 = add i32 %tmp_49_9, -1894007588
  %tmp296 = add i32 %W_addr_5_33_loc_assign_4, %tmp_53_9
  %tmp297 = add i32 %tmp296, %call_ret11_8
  %temp_3_9 = add i32 %tmp297, %tmp295
  %call_ret45_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_8, i32 %B_ret34_8, i32 %C_ret35_8, i32 %D_ret36_8, i32 %temp_3_9)
  %call_ret11_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 0
  %A_ret33_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 1
  %B_ret34_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 2
  %C_ret35_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 3
  %D_ret36_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 4
  %tmp_49_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_9)
  %tmp_50_s = or i32 %D_ret36_9, %C_ret35_9
  %tmp_51_s = and i32 %tmp_50_s, %B_ret34_9
  %tmp_52_s = and i32 %D_ret36_9, %C_ret35_9
  %tmp_53_s = or i32 %tmp_51_s, %tmp_52_s
  %tmp298 = add i32 %tmp_49_s, -1894007588
  %tmp299 = add i32 %W_addr_5_34_loc_assign_4, %tmp_53_s
  %tmp300 = add i32 %tmp299, %call_ret11_9
  %temp_3_s = add i32 %tmp300, %tmp298
  %call_ret45_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_9, i32 %B_ret34_9, i32 %C_ret35_9, i32 %D_ret36_9, i32 %temp_3_s)
  %call_ret11_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 0
  %A_ret33_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 1
  %B_ret34_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 2
  %C_ret35_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 3
  %D_ret36_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 4
  %tmp_49_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_s)
  %tmp_50_10 = or i32 %D_ret36_s, %C_ret35_s
  %tmp_51_10 = and i32 %tmp_50_10, %B_ret34_s
  %tmp_52_10 = and i32 %D_ret36_s, %C_ret35_s
  %tmp_53_10 = or i32 %tmp_51_10, %tmp_52_10
  %tmp301 = add i32 %tmp_49_10, -1894007588
  %tmp302 = add i32 %W_addr_5_35_loc_assign_4, %tmp_53_10
  %tmp303 = add i32 %tmp302, %call_ret11_s
  %temp_3_10 = add i32 %tmp303, %tmp301
  %call_ret45_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_s, i32 %B_ret34_s, i32 %C_ret35_s, i32 %D_ret36_s, i32 %temp_3_10)
  %call_ret11_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 0
  %A_ret33_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 1
  %B_ret34_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 2
  %C_ret35_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 3
  %D_ret36_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 4
  %tmp_49_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_10)
  %tmp_50_11 = or i32 %D_ret36_10, %C_ret35_10
  %tmp_51_11 = and i32 %tmp_50_11, %B_ret34_10
  %tmp_52_11 = and i32 %D_ret36_10, %C_ret35_10
  %tmp_53_11 = or i32 %tmp_51_11, %tmp_52_11
  %tmp304 = add i32 %tmp_49_11, -1894007588
  %tmp305 = add i32 %W_addr_5_36_loc_assign_4, %tmp_53_11
  %tmp306 = add i32 %tmp305, %call_ret11_10
  %temp_3_11 = add i32 %tmp306, %tmp304
  %call_ret45_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_10, i32 %B_ret34_10, i32 %C_ret35_10, i32 %D_ret36_10, i32 %temp_3_11)
  %call_ret11_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 0
  %A_ret33_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 1
  %B_ret34_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 2
  %C_ret35_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 3
  %D_ret36_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 4
  %tmp_49_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_11)
  %tmp_50_12 = or i32 %D_ret36_11, %C_ret35_11
  %tmp_51_12 = and i32 %tmp_50_12, %B_ret34_11
  %tmp_52_12 = and i32 %D_ret36_11, %C_ret35_11
  %tmp_53_12 = or i32 %tmp_51_12, %tmp_52_12
  %tmp307 = add i32 %tmp_49_12, -1894007588
  %tmp308 = add i32 %W_addr_5_37_loc_assign_4, %tmp_53_12
  %tmp309 = add i32 %tmp308, %call_ret11_11
  %temp_3_12 = add i32 %tmp309, %tmp307
  %call_ret45_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_11, i32 %B_ret34_11, i32 %C_ret35_11, i32 %D_ret36_11, i32 %temp_3_12)
  %call_ret11_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 0
  %A_ret33_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 1
  %B_ret34_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 2
  %C_ret35_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 3
  %D_ret36_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 4
  %tmp_49_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_12)
  %tmp_50_13 = or i32 %D_ret36_12, %C_ret35_12
  %tmp_51_13 = and i32 %tmp_50_13, %B_ret34_12
  %tmp_52_13 = and i32 %D_ret36_12, %C_ret35_12
  %tmp_53_13 = or i32 %tmp_51_13, %tmp_52_13
  %tmp310 = add i32 %tmp_49_13, -1894007588
  %tmp311 = add i32 %W_addr_5_38_loc_assign_4, %tmp_53_13
  %tmp312 = add i32 %tmp311, %call_ret11_12
  %temp_3_13 = add i32 %tmp312, %tmp310
  %call_ret45_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_12, i32 %B_ret34_12, i32 %C_ret35_12, i32 %D_ret36_12, i32 %temp_3_13)
  %call_ret11_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 0
  %A_ret33_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 1
  %B_ret34_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 2
  %C_ret35_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 3
  %D_ret36_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 4
  %tmp_49_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_13)
  %tmp_50_14 = or i32 %D_ret36_13, %C_ret35_13
  %tmp_51_14 = and i32 %tmp_50_14, %B_ret34_13
  %tmp_52_14 = and i32 %D_ret36_13, %C_ret35_13
  %tmp_53_14 = or i32 %tmp_51_14, %tmp_52_14
  %tmp313 = add i32 %tmp_49_14, -1894007588
  %tmp314 = add i32 %W_addr_5_39_loc_assign_4, %tmp_53_14
  %tmp315 = add i32 %tmp314, %call_ret11_13
  %temp_3_14 = add i32 %tmp315, %tmp313
  %call_ret45_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_13, i32 %B_ret34_13, i32 %C_ret35_13, i32 %D_ret36_13, i32 %temp_3_14)
  %call_ret11_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 0
  %A_ret33_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 1
  %B_ret34_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 2
  %C_ret35_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 3
  %D_ret36_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 4
  %tmp_49_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_14)
  %tmp_50_15 = or i32 %D_ret36_14, %C_ret35_14
  %tmp_51_15 = and i32 %tmp_50_15, %B_ret34_14
  %tmp_52_15 = and i32 %D_ret36_14, %C_ret35_14
  %tmp_53_15 = or i32 %tmp_51_15, %tmp_52_15
  %tmp316 = add i32 %tmp_49_15, -1894007588
  %tmp317 = add i32 %W_addr_5_40_loc_assign_4, %tmp_53_15
  %tmp318 = add i32 %tmp317, %call_ret11_14
  %temp_3_15 = add i32 %tmp318, %tmp316
  %call_ret45_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_14, i32 %B_ret34_14, i32 %C_ret35_14, i32 %D_ret36_14, i32 %temp_3_15)
  %call_ret11_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 0
  %A_ret33_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 1
  %B_ret34_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 2
  %C_ret35_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 3
  %D_ret36_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 4
  %tmp_49_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_15)
  %tmp_50_16 = or i32 %D_ret36_15, %C_ret35_15
  %tmp_51_16 = and i32 %tmp_50_16, %B_ret34_15
  %tmp_52_16 = and i32 %D_ret36_15, %C_ret35_15
  %tmp_53_16 = or i32 %tmp_51_16, %tmp_52_16
  %tmp319 = add i32 %tmp_49_16, -1894007588
  %tmp320 = add i32 %W_addr_5_41_loc_assign_4, %tmp_53_16
  %tmp321 = add i32 %tmp320, %call_ret11_15
  %temp_3_16 = add i32 %tmp321, %tmp319
  %call_ret45_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_15, i32 %B_ret34_15, i32 %C_ret35_15, i32 %D_ret36_15, i32 %temp_3_16)
  %call_ret11_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 0
  %A_ret33_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 1
  %B_ret34_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 2
  %C_ret35_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 3
  %D_ret36_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 4
  %tmp_49_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_16)
  %tmp_50_17 = or i32 %D_ret36_16, %C_ret35_16
  %tmp_51_17 = and i32 %tmp_50_17, %B_ret34_16
  %tmp_52_17 = and i32 %D_ret36_16, %C_ret35_16
  %tmp_53_17 = or i32 %tmp_51_17, %tmp_52_17
  %tmp322 = add i32 %tmp_49_17, -1894007588
  %tmp323 = add i32 %W_addr_5_42_loc_assign_4, %tmp_53_17
  %tmp324 = add i32 %tmp323, %call_ret11_16
  %temp_3_17 = add i32 %tmp324, %tmp322
  %call_ret45_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_16, i32 %B_ret34_16, i32 %C_ret35_16, i32 %D_ret36_16, i32 %temp_3_17)
  %call_ret11_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 0
  %A_ret33_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 1
  %B_ret34_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 2
  %C_ret35_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 3
  %D_ret36_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 4
  %tmp_49_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_17)
  %tmp_50_18 = or i32 %D_ret36_17, %C_ret35_17
  %tmp_51_18 = and i32 %tmp_50_18, %B_ret34_17
  %tmp_52_18 = and i32 %D_ret36_17, %C_ret35_17
  %tmp_53_18 = or i32 %tmp_51_18, %tmp_52_18
  %tmp325 = add i32 %tmp_49_18, -1894007588
  %tmp326 = add i32 %W_addr_5_43_loc_assign_4, %tmp_53_18
  %tmp327 = add i32 %tmp326, %call_ret11_17
  %temp_3_18 = add i32 %tmp327, %tmp325
  %call_ret45_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_17, i32 %B_ret34_17, i32 %C_ret35_17, i32 %D_ret36_17, i32 %temp_3_18)
  %call_ret11_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 0
  %A_ret33_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 1
  %B_ret34_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 2
  %C_ret35_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 3
  %D_ret36_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 4
  %tmp_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret33_18)
  %tmp328 = xor i32 %B_ret34_18, %D_ret36_18
  %tmp_15 = xor i32 %tmp328, %C_ret35_18
  %tmp329 = add i32 %tmp_14, %tmp_15
  %tmp330 = add i32 %W_addr_5_44_loc_assign_4, -899497514
  %tmp331 = add i32 %tmp330, %call_ret11_18
  %temp_4 = add i32 %tmp331, %tmp329
  %call_ret7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_18, i32 %B_ret34_18, i32 %C_ret35_18, i32 %D_ret36_18, i32 %temp_4)
  %call_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 0
  %A_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 1
  %B_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 2
  %C_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 3
  %D_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 4
  %tmp_63_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret3)
  %tmp332 = xor i32 %B_ret3, %D_ret3
  %tmp_65_1 = xor i32 %tmp332, %C_ret3
  %tmp333 = add i32 %tmp_63_1, %tmp_65_1
  %tmp334 = add i32 %W_addr_5_45_loc_assign_4, -899497514
  %tmp335 = add i32 %tmp334, %call_ret
  %temp_4_1 = add i32 %tmp335, %tmp333
  %call_ret44_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret3, i32 %B_ret3, i32 %C_ret3, i32 %D_ret3, i32 %temp_4_1)
  %call_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 0
  %A_ret39_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 1
  %B_ret40_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 2
  %C_ret41_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 3
  %D_ret42_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 4
  %tmp_63_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_1)
  %tmp336 = xor i32 %B_ret40_1, %D_ret42_1
  %tmp_65_2 = xor i32 %tmp336, %C_ret41_1
  %tmp337 = add i32 %tmp_63_2, %tmp_65_2
  %tmp338 = add i32 %W_addr_5_46_loc_assign_4, -899497514
  %tmp339 = add i32 %tmp338, %call_ret_1
  %temp_4_2 = add i32 %tmp339, %tmp337
  %call_ret44_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_1, i32 %B_ret40_1, i32 %C_ret41_1, i32 %D_ret42_1, i32 %temp_4_2)
  %call_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 0
  %A_ret39_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 1
  %B_ret40_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 2
  %C_ret41_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 3
  %D_ret42_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 4
  %tmp_63_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_2)
  %tmp340 = xor i32 %B_ret40_2, %D_ret42_2
  %tmp_65_3 = xor i32 %tmp340, %C_ret41_2
  %tmp341 = add i32 %tmp_63_3, %tmp_65_3
  %tmp342 = add i32 %W_addr_5_47_loc_assign_4, -899497514
  %tmp343 = add i32 %tmp342, %call_ret_2
  %temp_4_3 = add i32 %tmp343, %tmp341
  %call_ret44_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_2, i32 %B_ret40_2, i32 %C_ret41_2, i32 %D_ret42_2, i32 %temp_4_3)
  %call_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 0
  %A_ret39_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 1
  %B_ret40_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 2
  %C_ret41_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 3
  %D_ret42_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 4
  %tmp_63_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_3)
  %tmp344 = xor i32 %B_ret40_3, %D_ret42_3
  %tmp_65_4 = xor i32 %tmp344, %C_ret41_3
  %tmp345 = add i32 %tmp_63_4, %tmp_65_4
  %tmp346 = add i32 %W_addr_5_48_loc_assign_3, -899497514
  %tmp347 = add i32 %tmp346, %call_ret_3
  %temp_4_4 = add i32 %tmp347, %tmp345
  %call_ret44_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_3, i32 %B_ret40_3, i32 %C_ret41_3, i32 %D_ret42_3, i32 %temp_4_4)
  %call_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 0
  %A_ret39_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 1
  %B_ret40_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 2
  %C_ret41_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 3
  %D_ret42_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 4
  %tmp_63_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_4)
  %tmp348 = xor i32 %B_ret40_4, %D_ret42_4
  %tmp_65_5 = xor i32 %tmp348, %C_ret41_4
  %tmp349 = add i32 %tmp_63_5, %tmp_65_5
  %tmp350 = add i32 %W_addr_5_49_loc_assign_3, -899497514
  %tmp351 = add i32 %tmp350, %call_ret_4
  %temp_4_5 = add i32 %tmp351, %tmp349
  %call_ret44_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_4, i32 %B_ret40_4, i32 %C_ret41_4, i32 %D_ret42_4, i32 %temp_4_5)
  %call_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 0
  %A_ret39_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 1
  %B_ret40_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 2
  %C_ret41_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 3
  %D_ret42_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 4
  %tmp_63_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_5)
  %tmp352 = xor i32 %B_ret40_5, %D_ret42_5
  %tmp_65_6 = xor i32 %tmp352, %C_ret41_5
  %tmp353 = add i32 %tmp_63_6, %tmp_65_6
  %tmp354 = add i32 %W_addr_5_50_loc_assign_2, -899497514
  %tmp355 = add i32 %tmp354, %call_ret_5
  %temp_4_6 = add i32 %tmp355, %tmp353
  %call_ret44_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_5, i32 %B_ret40_5, i32 %C_ret41_5, i32 %D_ret42_5, i32 %temp_4_6)
  %call_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 0
  %A_ret39_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 1
  %B_ret40_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 2
  %C_ret41_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 3
  %D_ret42_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 4
  %tmp_63_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_6)
  %tmp356 = xor i32 %B_ret40_6, %D_ret42_6
  %tmp_65_7 = xor i32 %tmp356, %C_ret41_6
  %tmp357 = add i32 %tmp_63_7, %tmp_65_7
  %tmp358 = add i32 %W_addr_5_51_loc_assign_2, -899497514
  %tmp359 = add i32 %tmp358, %call_ret_6
  %temp_4_7 = add i32 %tmp359, %tmp357
  %call_ret44_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_6, i32 %B_ret40_6, i32 %C_ret41_6, i32 %D_ret42_6, i32 %temp_4_7)
  %call_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 0
  %A_ret39_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 1
  %B_ret40_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 2
  %C_ret41_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 3
  %D_ret42_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 4
  %tmp_63_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_7)
  %tmp360 = xor i32 %B_ret40_7, %D_ret42_7
  %tmp_65_8 = xor i32 %tmp360, %C_ret41_7
  %tmp361 = add i32 %tmp_63_8, %tmp_65_8
  %tmp362 = add i32 %W_addr_5_52_loc_assign_2, -899497514
  %tmp363 = add i32 %tmp362, %call_ret_7
  %temp_4_8 = add i32 %tmp363, %tmp361
  %call_ret44_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_7, i32 %B_ret40_7, i32 %C_ret41_7, i32 %D_ret42_7, i32 %temp_4_8)
  %call_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 0
  %A_ret39_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 1
  %B_ret40_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 2
  %C_ret41_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 3
  %D_ret42_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 4
  %tmp_63_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_8)
  %tmp364 = xor i32 %B_ret40_8, %D_ret42_8
  %tmp_65_9 = xor i32 %tmp364, %C_ret41_8
  %tmp365 = add i32 %tmp_63_9, %tmp_65_9
  %tmp366 = add i32 %W_addr_5_53_loc_assign_2, -899497514
  %tmp367 = add i32 %tmp366, %call_ret_8
  %temp_4_9 = add i32 %tmp367, %tmp365
  %call_ret44_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_8, i32 %B_ret40_8, i32 %C_ret41_8, i32 %D_ret42_8, i32 %temp_4_9)
  %call_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 0
  %A_ret39_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 1
  %B_ret40_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 2
  %C_ret41_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 3
  %D_ret42_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 4
  %tmp_63_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_9)
  %tmp368 = xor i32 %B_ret40_9, %D_ret42_9
  %tmp_65_s = xor i32 %tmp368, %C_ret41_9
  %tmp369 = add i32 %tmp_63_s, %tmp_65_s
  %tmp370 = add i32 %W_addr_5_54_loc_assign_2, -899497514
  %tmp371 = add i32 %tmp370, %call_ret_9
  %temp_4_s = add i32 %tmp371, %tmp369
  %call_ret44_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_9, i32 %B_ret40_9, i32 %C_ret41_9, i32 %D_ret42_9, i32 %temp_4_s)
  %call_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 0
  %A_ret39_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 1
  %B_ret40_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 2
  %C_ret41_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 3
  %D_ret42_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 4
  %tmp_63_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_s)
  %tmp372 = xor i32 %B_ret40_s, %D_ret42_s
  %tmp_65_10 = xor i32 %tmp372, %C_ret41_s
  %tmp373 = add i32 %tmp_63_10, %tmp_65_10
  %tmp374 = add i32 %W_addr_5_55_loc_assign_2, -899497514
  %tmp375 = add i32 %tmp374, %call_ret_s
  %temp_4_10 = add i32 %tmp375, %tmp373
  %call_ret44_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_s, i32 %B_ret40_s, i32 %C_ret41_s, i32 %D_ret42_s, i32 %temp_4_10)
  %call_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 0
  %A_ret39_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 1
  %B_ret40_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 2
  %C_ret41_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 3
  %D_ret42_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 4
  %tmp_63_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_10)
  %tmp376 = xor i32 %B_ret40_10, %D_ret42_10
  %tmp_65_11 = xor i32 %tmp376, %C_ret41_10
  %tmp377 = add i32 %tmp_63_11, %tmp_65_11
  %tmp378 = add i32 %W_addr_5_56_loc_assign_1, -899497514
  %tmp379 = add i32 %tmp378, %call_ret_10
  %temp_4_11 = add i32 %tmp379, %tmp377
  %call_ret44_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_10, i32 %B_ret40_10, i32 %C_ret41_10, i32 %D_ret42_10, i32 %temp_4_11)
  %call_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 0
  %A_ret39_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 1
  %B_ret40_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 2
  %C_ret41_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 3
  %D_ret42_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 4
  %tmp_63_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_11)
  %tmp380 = xor i32 %B_ret40_11, %D_ret42_11
  %tmp_65_12 = xor i32 %tmp380, %C_ret41_11
  %tmp381 = add i32 %tmp_63_12, %tmp_65_12
  %tmp382 = add i32 %W_addr_5_57_loc_assign_1, -899497514
  %tmp383 = add i32 %tmp382, %call_ret_11
  %temp_4_12 = add i32 %tmp383, %tmp381
  %call_ret44_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_11, i32 %B_ret40_11, i32 %C_ret41_11, i32 %D_ret42_11, i32 %temp_4_12)
  %call_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 0
  %A_ret39_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 1
  %B_ret40_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 2
  %C_ret41_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 3
  %D_ret42_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 4
  %tmp_63_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_12)
  %tmp384 = xor i32 %B_ret40_12, %D_ret42_12
  %tmp_65_13 = xor i32 %tmp384, %C_ret41_12
  %tmp385 = add i32 %tmp_63_13, %tmp_65_13
  %tmp386 = add i32 %W_addr_5_58_loc_assign_1, -899497514
  %tmp387 = add i32 %tmp386, %call_ret_12
  %temp_4_13 = add i32 %tmp387, %tmp385
  %call_ret44_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_12, i32 %B_ret40_12, i32 %C_ret41_12, i32 %D_ret42_12, i32 %temp_4_13)
  %call_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 0
  %A_ret39_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 1
  %B_ret40_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 2
  %C_ret41_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 3
  %D_ret42_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 4
  %tmp_63_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_13)
  %tmp388 = xor i32 %B_ret40_13, %D_ret42_13
  %tmp_65_14 = xor i32 %tmp388, %C_ret41_13
  %tmp389 = add i32 %tmp_63_14, %tmp_65_14
  %tmp390 = add i32 %W_addr_5_59_loc_assign_1, -899497514
  %tmp391 = add i32 %tmp390, %call_ret_13
  %temp_4_14 = add i32 %tmp391, %tmp389
  %call_ret44_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_13, i32 %B_ret40_13, i32 %C_ret41_13, i32 %D_ret42_13, i32 %temp_4_14)
  %call_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 0
  %A_ret39_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 1
  %B_ret40_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 2
  %C_ret41_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 3
  %D_ret42_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 4
  %tmp_63_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_14)
  %tmp392 = xor i32 %B_ret40_14, %D_ret42_14
  %tmp_65_15 = xor i32 %tmp392, %C_ret41_14
  %tmp393 = add i32 %tmp_63_15, %tmp_65_15
  %tmp394 = add i32 %W_addr_5_60_loc_assign_1, -899497514
  %tmp395 = add i32 %tmp394, %call_ret_14
  %temp_4_15 = add i32 %tmp395, %tmp393
  %call_ret44_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_14, i32 %B_ret40_14, i32 %C_ret41_14, i32 %D_ret42_14, i32 %temp_4_15)
  %call_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 0
  %A_ret39_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 1
  %B_ret40_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 2
  %C_ret41_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 3
  %D_ret42_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 4
  %tmp_63_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_15)
  %tmp396 = xor i32 %B_ret40_15, %D_ret42_15
  %tmp_65_16 = xor i32 %tmp396, %C_ret41_15
  %W_load = load i32* %W_addr_77, align 4
  %tmp397 = add i32 %W_load, %tmp_63_16
  %tmp398 = add i32 %call_ret_15, -899497514
  %tmp399 = add i32 %tmp398, %tmp_65_16
  %temp_4_16 = add i32 %tmp399, %tmp397
  %call_ret44_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_15, i32 %B_ret40_15, i32 %C_ret41_15, i32 %D_ret42_15, i32 %temp_4_16)
  %call_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 0
  %A_ret39_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 1
  %B_ret40_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 2
  %C_ret41_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 3
  %D_ret42_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 4
  %tmp_63_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_16)
  %tmp400 = xor i32 %B_ret40_16, %D_ret42_16
  %tmp_65_17 = xor i32 %tmp400, %C_ret41_16
  %W_load_1 = load i32* %W_addr_78, align 8
  %tmp401 = add i32 %W_load_1, %tmp_63_17
  %tmp402 = add i32 %call_ret_16, -899497514
  %tmp403 = add i32 %tmp402, %tmp_65_17
  %temp_4_17 = add i32 %tmp403, %tmp401
  %call_ret44_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_16, i32 %B_ret40_16, i32 %C_ret41_16, i32 %D_ret42_16, i32 %temp_4_17)
  %call_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 0
  %A_ret39_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 1
  %B_ret40_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 2
  %C_ret41_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 3
  %D_ret42_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 4
  %tmp_63_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_ret39_17)
  %tmp404 = xor i32 %B_ret40_17, %D_ret42_17
  %tmp_65_18 = xor i32 %tmp404, %C_ret41_17
  %W_load_2 = load i32* %W_addr_79, align 4
  %tmp405 = add i32 %W_load_2, %tmp_63_18
  %tmp406 = add i32 %call_ret_17, -899497514
  %tmp407 = add i32 %tmp406, %tmp_65_18
  %temp_4_18 = add i32 %tmp407, %tmp405
  %call_ret44_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_17, i32 %B_ret40_17, i32 %C_ret41_17, i32 %D_ret42_17, i32 %temp_4_18)
  %call_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 0
  %A_ret39_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 1
  %B_ret40_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 2
  %C_ret41_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 3
  %D_ret42_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 4
  %context_Intermediate_Hash_load = load i32* %context_Intermediate_Hash_addr, align 4
  %tmp_16 = add i32 %context_Intermediate_Hash_load, %A_ret39_18
  store i32 %tmp_16, i32* %context_Intermediate_Hash_addr, align 4
  %context_Intermediate_Hash_load_1 = load i32* %context_Intermediate_Hash_addr_1, align 4
  %tmp_17 = add i32 %context_Intermediate_Hash_load_1, %B_ret40_18
  store i32 %tmp_17, i32* %context_Intermediate_Hash_addr_1, align 4
  %context_Intermediate_Hash_load_2 = load i32* %context_Intermediate_Hash_addr_2, align 4
  %tmp_18 = add i32 %context_Intermediate_Hash_load_2, %C_ret41_18
  store i32 %tmp_18, i32* %context_Intermediate_Hash_addr_2, align 4
  %context_Intermediate_Hash_load_3 = load i32* %context_Intermediate_Hash_addr_3, align 4
  %tmp_19 = add i32 %context_Intermediate_Hash_load_3, %D_ret42_18
  store i32 %tmp_19, i32* %context_Intermediate_Hash_addr_3, align 4
  %context_Intermediate_Hash_load_4 = load i32* %context_Intermediate_Hash_addr_4, align 4
  %tmp_20 = add i32 %context_Intermediate_Hash_load_4, %call_ret_18
  store i32 %tmp_20, i32* %context_Intermediate_Hash_addr_4, align 4
  call void @_ssdm_op_Write.ap_auto.i16P(i16* %context_Message_Block_Index, i16 0)
  ret void
}

define internal fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext %bits, i32 %word) readnone {
  %word_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %word)
  %bits_read = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %bits)
  call void (...)* @_ssdm_op_SpecPipeline(i32 4, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind
  %tmp = zext i6 %bits_read to i32
  %tmp_s = shl i32 %word_read, %tmp
  %tmp_21 = sub i6 -32, %bits_read
  %tmp_61_cast = zext i6 %tmp_21 to i32
  %tmp_22 = lshr i32 %word_read, %tmp_61_cast
  %tmp_23 = or i32 %tmp_22, %tmp_s
  ret i32 %tmp_23
}

!opencl.kernels = !{!0, !7, !13, !13}
!hls.encrypted.func = !{}
!llvm.map.gv = !{}

!0 = metadata !{null, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 0, i32 0}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"uint8", metadata !"uint32"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !""}
!5 = metadata !{metadata !"kernel_arg_name", metadata !"bits", metadata !"word"}
!6 = metadata !{metadata !"reqd_work_group_size", i32 1, i32 1, i32 1}
!7 = metadata !{null, metadata !8, metadata !9, metadata !10, metadata !11, metadata !12, metadata !6}
!8 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1, i32 1, i32 1, i32 1}
!9 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none", metadata !"none", metadata !"none", metadata !"none"}
!10 = metadata !{metadata !"kernel_arg_type", metadata !"uint32*", metadata !"uint32*", metadata !"uint32*", metadata !"uint32*", metadata !"uint32*", metadata !"uint32*"}
!11 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !"", metadata !"", metadata !"", metadata !""}
!12 = metadata !{metadata !"kernel_arg_name", metadata !"A", metadata !"B", metadata !"C", metadata !"D", metadata !"E", metadata !"temp"}
!13 = metadata !{null, metadata !14, metadata !15, metadata !16, metadata !17, metadata !18, metadata !6}
!14 = metadata !{metadata !"kernel_arg_addr_space", i32 1}
!15 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none"}
!16 = metadata !{metadata !"kernel_arg_type", metadata !"SHA1Context*"}
!17 = metadata !{metadata !"kernel_arg_type_qual", metadata !""}
!18 = metadata !{metadata !"kernel_arg_name", metadata !"context"}
!19 = metadata !{metadata !20}
!20 = metadata !{i32 0, i32 31, metadata !21}
!21 = metadata !{metadata !22}
!22 = metadata !{metadata !"context.Intermediate_Hash", metadata !23, metadata !"uint32", i32 0, i32 31}
!23 = metadata !{metadata !24}
!24 = metadata !{i32 0, i32 4, i32 1}
!25 = metadata !{metadata !26}
!26 = metadata !{i32 0, i32 15, metadata !27}
!27 = metadata !{metadata !28}
!28 = metadata !{metadata !"context.Message_Block_Index", metadata !29, metadata !"int16", i32 0, i32 15}
!29 = metadata !{metadata !30}
!30 = metadata !{i32 0, i32 0, i32 1}
!31 = metadata !{metadata !32}
!32 = metadata !{i32 0, i32 7, metadata !33}
!33 = metadata !{metadata !34}
!34 = metadata !{metadata !"context.Message_Block", metadata !35, metadata !"uint8", i32 0, i32 7}
!35 = metadata !{metadata !36}
!36 = metadata !{i32 0, i32 63, i32 1}
