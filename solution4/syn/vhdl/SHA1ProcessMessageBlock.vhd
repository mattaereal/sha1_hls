-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SHA1ProcessMessageBlock is
port (
    context_i : IN STD_LOGIC_VECTOR (687 downto 0);
    context_o : OUT STD_LOGIC_VECTOR (687 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    context_o_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of SHA1ProcessMessageBlock is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SHA1ProcessMessageBlock,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.965750,HLS_SYN_LAT=390,HLS_SYN_TPT=391,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1760,HLS_SYN_LUT=20702}";
    constant ap_const_lv688_lc_2 : STD_LOGIC_VECTOR (687 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o : STD_LOGIC_VECTOR (687 downto 0);
    signal SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;

    component SHA1ProcessMessageBlock_Block_codeRepl62_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        context_i : IN STD_LOGIC_VECTOR (687 downto 0);
        context_o : OUT STD_LOGIC_VECTOR (687 downto 0);
        context_o_ap_vld : OUT STD_LOGIC );
    end component;



begin
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0 : component SHA1ProcessMessageBlock_Block_codeRepl62_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start,
        ap_done => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done,
        ap_continue => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue,
        ap_idle => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle,
        ap_ready => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready,
        context_i => context_i,
        context_o => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o,
        context_o_ap_vld => SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld);




    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue <= ap_const_logic_1;
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start <= ap_start;
    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle)
    begin
        if ((SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle = ap_const_logic_1)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready;
    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done)
    begin
        if ((SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done = ap_const_logic_1)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_ready <= SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready;
    context_o <= SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o;
    context_o_ap_vld <= SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld;
end behav;
