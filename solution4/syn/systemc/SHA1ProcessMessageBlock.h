// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SHA1ProcessMessageBlock_HH_
#define _SHA1ProcessMessageBlock_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "SHA1ProcessMessageBlock_Block_codeRepl62_proc.h"

namespace ap_rtl {

struct SHA1ProcessMessageBlock : public sc_module {
    // Port declarations 9
    sc_in< sc_lv<688> > context_i;
    sc_out< sc_lv<688> > context_o;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > context_o_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;


    // Module declarations
    SHA1ProcessMessageBlock(sc_module_name name);
    SC_HAS_PROCESS(SHA1ProcessMessageBlock);

    ~SHA1ProcessMessageBlock();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    SHA1ProcessMessageBlock_Block_codeRepl62_proc* SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready;
    sc_signal< sc_lv<688> > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_sig_hs_ready;
    static const sc_lv<688> ap_const_lv688_lc_2;
    static const sc_logic ap_const_logic_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    // Thread declarations
    void thread_SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue();
    void thread_SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_hs_ready();
    void thread_context_o();
    void thread_context_o_ap_vld();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
