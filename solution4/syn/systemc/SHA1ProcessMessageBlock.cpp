// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SHA1ProcessMessageBlock.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<688> SHA1ProcessMessageBlock::ap_const_lv688_lc
const sc_logic SHA1ProcessMessageBlock::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic SHA1ProcessMessageBlock::ap_const_logic_1 = sc_dt::Log_1;
const bool SHA1ProcessMessageBlock::ap_true = true;

SHA1ProcessMessageBlock::SHA1ProcessMessageBlock(sc_module_name name) : sc_module(name), mVcdFile(0) {
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0 = new SHA1ProcessMessageBlock_Block_codeRepl62_proc("SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0");
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_clk(ap_clk);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_rst(ap_rst);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_start(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_done(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_continue(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_idle(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->ap_ready(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->context_i(context_i);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->context_o(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o);
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0->context_o_ap_vld(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld);

    SC_METHOD(thread_SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue);

    SC_METHOD(thread_SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start);
    sensitive << ( ap_rst );
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done );

    SC_METHOD(thread_ap_sig_hs_ready);
    sensitive << ( SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready );

    SC_METHOD(thread_context_o);
    sensitive << ( SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o );

    SC_METHOD(thread_context_o_ap_vld);
    sensitive << ( SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SHA1ProcessMessageBlock_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, context_i, "(port)context_i");
    sc_trace(mVcdFile, context_o, "(port)context_o");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, context_o_ap_vld, "(port)context_o_ap_vld");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld, "SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_sig_hs_ready, "ap_sig_hs_ready");
#endif

    }
    mHdltvinHandle.open("SHA1ProcessMessageBlock.hdltvin.dat");
    mHdltvoutHandle.open("SHA1ProcessMessageBlock.hdltvout.dat");
}

SHA1ProcessMessageBlock::~SHA1ProcessMessageBlock() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0;
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue() {
    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue = ap_const_logic_1;
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start = ap_const_logic_0;
    } else {
        SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start = ap_start.read();
    }
}

void SHA1ProcessMessageBlock::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void SHA1ProcessMessageBlock::thread_ap_idle() {
    if (esl_seteq<1,1,1>(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle.read(), ap_const_logic_1)) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_ap_ready() {
    ap_ready = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready.read();
}

void SHA1ProcessMessageBlock::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void SHA1ProcessMessageBlock::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done.read(), ap_const_logic_1)) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_ap_sig_hs_ready() {
    ap_sig_hs_ready = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready.read();
}

void SHA1ProcessMessageBlock::thread_context_o() {
    context_o = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o.read();
}

void SHA1ProcessMessageBlock::thread_context_o_ap_vld() {
    context_o_ap_vld = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld.read();
}

void SHA1ProcessMessageBlock::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"context_i\" :  \"" << context_i.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"context_o\" :  \"" << context_o.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_o_ap_vld\" :  \"" << context_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

