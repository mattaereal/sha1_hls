// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SHA1ProcessMessageBlock,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.965750,HLS_SYN_LAT=390,HLS_SYN_TPT=391,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1760,HLS_SYN_LUT=20702}" *)

module SHA1ProcessMessageBlock (
        context_i,
        context_o,
        ap_clk,
        ap_rst,
        context_o_ap_vld,
        ap_start,
        ap_ready,
        ap_done,
        ap_idle
);

parameter    ap_const_lv688_lc_2 = 688'b

input  [687:0] context_i;
output  [687:0] context_o;
input   ap_clk;
input   ap_rst;
output   context_o_ap_vld;
input   ap_start;
output   ap_ready;
output   ap_done;
output   ap_idle;

reg ap_idle;

wire    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start;
wire    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done;
wire    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue;
wire    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle;
wire    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready;
wire   [687:0] SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o;
wire    SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld;
reg    ap_sig_hs_done;
wire    ap_sig_hs_continue;
wire    ap_sig_hs_ready;

SHA1ProcessMessageBlock_Block_codeRepl62_proc SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start),
    .ap_done(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done),
    .ap_continue(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue),
    .ap_idle(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle),
    .ap_ready(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready),
    .context_i(context_i),
    .context_o(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o),
    .context_o_ap_vld(SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld)
);

always @ (*) begin
    if ((SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_idle == 1'b1)) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_done == 1'b1)) begin
        ap_sig_hs_done = 1'b1;
    end else begin
        ap_sig_hs_done = 1'b0;
    end
end

assign SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_continue = 1'b1;

assign SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_start = ap_start;

assign ap_done = ap_sig_hs_done;

assign ap_ready = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready;

assign ap_sig_hs_continue = 1'b1;

assign ap_sig_hs_ready = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_ap_ready;

assign context_o = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o;

assign context_o_ap_vld = SHA1ProcessMessageBlock_Block_codeRepl62_proc_U0_context_o_ap_vld;

endmodule //SHA1ProcessMessageBlock
