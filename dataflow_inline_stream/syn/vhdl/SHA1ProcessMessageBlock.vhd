-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SHA1ProcessMessageBlock is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    context_Intermediate_Hash_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    context_Intermediate_Hash_ce0 : OUT STD_LOGIC;
    context_Intermediate_Hash_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_we0 : OUT STD_LOGIC;
    context_Intermediate_Hash_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    context_Intermediate_Hash_ce1 : OUT STD_LOGIC;
    context_Intermediate_Hash_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_we1 : OUT STD_LOGIC;
    context_Message_Block_Index : OUT STD_LOGIC_VECTOR (15 downto 0);
    context_Message_Block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    context_Message_Block_ce0 : OUT STD_LOGIC;
    context_Message_Block_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    context_Message_Block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    context_Message_Block_we0 : OUT STD_LOGIC;
    context_Message_Block_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    context_Message_Block_ce1 : OUT STD_LOGIC;
    context_Message_Block_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    context_Message_Block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    context_Message_Block_we1 : OUT STD_LOGIC;
    context_Message_Block_Index_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of SHA1ProcessMessageBlock is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SHA1ProcessMessageBlock,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.280000,HLS_SYN_LAT=412,HLS_SYN_TPT=243,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1062,HLS_SYN_LUT=2093}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal W_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_ap_start : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_ap_done : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_ap_continue : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_ap_idle : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_ap_ready : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SHA1ProcessMessageBlock_Block_proc_U0_W_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SHA1ProcessMessageBlock_Block_proc_U0_W_ce0 : STD_LOGIC;
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index : STD_LOGIC_VECTOR (15 downto 0);
    signal SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal W_i_full_n : STD_LOGIC;
    signal W_t_empty_n : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;
    signal ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready : STD_LOGIC;
    signal ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start : STD_LOGIC;
    signal ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start : STD_LOGIC;

    component SHA1ProcessMessageBlock_Loop_loop1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        context_Message_Block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        context_Message_Block_ce0 : OUT STD_LOGIC;
        context_Message_Block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        context_Message_Block_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        context_Message_Block_ce1 : OUT STD_LOGIC;
        context_Message_Block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        W_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_we0 : OUT STD_LOGIC;
        W_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        W_ce1 : OUT STD_LOGIC;
        W_we1 : OUT STD_LOGIC;
        W_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SHA1ProcessMessageBlock_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        context_Intermediate_Hash_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        context_Intermediate_Hash_ce0 : OUT STD_LOGIC;
        context_Intermediate_Hash_we0 : OUT STD_LOGIC;
        context_Intermediate_Hash_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        context_Intermediate_Hash_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        context_Intermediate_Hash_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        context_Intermediate_Hash_ce1 : OUT STD_LOGIC;
        context_Intermediate_Hash_we1 : OUT STD_LOGIC;
        context_Intermediate_Hash_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        context_Intermediate_Hash_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        context_Message_Block_Index : OUT STD_LOGIC_VECTOR (15 downto 0);
        context_Message_Block_Index_ap_vld : OUT STD_LOGIC );
    end component;


    component SHA1ProcessMessageBlock_W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    W_U : component SHA1ProcessMessageBlock_W
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0,
        i_ce0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0,
        i_we0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0,
        i_d0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0,
        i_q0 => W_i_q0,
        i_address1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1,
        i_ce1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1,
        i_we1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1,
        i_d1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1,
        i_q1 => W_i_q1,
        t_address0 => SHA1ProcessMessageBlock_Block_proc_U0_W_address0,
        t_ce0 => SHA1ProcessMessageBlock_Block_proc_U0_W_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => W_t_q0,
        t_address1 => ap_const_lv7_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => W_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => W_i_full_n,
        i_write => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done,
        t_empty_n => W_t_empty_n,
        t_read => SHA1ProcessMessageBlock_Block_proc_U0_ap_ready);

    SHA1ProcessMessageBlock_Loop_loop1_proc_U0 : component SHA1ProcessMessageBlock_Loop_loop1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start,
        ap_done => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done,
        ap_continue => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue,
        ap_idle => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle,
        ap_ready => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready,
        context_Message_Block_address0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0,
        context_Message_Block_ce0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0,
        context_Message_Block_q0 => context_Message_Block_q0,
        context_Message_Block_address1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1,
        context_Message_Block_ce1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1,
        context_Message_Block_q1 => context_Message_Block_q1,
        W_address0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0,
        W_ce0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0,
        W_we0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0,
        W_d0 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0,
        W_q0 => W_i_q0,
        W_address1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1,
        W_ce1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1,
        W_we1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1,
        W_d1 => SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1,
        W_q1 => W_i_q1);

    SHA1ProcessMessageBlock_Block_proc_U0 : component SHA1ProcessMessageBlock_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SHA1ProcessMessageBlock_Block_proc_U0_ap_start,
        ap_done => SHA1ProcessMessageBlock_Block_proc_U0_ap_done,
        ap_continue => SHA1ProcessMessageBlock_Block_proc_U0_ap_continue,
        ap_idle => SHA1ProcessMessageBlock_Block_proc_U0_ap_idle,
        ap_ready => SHA1ProcessMessageBlock_Block_proc_U0_ap_ready,
        context_Intermediate_Hash_address0 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0,
        context_Intermediate_Hash_ce0 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0,
        context_Intermediate_Hash_we0 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0,
        context_Intermediate_Hash_d0 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0,
        context_Intermediate_Hash_q0 => context_Intermediate_Hash_q0,
        context_Intermediate_Hash_address1 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1,
        context_Intermediate_Hash_ce1 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1,
        context_Intermediate_Hash_we1 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1,
        context_Intermediate_Hash_d1 => SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1,
        context_Intermediate_Hash_q1 => context_Intermediate_Hash_q1,
        W_address0 => SHA1ProcessMessageBlock_Block_proc_U0_W_address0,
        W_ce0 => SHA1ProcessMessageBlock_Block_proc_U0_W_ce0,
        W_q0 => W_t_q0,
        context_Message_Block_Index => SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index,
        context_Message_Block_Index_ap_vld => SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld);





    ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_hs_ready))) then 
                    ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_0 = ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)) then 
                    ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready <= SHA1ProcessMessageBlock_Block_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_hs_ready))) then 
                    ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_0 = ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready)) then 
                    ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    SHA1ProcessMessageBlock_Block_proc_U0_ap_continue <= ap_const_logic_1;
    SHA1ProcessMessageBlock_Block_proc_U0_ap_start <= (W_t_empty_n and ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status <= W_i_full_n;
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue <= W_i_full_n;
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start <= ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start;
    ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done;
    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle, SHA1ProcessMessageBlock_Block_proc_U0_ap_idle, W_t_empty_n)
    begin
        if (((ap_const_logic_1 = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle) and (ap_const_logic_1 = SHA1ProcessMessageBlock_Block_proc_U0_ap_idle) and (ap_const_logic_0 = W_t_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_hs_ready;

    ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready_assign_proc : process(SHA1ProcessMessageBlock_Block_proc_U0_ap_ready, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_1 = ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)) then 
            ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready <= ap_const_logic_1;
        elsif ((ap_const_logic_0 = ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)) then 
            ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready <= SHA1ProcessMessageBlock_Block_proc_U0_ap_ready;
        end if; 
    end process;


    ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)) then 
            ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start <= ap_start;
        else 
            ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready_assign_proc : process(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_1 = ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready)) then 
            ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready <= ap_const_logic_1;
        elsif ((ap_const_logic_0 = ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready)) then 
            ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready;
        end if; 
    end process;


    ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready)) then 
            ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start <= ap_start;
        else 
            ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(SHA1ProcessMessageBlock_Block_proc_U0_ap_done)
    begin
        if ((ap_const_logic_1 = SHA1ProcessMessageBlock_Block_proc_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_hs_ready_assign_proc : process(ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready, ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready) and (ap_const_logic_1 = ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready))) then 
            ap_sig_hs_ready <= ap_const_logic_1;
        else 
            ap_sig_hs_ready <= ap_const_logic_0;
        end if; 
    end process;

    context_Intermediate_Hash_address0 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0;
    context_Intermediate_Hash_address1 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1;
    context_Intermediate_Hash_ce0 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0;
    context_Intermediate_Hash_ce1 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1;
    context_Intermediate_Hash_d0 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0;
    context_Intermediate_Hash_d1 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1;
    context_Intermediate_Hash_we0 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0;
    context_Intermediate_Hash_we1 <= SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1;
    context_Message_Block_Index <= SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index;
    context_Message_Block_Index_ap_vld <= SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld;
    context_Message_Block_address0 <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0;
    context_Message_Block_address1 <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1;
    context_Message_Block_ce0 <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0;
    context_Message_Block_ce1 <= SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1;
    context_Message_Block_d0 <= ap_const_lv8_0;
    context_Message_Block_d1 <= ap_const_lv8_0;
    context_Message_Block_we0 <= ap_const_logic_0;
    context_Message_Block_we1 <= ap_const_logic_0;
end behav;
