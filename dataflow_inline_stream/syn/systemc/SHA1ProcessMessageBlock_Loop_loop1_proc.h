// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SHA1ProcessMessageBlock_Loop_loop1_proc_HH_
#define _SHA1ProcessMessageBlock_Loop_loop1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct SHA1ProcessMessageBlock_Loop_loop1_proc : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > context_Message_Block_address0;
    sc_out< sc_logic > context_Message_Block_ce0;
    sc_in< sc_lv<8> > context_Message_Block_q0;
    sc_out< sc_lv<6> > context_Message_Block_address1;
    sc_out< sc_logic > context_Message_Block_ce1;
    sc_in< sc_lv<8> > context_Message_Block_q1;
    sc_out< sc_lv<7> > W_address0;
    sc_out< sc_logic > W_ce0;
    sc_out< sc_logic > W_we0;
    sc_out< sc_lv<32> > W_d0;
    sc_in< sc_lv<32> > W_q0;
    sc_out< sc_lv<7> > W_address1;
    sc_out< sc_logic > W_ce1;
    sc_out< sc_logic > W_we1;
    sc_out< sc_lv<32> > W_d1;
    sc_in< sc_lv<32> > W_q1;


    // Module declarations
    SHA1ProcessMessageBlock_Loop_loop1_proc(sc_module_name name);
    SC_HAS_PROCESS(SHA1ProcessMessageBlock_Loop_loop1_proc);

    ~SHA1ProcessMessageBlock_Loop_loop1_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_25;
    sc_signal< sc_lv<32> > W_load_reg_351;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_60;
    sc_signal< sc_lv<5> > t_fu_180_p2;
    sc_signal< sc_lv<5> > t_reg_356;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_69;
    sc_signal< sc_lv<8> > reg_372;
    sc_signal< sc_lv<1> > exitcond5_i_i_fu_174_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_82;
    sc_signal< sc_lv<7> > t_2_fu_342_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_90;
    sc_signal< sc_lv<7> > reg_395;
    sc_signal< sc_lv<6> > tmp_2_i_fu_190_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_103;
    sc_signal< sc_lv<1> > exitcond4_fu_250_p2;
    sc_signal< sc_lv<32> > W_load_1_reg_410;
    sc_signal< sc_lv<8> > reg_415;
    sc_signal< sc_lv<5> > t_0_i_i_reg_150;
    sc_signal< bool > ap_sig_120;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_128;
    sc_signal< sc_lv<7> > t_1_reg_162;
    sc_signal< sc_lv<64> > tmp_3_i_fu_198_p1;
    sc_signal< sc_lv<64> > tmp_8_i_fu_209_p1;
    sc_signal< sc_lv<64> > tmp_12_i_fu_219_p1;
    sc_signal< sc_lv<64> > tmp_17_i_fu_229_p1;
    sc_signal< sc_lv<64> > tmp_6_i_fu_234_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_262_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_273_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_284_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_295_p1;
    sc_signal< sc_lv<64> > tmp_11_fu_337_p1;
    sc_signal< sc_lv<4> > tmp_fu_186_p1;
    sc_signal< sc_lv<6> > tmp_7_i_fu_203_p2;
    sc_signal< sc_lv<6> > tmp_11_i_fu_214_p0;
    sc_signal< sc_lv<6> > tmp_11_i_fu_214_p2;
    sc_signal< sc_lv<6> > tmp_16_i_fu_224_p0;
    sc_signal< sc_lv<6> > tmp_16_i_fu_224_p2;
    sc_signal< sc_lv<7> > tmp_3_fu_256_p2;
    sc_signal< sc_lv<7> > tmp_5_fu_267_p2;
    sc_signal< sc_lv<7> > tmp_7_fu_278_p2;
    sc_signal< sc_lv<7> > tmp_9_fu_289_p2;
    sc_signal< sc_lv<32> > tmp2_fu_305_p2;
    sc_signal< sc_lv<32> > tmp1_fu_300_p2;
    sc_signal< sc_lv<32> > word_assign_fu_310_p2;
    sc_signal< sc_lv<31> > tmp_1_fu_316_p1;
    sc_signal< sc_lv<1> > tmp_2_fu_320_p3;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_st1_fsm_0;
    static const sc_lv<7> ap_ST_st2_fsm_1;
    static const sc_lv<7> ap_ST_st3_fsm_2;
    static const sc_lv<7> ap_ST_st4_fsm_3;
    static const sc_lv<7> ap_ST_st5_fsm_4;
    static const sc_lv<7> ap_ST_st6_fsm_5;
    static const sc_lv<7> ap_ST_st7_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_10;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<6> ap_const_lv6_3;
    static const sc_lv<7> ap_const_lv7_50;
    static const sc_lv<7> ap_const_lv7_7D;
    static const sc_lv<7> ap_const_lv7_78;
    static const sc_lv<7> ap_const_lv7_72;
    static const sc_lv<7> ap_const_lv7_70;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<7> ap_const_lv7_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_W_address0();
    void thread_W_address1();
    void thread_W_ce0();
    void thread_W_ce1();
    void thread_W_d0();
    void thread_W_d1();
    void thread_W_we0();
    void thread_W_we1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_103();
    void thread_ap_sig_120();
    void thread_ap_sig_128();
    void thread_ap_sig_25();
    void thread_ap_sig_60();
    void thread_ap_sig_69();
    void thread_ap_sig_82();
    void thread_ap_sig_90();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_context_Message_Block_address0();
    void thread_context_Message_Block_address1();
    void thread_context_Message_Block_ce0();
    void thread_context_Message_Block_ce1();
    void thread_exitcond4_fu_250_p2();
    void thread_exitcond5_i_i_fu_174_p2();
    void thread_t_2_fu_342_p2();
    void thread_t_fu_180_p2();
    void thread_tmp1_fu_300_p2();
    void thread_tmp2_fu_305_p2();
    void thread_tmp_11_fu_337_p1();
    void thread_tmp_11_i_fu_214_p0();
    void thread_tmp_11_i_fu_214_p2();
    void thread_tmp_12_i_fu_219_p1();
    void thread_tmp_16_i_fu_224_p0();
    void thread_tmp_16_i_fu_224_p2();
    void thread_tmp_17_i_fu_229_p1();
    void thread_tmp_1_fu_316_p1();
    void thread_tmp_2_fu_320_p3();
    void thread_tmp_2_i_fu_190_p3();
    void thread_tmp_3_fu_256_p2();
    void thread_tmp_3_i_fu_198_p1();
    void thread_tmp_4_fu_262_p1();
    void thread_tmp_5_fu_267_p2();
    void thread_tmp_6_fu_273_p1();
    void thread_tmp_6_i_fu_234_p1();
    void thread_tmp_7_fu_278_p2();
    void thread_tmp_7_i_fu_203_p2();
    void thread_tmp_8_fu_284_p1();
    void thread_tmp_8_i_fu_209_p1();
    void thread_tmp_9_fu_289_p2();
    void thread_tmp_fu_186_p1();
    void thread_tmp_s_fu_295_p1();
    void thread_word_assign_fu_310_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
