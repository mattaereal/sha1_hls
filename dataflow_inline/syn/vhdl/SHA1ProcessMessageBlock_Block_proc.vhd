-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SHA1ProcessMessageBlock_Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    context_Intermediate_Hash_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    context_Intermediate_Hash_ce0 : OUT STD_LOGIC;
    context_Intermediate_Hash_we0 : OUT STD_LOGIC;
    context_Intermediate_Hash_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    context_Intermediate_Hash_ce1 : OUT STD_LOGIC;
    context_Intermediate_Hash_we1 : OUT STD_LOGIC;
    context_Intermediate_Hash_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    context_Intermediate_Hash_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_ce0 : OUT STD_LOGIC;
    W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    context_Message_Block_Index : OUT STD_LOGIC_VECTOR (15 downto 0);
    context_Message_Block_Index_ap_vld : OUT STD_LOGIC );
end;


architecture behav of SHA1ProcessMessageBlock_Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_6ED9EBA1 : STD_LOGIC_VECTOR (31 downto 0) := "01101110110110011110101110100001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_8F1BBCDC : STD_LOGIC_VECTOR (31 downto 0) := "10001111000110111011110011011100";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv32_CA62C1D6 : STD_LOGIC_VECTOR (31 downto 0) := "11001010011000101100000111010110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_5A827999 : STD_LOGIC_VECTOR (31 downto 0) := "01011010100000100111100110011001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_32 : BOOLEAN;
    signal ap_sig_65 : BOOLEAN;
    signal context_Intermediate_Hash_addr_1_reg_894 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_75 : BOOLEAN;
    signal context_Intermediate_Hash_addr_2_reg_899 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_86 : BOOLEAN;
    signal D_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_98 : BOOLEAN;
    signal tmp_34_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_107 : BOOLEAN;
    signal exitcond_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_120 : BOOLEAN;
    signal temp_2_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_128 : BOOLEAN;
    signal tmp12_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_838_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_966 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_139 : BOOLEAN;
    signal exitcond2_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_994 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_151 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_158 : BOOLEAN;
    signal exitcond1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_1_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_3_fu_751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal C_2_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_185 : BOOLEAN;
    signal C_4_fu_830_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_202 : BOOLEAN;
    signal E_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal E1_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_4_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_1_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_assign_1_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_reg_227 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_5_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_1_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_2_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_assign_2_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_3_reg_296 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_6_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_2_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_3_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_assign_3_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_4_reg_365 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_7_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_3_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_4_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_assign_4_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_reg_433 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_278 : BOOLEAN;
    signal tmp_33_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_461_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_465_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_14_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_531_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_s_fu_535_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_570_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_19_fu_574_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_628_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_632_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_fu_667_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_24_fu_671_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_737_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_741_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_765_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_37_fu_769_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_816_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_fu_820_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_838_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_838_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    B_1_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                B_1_reg_216 <= temp_fu_450_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                B_1_reg_216 <= A_reg_904;
            end if; 
        end if;
    end process;

    B_2_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_444_p2)))) then 
                B_2_reg_284 <= B_1_reg_216;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                B_2_reg_284 <= temp_1_fu_622_p2;
            end if; 
        end if;
    end process;

    B_3_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_553_p2)))) then 
                B_3_reg_353 <= B_2_reg_284;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                B_3_reg_353 <= temp_2_fu_731_p2;
            end if; 
        end if;
    end process;

    B_4_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_650_p2)))) then 
                B_4_reg_421 <= B_3_reg_353;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                B_4_reg_421 <= temp_3_fu_872_p2;
            end if; 
        end if;
    end process;

    D_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                D_1_reg_195 <= C_1_fu_475_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                D_1_reg_195 <= C_reg_910;
            end if; 
        end if;
    end process;

    D_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_444_p2)))) then 
                D_2_reg_261 <= D_1_reg_195;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                D_2_reg_261 <= C_2_fu_642_p3;
            end if; 
        end if;
    end process;

    D_3_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_553_p2)))) then 
                D_3_reg_330 <= D_2_reg_261;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                D_3_reg_330 <= C_3_fu_751_p3;
            end if; 
        end if;
    end process;

    D_4_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_650_p2)))) then 
                D_4_reg_399 <= D_3_reg_330;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                D_4_reg_399 <= reg_1017;
            end if; 
        end if;
    end process;

    E1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                E1_reg_174 <= E_4_reg_184;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                E1_reg_174 <= context_Intermediate_Hash_q0;
            end if; 
        end if;
    end process;

    E_1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_444_p2)))) then 
                E_1_reg_238 <= E1_reg_174;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                E_1_reg_238 <= E_5_reg_249;
            end if; 
        end if;
    end process;

    E_2_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_553_p2)))) then 
                E_2_reg_307 <= E_1_reg_238;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                E_2_reg_307 <= E_6_reg_318;
            end if; 
        end if;
    end process;

    E_3_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_650_p2)))) then 
                E_3_reg_376 <= E_2_reg_307;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                E_3_reg_376 <= E_7_reg_387;
            end if; 
        end if;
    end process;

    E_4_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                E_4_reg_184 <= D_1_reg_195;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                E_4_reg_184 <= context_Intermediate_Hash_q1;
            end if; 
        end if;
    end process;

    E_5_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_444_p2)))) then 
                E_5_reg_249 <= E_4_reg_184;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                E_5_reg_249 <= D_2_reg_261;
            end if; 
        end if;
    end process;

    E_6_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_553_p2)))) then 
                E_6_reg_318 <= E_5_reg_249;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                E_6_reg_318 <= D_3_reg_330;
            end if; 
        end if;
    end process;

    E_7_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_650_p2)))) then 
                E_7_reg_387 <= E_6_reg_318;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                E_7_reg_387 <= D_4_reg_399;
            end if; 
        end if;
    end process;

    reg_1017_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_650_p2))) then 
                reg_1017 <= tmp_30_fu_656_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_444_p2))) then 
                reg_1017 <= tmp_17_fu_559_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (exitcond_fu_759_p2 = ap_const_lv1_0))) then 
                reg_1017 <= C_4_fu_830_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                reg_1017 <= C_2_fu_642_p3;
            end if; 
        end if;
    end process;

    reg_953_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (exitcond_fu_759_p2 = ap_const_lv1_0))) then 
                reg_953 <= tmp12_fu_810_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                reg_953 <= temp_2_fu_731_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                reg_953 <= temp_fu_450_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((exitcond_fu_759_p2 = ap_const_lv1_0)))) then 
                reg_953 <= tmp_34_fu_856_p2;
            end if; 
        end if;
    end process;

    reg_999_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                reg_999 <= tmp_36_fu_877_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (exitcond_fu_759_p2 = ap_const_lv1_0))) then 
                reg_999 <= tmp_40_fu_799_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_553_p2))) then 
                reg_999 <= tmp_22_fu_456_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                reg_999 <= C_3_fu_751_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((exitcond_fu_759_p2 = ap_const_lv1_0)))) then 
                reg_999 <= tmp_35_fu_861_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                reg_999 <= C_1_fu_475_p3;
            end if; 
        end if;
    end process;

    t_2_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                t_2_reg_227 <= reg_994(5 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                t_2_reg_227 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    t_3_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_444_p2)))) then 
                t_3_reg_296 <= ap_const_lv6_14;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                t_3_reg_296 <= reg_966(6 - 1 downto 0);
            end if; 
        end if;
    end process;

    t_4_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_553_p2)))) then 
                t_4_reg_365 <= ap_const_lv6_28;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                t_4_reg_365 <= reg_994;
            end if; 
        end if;
    end process;

    t_5_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_650_p2)))) then 
                t_5_reg_433 <= ap_const_lv7_3C;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                t_5_reg_433 <= reg_966;
            end if; 
        end if;
    end process;

    word_assign_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                word_assign_1_reg_206 <= B_1_reg_216;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                word_assign_1_reg_206 <= B_reg_1032;
            end if; 
        end if;
    end process;

    word_assign_2_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_444_p2)))) then 
                word_assign_2_reg_273 <= word_assign_1_reg_206;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                word_assign_2_reg_273 <= B_2_reg_284;
            end if; 
        end if;
    end process;

    word_assign_3_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_553_p2)))) then 
                word_assign_3_reg_342 <= word_assign_2_reg_273;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                word_assign_3_reg_342 <= B_3_reg_353;
            end if; 
        end if;
    end process;

    word_assign_4_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_650_p2)))) then 
                word_assign_4_reg_411 <= word_assign_3_reg_342;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                word_assign_4_reg_411 <= B_4_reg_421;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                A_reg_904 <= context_Intermediate_Hash_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                B_reg_1032 <= context_Intermediate_Hash_q0;
                C_reg_910 <= context_Intermediate_Hash_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                D_reg_928 <= context_Intermediate_Hash_q1;
                E_reg_1047 <= context_Intermediate_Hash_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (exitcond_fu_759_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_553_p2)))) then
                reg_966 <= grp_fu_838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_650_p2)))) then
                reg_994 <= grp_fu_838_p2(6 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_65, exitcond_fu_759_p2, exitcond2_fu_553_p2, exitcond1_fu_650_p2, exitcond3_fu_444_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_65)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_444_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_553_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_650_p2))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st11_fsm_10 => 
                if (not((exitcond_fu_759_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    C_1_fu_475_p3 <= (tmp_4_fu_461_p1 & tmp_18_fu_465_p4);
    C_2_fu_642_p3 <= (tmp_6_fu_628_p1 & tmp_23_fu_632_p4);
    C_3_fu_751_p3 <= (tmp_8_fu_737_p1 & tmp_31_fu_741_p4);
    C_4_fu_830_p3 <= (tmp_41_fu_816_p1 & tmp_42_fu_820_p4);

    W_address0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, tmp_17_fu_559_p1, tmp_22_fu_456_p1, tmp_30_fu_656_p1, tmp_40_fu_799_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            W_address0 <= tmp_40_fu_799_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            W_address0 <= tmp_30_fu_656_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            W_address0 <= tmp_22_fu_456_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            W_address0 <= tmp_17_fu_559_p1(7 - 1 downto 0);
        else 
            W_address0 <= "XXXXXXX";
        end if; 
    end process;


    W_ce0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            W_ce0 <= ap_const_logic_1;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_107 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_120 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_128 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_139 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_151 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_158 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_185 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_202 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_278 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_32_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_32 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_65_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_65 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_sig_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_75 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_86 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_98 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_128)
    begin
        if (ap_sig_128) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_107)
    begin
        if (ap_sig_107) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_202)
    begin
        if (ap_sig_202) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_278)
    begin
        if (ap_sig_278) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_32)
    begin
        if (ap_sig_32) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_75)
    begin
        if (ap_sig_75) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_86)
    begin
        if (ap_sig_86) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_98)
    begin
        if (ap_sig_98) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_151)
    begin
        if (ap_sig_151) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_120)
    begin
        if (ap_sig_120) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_139)
    begin
        if (ap_sig_139) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_185)
    begin
        if (ap_sig_185) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_158)
    begin
        if (ap_sig_158) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    context_Intermediate_Hash_addr_1_reg_894 <= ap_const_lv64_1(3 - 1 downto 0);
    context_Intermediate_Hash_addr_2_reg_899 <= ap_const_lv64_2(3 - 1 downto 0);

    context_Intermediate_Hash_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, context_Intermediate_Hash_addr_1_reg_894, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            context_Intermediate_Hash_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            context_Intermediate_Hash_address0 <= context_Intermediate_Hash_addr_1_reg_894;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            context_Intermediate_Hash_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            context_Intermediate_Hash_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            context_Intermediate_Hash_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            context_Intermediate_Hash_address0 <= "XXX";
        end if; 
    end process;


    context_Intermediate_Hash_address1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, context_Intermediate_Hash_addr_2_reg_899, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            context_Intermediate_Hash_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            context_Intermediate_Hash_address1 <= context_Intermediate_Hash_addr_2_reg_899;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            context_Intermediate_Hash_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            context_Intermediate_Hash_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            context_Intermediate_Hash_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        else 
            context_Intermediate_Hash_address1 <= "XXX";
        end if; 
    end process;


    context_Intermediate_Hash_ce0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_65, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_65)) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            context_Intermediate_Hash_ce0 <= ap_const_logic_1;
        else 
            context_Intermediate_Hash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    context_Intermediate_Hash_ce1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            context_Intermediate_Hash_ce1 <= ap_const_logic_1;
        else 
            context_Intermediate_Hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    context_Intermediate_Hash_d0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, reg_999, ap_sig_cseq_ST_st13_fsm_12, tmp_33_fu_850_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            context_Intermediate_Hash_d0 <= reg_999;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            context_Intermediate_Hash_d0 <= tmp_33_fu_850_p2;
        else 
            context_Intermediate_Hash_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    context_Intermediate_Hash_d1_assign_proc : process(reg_953, ap_sig_cseq_ST_st11_fsm_10, reg_999, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_32_fu_525_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            context_Intermediate_Hash_d1 <= reg_999;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            context_Intermediate_Hash_d1 <= reg_953;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            context_Intermediate_Hash_d1 <= tmp_32_fu_525_p2;
        else 
            context_Intermediate_Hash_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    context_Intermediate_Hash_we0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_759_p2, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((exitcond_fu_759_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            context_Intermediate_Hash_we0 <= ap_const_logic_1;
        else 
            context_Intermediate_Hash_we0 <= ap_const_logic_0;
        end if; 
    end process;


    context_Intermediate_Hash_we1_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_759_p2, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((exitcond_fu_759_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            context_Intermediate_Hash_we1 <= ap_const_logic_1;
        else 
            context_Intermediate_Hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    context_Message_Block_Index <= ap_const_lv16_0;

    context_Message_Block_Index_ap_vld_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            context_Message_Block_Index_ap_vld <= ap_const_logic_1;
        else 
            context_Message_Block_Index_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_650_p2 <= "1" when (t_4_reg_365 = ap_const_lv6_3C) else "0";
    exitcond2_fu_553_p2 <= "1" when (t_3_reg_296 = ap_const_lv6_28) else "0";
    exitcond3_fu_444_p2 <= "1" when (t_2_reg_227 = ap_const_lv5_14) else "0";
    exitcond_fu_759_p2 <= "1" when (t_5_reg_433 = ap_const_lv7_50) else "0";

    grp_fu_838_p0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, t_2_reg_227)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_838_p0 <= ap_const_lv7_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            grp_fu_838_p0 <= std_logic_vector(resize(unsigned(ap_const_lv6_1),7));
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_838_p0 <= std_logic_vector(resize(unsigned(t_2_reg_227),7));
        else 
            grp_fu_838_p0 <= "XXXXXXX";
        end if; 
    end process;


    grp_fu_838_p1_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, t_3_reg_296, t_4_reg_365, t_5_reg_433)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_838_p1 <= t_5_reg_433;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_838_p1 <= std_logic_vector(resize(unsigned(t_4_reg_365),7));
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_838_p1 <= std_logic_vector(resize(unsigned(t_3_reg_296),7));
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_838_p1 <= std_logic_vector(resize(unsigned(ap_const_lv5_1),7));
        else 
            grp_fu_838_p1 <= "XXXXXXX";
        end if; 
    end process;

    grp_fu_838_p2 <= std_logic_vector(unsigned(grp_fu_838_p0) + unsigned(grp_fu_838_p1));
    temp_1_fu_622_p2 <= std_logic_vector(unsigned(tmp5_fu_616_p2) + unsigned(tmp4_fu_610_p2));
    temp_2_fu_731_p2 <= std_logic_vector(unsigned(tmp8_fu_725_p2) + unsigned(tmp7_fu_719_p2));
    temp_3_fu_872_p2 <= std_logic_vector(unsigned(reg_953) + unsigned(tmp11_fu_866_p2));
    temp_fu_450_p2 <= std_logic_vector(unsigned(tmp1_fu_519_p2) + unsigned(tmp_fu_513_p2));
    tmp10_fu_787_p2 <= (E_7_reg_387 xor word_assign_4_reg_411);
    tmp11_fu_866_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(E_3_reg_376));
    tmp12_fu_810_p2 <= std_logic_vector(unsigned(tmp13_fu_804_p2) + unsigned(tmp_39_fu_793_p2));
    tmp13_fu_804_p2 <= std_logic_vector(signed(ap_const_lv32_CA62C1D6) + signed(tmp_38_fu_779_p3));
    tmp1_fu_519_p2 <= std_logic_vector(unsigned(tmp2_fu_844_p2) + unsigned(tmp_16_fu_501_p2));
    tmp2_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv32_5A827999) + unsigned(tmp_12_fu_545_p3));
    tmp3_fu_592_p2 <= (E_5_reg_249 xor word_assign_2_reg_273);
    tmp4_fu_610_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(E_1_reg_238));
    tmp5_fu_616_p2 <= std_logic_vector(unsigned(tmp6_fu_604_p2) + unsigned(tmp_21_fu_598_p2));
    tmp6_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv32_6ED9EBA1) + unsigned(tmp_20_fu_584_p3));
    tmp7_fu_719_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(E_2_reg_307));
    tmp8_fu_725_p2 <= std_logic_vector(signed(ap_const_lv32_8F1BBCDC) + signed(tmp9_fu_713_p2));
    tmp9_fu_713_p2 <= std_logic_vector(unsigned(tmp_29_fu_707_p2) + unsigned(tmp_25_fu_681_p3));
    tmp_12_fu_545_p3 <= (tmp_3_fu_531_p1 & tmp_s_fu_535_p4);
    tmp_13_fu_495_p2 <= (word_assign_1_reg_206 and D_1_reg_195);
    tmp_14_fu_489_p2 <= (word_assign_1_reg_206 xor ap_const_lv32_FFFFFFFF);
    tmp_15_fu_483_p2 <= (E_4_reg_184 and tmp_14_fu_489_p2);
    tmp_16_fu_501_p2 <= (tmp_15_fu_483_p2 or tmp_13_fu_495_p2);
    tmp_17_fu_559_p1 <= std_logic_vector(resize(unsigned(t_2_reg_227),64));
    tmp_18_fu_465_p4 <= word_assign_1_reg_206(31 downto 2);
    tmp_19_fu_574_p4 <= B_2_reg_284(31 downto 27);
    tmp_20_fu_584_p3 <= (tmp_5_fu_570_p1 & tmp_19_fu_574_p4);
    tmp_21_fu_598_p2 <= (tmp3_fu_592_p2 xor D_2_reg_261);
    tmp_22_fu_456_p1 <= std_logic_vector(resize(unsigned(t_3_reg_296),64));
    tmp_23_fu_632_p4 <= word_assign_2_reg_273(31 downto 2);
    tmp_24_fu_671_p4 <= B_3_reg_353(31 downto 27);
    tmp_25_fu_681_p3 <= (tmp_7_fu_667_p1 & tmp_24_fu_671_p4);
    tmp_26_fu_689_p2 <= (D_3_reg_330 or E_6_reg_318);
    tmp_27_fu_701_p2 <= (tmp_26_fu_689_p2 and word_assign_3_reg_342);
    tmp_28_fu_695_p2 <= (D_3_reg_330 and E_6_reg_318);
    tmp_29_fu_707_p2 <= (tmp_27_fu_701_p2 or tmp_28_fu_695_p2);
    tmp_30_fu_656_p1 <= std_logic_vector(resize(unsigned(t_4_reg_365),64));
    tmp_31_fu_741_p4 <= word_assign_3_reg_342(31 downto 2);
    tmp_32_fu_525_p2 <= std_logic_vector(unsigned(A_reg_904) + unsigned(B_4_reg_421));
    tmp_33_fu_850_p2 <= std_logic_vector(unsigned(B_reg_1032) + unsigned(word_assign_4_reg_411));
    tmp_34_fu_856_p2 <= std_logic_vector(unsigned(C_reg_910) + unsigned(D_4_reg_399));
    tmp_35_fu_861_p2 <= std_logic_vector(unsigned(D_reg_928) + unsigned(E_7_reg_387));
    tmp_36_fu_877_p2 <= std_logic_vector(unsigned(E_reg_1047) + unsigned(E_3_reg_376));
    tmp_37_fu_769_p4 <= B_4_reg_421(31 downto 27);
    tmp_38_fu_779_p3 <= (tmp_9_fu_765_p1 & tmp_37_fu_769_p4);
    tmp_39_fu_793_p2 <= (tmp10_fu_787_p2 xor D_4_reg_399);
    tmp_3_fu_531_p1 <= B_1_reg_216(27 - 1 downto 0);
    tmp_40_fu_799_p1 <= std_logic_vector(resize(unsigned(t_5_reg_433),64));
    tmp_41_fu_816_p1 <= word_assign_4_reg_411(2 - 1 downto 0);
    tmp_42_fu_820_p4 <= word_assign_4_reg_411(31 downto 2);
    tmp_4_fu_461_p1 <= word_assign_1_reg_206(2 - 1 downto 0);
    tmp_5_fu_570_p1 <= B_2_reg_284(27 - 1 downto 0);
    tmp_6_fu_628_p1 <= word_assign_2_reg_273(2 - 1 downto 0);
    tmp_7_fu_667_p1 <= B_3_reg_353(27 - 1 downto 0);
    tmp_8_fu_737_p1 <= word_assign_3_reg_342(2 - 1 downto 0);
    tmp_9_fu_765_p1 <= B_4_reg_421(27 - 1 downto 0);
    tmp_fu_513_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(E1_reg_174));
    tmp_s_fu_535_p4 <= B_1_reg_216(31 downto 27);
end behav;
