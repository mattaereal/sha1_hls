// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SHA1ProcessMessageBlock.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic SHA1ProcessMessageBlock::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<3> SHA1ProcessMessageBlock::ap_const_lv3_0 = "000";
const sc_logic SHA1ProcessMessageBlock::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> SHA1ProcessMessageBlock::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> SHA1ProcessMessageBlock::ap_const_lv16_0 = "0000000000000000";
const sc_lv<6> SHA1ProcessMessageBlock::ap_const_lv6_0 = "000000";
const sc_lv<8> SHA1ProcessMessageBlock::ap_const_lv8_0 = "00000000";
const bool SHA1ProcessMessageBlock::ap_true = true;
const sc_lv<7> SHA1ProcessMessageBlock::ap_const_lv7_0 = "0000000";
const sc_lv<7> SHA1ProcessMessageBlock::ap_const_lv7_1 = "1";
const sc_lv<32> SHA1ProcessMessageBlock::ap_const_lv32_1 = "1";

SHA1ProcessMessageBlock::SHA1ProcessMessageBlock(sc_module_name name) : sc_module(name), mVcdFile(0) {
    W_U = new SHA1ProcessMessageBlock_W("W_U");
    W_U->clk(ap_clk);
    W_U->reset(ap_rst);
    W_U->i_address0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0);
    W_U->i_ce0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0);
    W_U->i_we0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0);
    W_U->i_d0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0);
    W_U->i_q0(W_i_q0);
    W_U->i_address1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1);
    W_U->i_ce1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1);
    W_U->i_we1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1);
    W_U->i_d1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1);
    W_U->i_q1(W_i_q1);
    W_U->t_address0(SHA1ProcessMessageBlock_Block_proc_U0_W_address0);
    W_U->t_ce0(SHA1ProcessMessageBlock_Block_proc_U0_W_ce0);
    W_U->t_we0(ap_var_for_const0);
    W_U->t_d0(ap_var_for_const1);
    W_U->t_q0(W_t_q0);
    W_U->t_address1(ap_var_for_const2);
    W_U->t_ce1(ap_var_for_const0);
    W_U->t_we1(ap_var_for_const0);
    W_U->t_d1(ap_var_for_const1);
    W_U->t_q1(W_t_q1);
    W_U->i_ce(ap_var_for_const3);
    W_U->t_ce(ap_var_for_const3);
    W_U->i_full_n(W_i_full_n);
    W_U->i_write(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done);
    W_U->t_empty_n(W_t_empty_n);
    W_U->t_read(SHA1ProcessMessageBlock_Block_proc_U0_ap_ready);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0 = new SHA1ProcessMessageBlock_Loop_loop1_proc("SHA1ProcessMessageBlock_Loop_loop1_proc_U0");
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_clk(ap_clk);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_rst(ap_rst);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_start(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_done(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_continue(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_idle(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->ap_ready(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->context_Message_Block_address0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->context_Message_Block_ce0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->context_Message_Block_q0(context_Message_Block_q0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->context_Message_Block_address1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->context_Message_Block_ce1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->context_Message_Block_q1(context_Message_Block_q1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_address0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_ce0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_we0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_d0(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_q0(W_i_q0);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_address1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_ce1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_we1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_d1(SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1);
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0->W_q1(W_i_q1);
    SHA1ProcessMessageBlock_Block_proc_U0 = new SHA1ProcessMessageBlock_Block_proc("SHA1ProcessMessageBlock_Block_proc_U0");
    SHA1ProcessMessageBlock_Block_proc_U0->ap_clk(ap_clk);
    SHA1ProcessMessageBlock_Block_proc_U0->ap_rst(ap_rst);
    SHA1ProcessMessageBlock_Block_proc_U0->ap_start(SHA1ProcessMessageBlock_Block_proc_U0_ap_start);
    SHA1ProcessMessageBlock_Block_proc_U0->ap_done(SHA1ProcessMessageBlock_Block_proc_U0_ap_done);
    SHA1ProcessMessageBlock_Block_proc_U0->ap_continue(SHA1ProcessMessageBlock_Block_proc_U0_ap_continue);
    SHA1ProcessMessageBlock_Block_proc_U0->ap_idle(SHA1ProcessMessageBlock_Block_proc_U0_ap_idle);
    SHA1ProcessMessageBlock_Block_proc_U0->ap_ready(SHA1ProcessMessageBlock_Block_proc_U0_ap_ready);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_address0(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_ce0(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_we0(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_d0(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_q0(context_Intermediate_Hash_q0);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_address1(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_ce1(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_we1(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_d1(SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Intermediate_Hash_q1(context_Intermediate_Hash_q1);
    SHA1ProcessMessageBlock_Block_proc_U0->W_address0(SHA1ProcessMessageBlock_Block_proc_U0_W_address0);
    SHA1ProcessMessageBlock_Block_proc_U0->W_ce0(SHA1ProcessMessageBlock_Block_proc_U0_W_ce0);
    SHA1ProcessMessageBlock_Block_proc_U0->W_q0(W_t_q0);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Message_Block_Index(SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index);
    SHA1ProcessMessageBlock_Block_proc_U0->context_Message_Block_Index_ap_vld(SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_SHA1ProcessMessageBlock_Block_proc_U0_ap_continue);

    SC_METHOD(thread_SHA1ProcessMessageBlock_Block_proc_U0_ap_start);
    sensitive << ( W_t_empty_n );
    sensitive << ( ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start );

    SC_METHOD(thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status);
    sensitive << ( W_i_full_n );

    SC_METHOD(thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue);
    sensitive << ( W_i_full_n );

    SC_METHOD(thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start);
    sensitive << ( ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start );

    SC_METHOD(thread_ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle );
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_ap_idle );
    sensitive << ( W_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_hs_ready );

    SC_METHOD(thread_ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_ap_ready );
    sensitive << ( ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready );
    sensitive << ( ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_ap_done );

    SC_METHOD(thread_ap_sig_hs_ready);
    sensitive << ( ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready );
    sensitive << ( ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready );

    SC_METHOD(thread_context_Intermediate_Hash_address0);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0 );

    SC_METHOD(thread_context_Intermediate_Hash_address1);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1 );

    SC_METHOD(thread_context_Intermediate_Hash_ce0);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0 );

    SC_METHOD(thread_context_Intermediate_Hash_ce1);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1 );

    SC_METHOD(thread_context_Intermediate_Hash_d0);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0 );

    SC_METHOD(thread_context_Intermediate_Hash_d1);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1 );

    SC_METHOD(thread_context_Intermediate_Hash_we0);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0 );

    SC_METHOD(thread_context_Intermediate_Hash_we1);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1 );

    SC_METHOD(thread_context_Message_Block_Index);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index );

    SC_METHOD(thread_context_Message_Block_Index_ap_vld);
    sensitive << ( SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld );

    SC_METHOD(thread_context_Message_Block_address0);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0 );

    SC_METHOD(thread_context_Message_Block_address1);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1 );

    SC_METHOD(thread_context_Message_Block_ce0);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0 );

    SC_METHOD(thread_context_Message_Block_ce1);
    sensitive << ( SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1 );

    SC_METHOD(thread_context_Message_Block_d0);

    SC_METHOD(thread_context_Message_Block_d1);

    SC_METHOD(thread_context_Message_Block_we0);

    SC_METHOD(thread_context_Message_Block_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready = SC_LOGIC_0;
    ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SHA1ProcessMessageBlock_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, context_Intermediate_Hash_address0, "(port)context_Intermediate_Hash_address0");
    sc_trace(mVcdFile, context_Intermediate_Hash_ce0, "(port)context_Intermediate_Hash_ce0");
    sc_trace(mVcdFile, context_Intermediate_Hash_d0, "(port)context_Intermediate_Hash_d0");
    sc_trace(mVcdFile, context_Intermediate_Hash_q0, "(port)context_Intermediate_Hash_q0");
    sc_trace(mVcdFile, context_Intermediate_Hash_we0, "(port)context_Intermediate_Hash_we0");
    sc_trace(mVcdFile, context_Intermediate_Hash_address1, "(port)context_Intermediate_Hash_address1");
    sc_trace(mVcdFile, context_Intermediate_Hash_ce1, "(port)context_Intermediate_Hash_ce1");
    sc_trace(mVcdFile, context_Intermediate_Hash_d1, "(port)context_Intermediate_Hash_d1");
    sc_trace(mVcdFile, context_Intermediate_Hash_q1, "(port)context_Intermediate_Hash_q1");
    sc_trace(mVcdFile, context_Intermediate_Hash_we1, "(port)context_Intermediate_Hash_we1");
    sc_trace(mVcdFile, context_Message_Block_Index, "(port)context_Message_Block_Index");
    sc_trace(mVcdFile, context_Message_Block_address0, "(port)context_Message_Block_address0");
    sc_trace(mVcdFile, context_Message_Block_ce0, "(port)context_Message_Block_ce0");
    sc_trace(mVcdFile, context_Message_Block_d0, "(port)context_Message_Block_d0");
    sc_trace(mVcdFile, context_Message_Block_q0, "(port)context_Message_Block_q0");
    sc_trace(mVcdFile, context_Message_Block_we0, "(port)context_Message_Block_we0");
    sc_trace(mVcdFile, context_Message_Block_address1, "(port)context_Message_Block_address1");
    sc_trace(mVcdFile, context_Message_Block_ce1, "(port)context_Message_Block_ce1");
    sc_trace(mVcdFile, context_Message_Block_d1, "(port)context_Message_Block_d1");
    sc_trace(mVcdFile, context_Message_Block_q1, "(port)context_Message_Block_q1");
    sc_trace(mVcdFile, context_Message_Block_we1, "(port)context_Message_Block_we1");
    sc_trace(mVcdFile, context_Message_Block_Index_ap_vld, "(port)context_Message_Block_Index_ap_vld");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, W_i_q0, "W_i_q0");
    sc_trace(mVcdFile, W_i_q1, "W_i_q1");
    sc_trace(mVcdFile, W_t_q0, "W_t_q0");
    sc_trace(mVcdFile, W_t_q1, "W_t_q1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1");
    sc_trace(mVcdFile, ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W, "ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status, "SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_ap_start, "SHA1ProcessMessageBlock_Block_proc_U0_ap_start");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_ap_done, "SHA1ProcessMessageBlock_Block_proc_U0_ap_done");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_ap_continue, "SHA1ProcessMessageBlock_Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_ap_idle, "SHA1ProcessMessageBlock_Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_ap_ready, "SHA1ProcessMessageBlock_Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1, "SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_W_address0, "SHA1ProcessMessageBlock_Block_proc_U0_W_address0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_W_ce0, "SHA1ProcessMessageBlock_Block_proc_U0_W_ce0");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index, "SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index");
    sc_trace(mVcdFile, SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld, "SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, W_i_full_n, "W_i_full_n");
    sc_trace(mVcdFile, W_t_empty_n, "W_t_empty_n");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_sig_hs_ready, "ap_sig_hs_ready");
    sc_trace(mVcdFile, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready, "ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready, "ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready, "ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready, "ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start, "ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start");
    sc_trace(mVcdFile, ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start, "ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start");
#endif

    }
    mHdltvinHandle.open("SHA1ProcessMessageBlock.hdltvin.dat");
    mHdltvoutHandle.open("SHA1ProcessMessageBlock.hdltvout.dat");
}

SHA1ProcessMessageBlock::~SHA1ProcessMessageBlock() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete W_U;
    delete SHA1ProcessMessageBlock_Loop_loop1_proc_U0;
    delete SHA1ProcessMessageBlock_Block_proc_U0;
}

void SHA1ProcessMessageBlock::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_logic_1;
}

void SHA1ProcessMessageBlock::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void SHA1ProcessMessageBlock::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void SHA1ProcessMessageBlock::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv7_0;
}

void SHA1ProcessMessageBlock::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_ready.read()))) {
            ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read())) {
            ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready = SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_ready.read()))) {
            ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read())) {
            ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read();
        }
    }
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Block_proc_U0_ap_continue() {
    SHA1ProcessMessageBlock_Block_proc_U0_ap_continue = ap_const_logic_1;
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Block_proc_U0_ap_start() {
    SHA1ProcessMessageBlock_Block_proc_U0_ap_start = (W_t_empty_n.read() & ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start.read());
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status() {
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status = W_i_full_n.read();
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue() {
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue = W_i_full_n.read();
}

void SHA1ProcessMessageBlock::thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start() {
    SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start = ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start.read();
}

void SHA1ProcessMessageBlock::thread_ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W() {
    ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done.read();
}

void SHA1ProcessMessageBlock::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void SHA1ProcessMessageBlock::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, SHA1ProcessMessageBlock_Block_proc_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, W_t_empty_n.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_ap_ready() {
    ap_ready = ap_sig_hs_ready.read();
}

void SHA1ProcessMessageBlock::thread_ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read())) {
        ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read())) {
        ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready = SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read();
    }
}

void SHA1ProcessMessageBlock::thread_ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read())) {
        ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start = ap_start.read();
    } else {
        ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read())) {
        ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read())) {
        ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read();
    }
}

void SHA1ProcessMessageBlock::thread_ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read())) {
        ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start = ap_start.read();
    } else {
        ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void SHA1ProcessMessageBlock::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, SHA1ProcessMessageBlock_Block_proc_U0_ap_done.read())) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_ap_sig_hs_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready.read()))) {
        ap_sig_hs_ready = ap_const_logic_1;
    } else {
        ap_sig_hs_ready = ap_const_logic_0;
    }
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_address0() {
    context_Intermediate_Hash_address0 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_address1() {
    context_Intermediate_Hash_address1 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_ce0() {
    context_Intermediate_Hash_ce0 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_ce1() {
    context_Intermediate_Hash_ce1 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_d0() {
    context_Intermediate_Hash_d0 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_d1() {
    context_Intermediate_Hash_d1 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_we0() {
    context_Intermediate_Hash_we0 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0.read();
}

void SHA1ProcessMessageBlock::thread_context_Intermediate_Hash_we1() {
    context_Intermediate_Hash_we1 = SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_Index() {
    context_Message_Block_Index = SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_Index_ap_vld() {
    context_Message_Block_Index_ap_vld = SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_address0() {
    context_Message_Block_address0 = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_address1() {
    context_Message_Block_address1 = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_ce0() {
    context_Message_Block_ce0 = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_ce1() {
    context_Message_Block_ce1 = SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1.read();
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_d0() {
    context_Message_Block_d0 = ap_const_lv8_0;
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_d1() {
    context_Message_Block_d1 = ap_const_lv8_0;
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_we0() {
    context_Message_Block_we0 = ap_const_logic_0;
}

void SHA1ProcessMessageBlock::thread_context_Message_Block_we1() {
    context_Message_Block_we1 = ap_const_logic_0;
}

void SHA1ProcessMessageBlock::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"context_Intermediate_Hash_address0\" :  \"" << context_Intermediate_Hash_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_ce0\" :  \"" << context_Intermediate_Hash_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_d0\" :  \"" << context_Intermediate_Hash_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"context_Intermediate_Hash_q0\" :  \"" << context_Intermediate_Hash_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_we0\" :  \"" << context_Intermediate_Hash_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_address1\" :  \"" << context_Intermediate_Hash_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_ce1\" :  \"" << context_Intermediate_Hash_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_d1\" :  \"" << context_Intermediate_Hash_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"context_Intermediate_Hash_q1\" :  \"" << context_Intermediate_Hash_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Intermediate_Hash_we1\" :  \"" << context_Intermediate_Hash_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_Index\" :  \"" << context_Message_Block_Index.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_address0\" :  \"" << context_Message_Block_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_ce0\" :  \"" << context_Message_Block_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_d0\" :  \"" << context_Message_Block_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"context_Message_Block_q0\" :  \"" << context_Message_Block_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_we0\" :  \"" << context_Message_Block_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_address1\" :  \"" << context_Message_Block_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_ce1\" :  \"" << context_Message_Block_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_d1\" :  \"" << context_Message_Block_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"context_Message_Block_q1\" :  \"" << context_Message_Block_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_we1\" :  \"" << context_Message_Block_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"context_Message_Block_Index_ap_vld\" :  \"" << context_Message_Block_Index_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

