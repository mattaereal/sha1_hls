// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SHA1ProcessMessageBlock_HH_
#define _SHA1ProcessMessageBlock_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "SHA1ProcessMessageBlock_Loop_loop1_proc.h"
#include "SHA1ProcessMessageBlock_Block_proc.h"
#include "SHA1ProcessMessageBlock_W.h"

namespace ap_rtl {

struct SHA1ProcessMessageBlock : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<3> > context_Intermediate_Hash_address0;
    sc_out< sc_logic > context_Intermediate_Hash_ce0;
    sc_out< sc_lv<32> > context_Intermediate_Hash_d0;
    sc_in< sc_lv<32> > context_Intermediate_Hash_q0;
    sc_out< sc_logic > context_Intermediate_Hash_we0;
    sc_out< sc_lv<3> > context_Intermediate_Hash_address1;
    sc_out< sc_logic > context_Intermediate_Hash_ce1;
    sc_out< sc_lv<32> > context_Intermediate_Hash_d1;
    sc_in< sc_lv<32> > context_Intermediate_Hash_q1;
    sc_out< sc_logic > context_Intermediate_Hash_we1;
    sc_out< sc_lv<16> > context_Message_Block_Index;
    sc_out< sc_lv<6> > context_Message_Block_address0;
    sc_out< sc_logic > context_Message_Block_ce0;
    sc_out< sc_lv<8> > context_Message_Block_d0;
    sc_in< sc_lv<8> > context_Message_Block_q0;
    sc_out< sc_logic > context_Message_Block_we0;
    sc_out< sc_lv<6> > context_Message_Block_address1;
    sc_out< sc_logic > context_Message_Block_ce1;
    sc_out< sc_lv<8> > context_Message_Block_d1;
    sc_in< sc_lv<8> > context_Message_Block_q1;
    sc_out< sc_logic > context_Message_Block_we1;
    sc_out< sc_logic > context_Message_Block_Index_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const3;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<7> > ap_var_for_const2;


    // Module declarations
    SHA1ProcessMessageBlock(sc_module_name name);
    SC_HAS_PROCESS(SHA1ProcessMessageBlock);

    ~SHA1ProcessMessageBlock();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    SHA1ProcessMessageBlock_W* W_U;
    SHA1ProcessMessageBlock_Loop_loop1_proc* SHA1ProcessMessageBlock_Loop_loop1_proc_U0;
    SHA1ProcessMessageBlock_Block_proc* SHA1ProcessMessageBlock_Block_proc_U0;
    sc_signal< sc_lv<32> > W_i_q0;
    sc_signal< sc_lv<32> > W_i_q1;
    sc_signal< sc_lv<32> > W_t_q0;
    sc_signal< sc_lv<32> > W_t_q1;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_done;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_idle;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready;
    sc_signal< sc_lv<6> > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce0;
    sc_signal< sc_lv<6> > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_address1;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_context_Message_Block_ce1;
    sc_signal< sc_lv<7> > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we0;
    sc_signal< sc_lv<32> > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d0;
    sc_signal< sc_lv<7> > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_address1;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_ce1;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_we1;
    sc_signal< sc_lv<32> > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_d1;
    sc_signal< sc_logic > ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_ap_start;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_ap_done;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_ap_continue;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_ap_idle;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_ap_ready;
    sc_signal< sc_lv<3> > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we0;
    sc_signal< sc_lv<32> > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d0;
    sc_signal< sc_lv<3> > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_address1;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_ce1;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_we1;
    sc_signal< sc_lv<32> > SHA1ProcessMessageBlock_Block_proc_U0_context_Intermediate_Hash_d1;
    sc_signal< sc_lv<7> > SHA1ProcessMessageBlock_Block_proc_U0_W_address0;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_W_ce0;
    sc_signal< sc_lv<16> > SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index;
    sc_signal< sc_logic > SHA1ProcessMessageBlock_Block_proc_U0_context_Message_Block_Index_ap_vld;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > W_i_full_n;
    sc_signal< sc_logic > W_t_empty_n;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_sig_hs_ready;
    sc_signal< sc_logic > ap_reg_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_reg_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start;
    sc_signal< sc_logic > ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_true;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_SHA1ProcessMessageBlock_Block_proc_U0_ap_continue();
    void thread_SHA1ProcessMessageBlock_Block_proc_U0_ap_start();
    void thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W_pipo_status();
    void thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_continue();
    void thread_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start();
    void thread_ap_chn_write_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_W();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_ready();
    void thread_ap_sig_SHA1ProcessMessageBlock_Block_proc_U0_ap_start();
    void thread_ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_ready();
    void thread_ap_sig_SHA1ProcessMessageBlock_Loop_loop1_proc_U0_ap_start();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_hs_ready();
    void thread_context_Intermediate_Hash_address0();
    void thread_context_Intermediate_Hash_address1();
    void thread_context_Intermediate_Hash_ce0();
    void thread_context_Intermediate_Hash_ce1();
    void thread_context_Intermediate_Hash_d0();
    void thread_context_Intermediate_Hash_d1();
    void thread_context_Intermediate_Hash_we0();
    void thread_context_Intermediate_Hash_we1();
    void thread_context_Message_Block_Index();
    void thread_context_Message_Block_Index_ap_vld();
    void thread_context_Message_Block_address0();
    void thread_context_Message_Block_address1();
    void thread_context_Message_Block_ce0();
    void thread_context_Message_Block_ce1();
    void thread_context_Message_Block_d0();
    void thread_context_Message_Block_d1();
    void thread_context_Message_Block_we0();
    void thread_context_Message_Block_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
