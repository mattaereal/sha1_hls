// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SHA1ProcessMessageBlock_Swapping.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool SHA1ProcessMessageBlock_Swapping::ap_true = true;
const sc_lv<32> SHA1ProcessMessageBlock_Swapping::ap_const_lv32_2 = "10";
const sc_lv<32> SHA1ProcessMessageBlock_Swapping::ap_const_lv32_1F = "11111";
const sc_logic SHA1ProcessMessageBlock_Swapping::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic SHA1ProcessMessageBlock_Swapping::ap_const_logic_0 = sc_dt::Log_0;

SHA1ProcessMessageBlock_Swapping::SHA1ProcessMessageBlock_Swapping(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_C_write_assign_fu_66_p3);
    sensitive << ( tmp_fu_52_p1 );
    sensitive << ( tmp_64_i_fu_56_p4 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( E );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( A );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( B );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( C_write_assign_fu_66_p3 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( D );

    SC_METHOD(thread_tmp_64_i_fu_56_p4);
    sensitive << ( B_r );

    SC_METHOD(thread_tmp_fu_52_p1);
    sensitive << ( B_r );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SHA1ProcessMessageBlock_Swapping_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, B, "(port)B");
    sc_trace(mVcdFile, B_r, "(port)B_r");
    sc_trace(mVcdFile, D, "(port)D");
    sc_trace(mVcdFile, E, "(port)E");
    sc_trace(mVcdFile, A, "(port)A");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_52_p1, "tmp_fu_52_p1");
    sc_trace(mVcdFile, tmp_64_i_fu_56_p4, "tmp_64_i_fu_56_p4");
    sc_trace(mVcdFile, C_write_assign_fu_66_p3, "C_write_assign_fu_66_p3");
#endif

    }
}

SHA1ProcessMessageBlock_Swapping::~SHA1ProcessMessageBlock_Swapping() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void SHA1ProcessMessageBlock_Swapping::thread_C_write_assign_fu_66_p3() {
    C_write_assign_fu_66_p3 = esl_concat<2,30>(tmp_fu_52_p1.read(), tmp_64_i_fu_56_p4.read());
}

void SHA1ProcessMessageBlock_Swapping::thread_ap_return_0() {
    ap_return_0 = E.read();
}

void SHA1ProcessMessageBlock_Swapping::thread_ap_return_1() {
    ap_return_1 = A.read();
}

void SHA1ProcessMessageBlock_Swapping::thread_ap_return_2() {
    ap_return_2 = B.read();
}

void SHA1ProcessMessageBlock_Swapping::thread_ap_return_3() {
    ap_return_3 = C_write_assign_fu_66_p3.read();
}

void SHA1ProcessMessageBlock_Swapping::thread_ap_return_4() {
    ap_return_4 = D.read();
}

void SHA1ProcessMessageBlock_Swapping::thread_tmp_64_i_fu_56_p4() {
    tmp_64_i_fu_56_p4 = B_r.read().range(31, 2);
}

void SHA1ProcessMessageBlock_Swapping::thread_tmp_fu_52_p1() {
    tmp_fu_52_p1 = B_r.read().range(2-1, 0);
}

}

