

================================================================
== Vivado HLS Report for 'SHA1ProcessMessageBlock'
================================================================
* Date:           Tue Sep 13 01:56:44 2016

* Version:        2016.1 (Build 1538259 on Fri Apr 08 16:12:49 MDT 2016)
* Project:        sha1_hls
* Solution:       old_solution7
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.40|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  160|  160|  161|  161|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 161
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
	157  / true
157 --> 
	158  / true
158 --> 
	159  / true
159 --> 
	160  / true
160 --> 
	161  / true
161 --> 
* FSM state operations: 

 <State 1>: 7.03ns
ST_1: context_read [1/1] 0.00ns
.preheader8.preheader:2  %context_read = call i688 @_ssdm_op_Read.ap_auto.i688P(i688* %context)

ST_1: tmp_1 [1/1] 0.00ns
.preheader8.preheader:3  %tmp_1 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 184, i32 191)

ST_1: tmp_2 [1/1] 0.00ns
.preheader8.preheader:4  %tmp_2 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 192, i32 199)

ST_1: tmp [1/1] 0.00ns
.preheader8.preheader:5  %tmp = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 176, i32 183)

ST_1: tmp_6 [1/1] 0.00ns
.preheader8.preheader:6  %tmp_6 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 200, i32 207)

ST_1: W_0 [1/1] 0.00ns
.preheader8.preheader:7  %W_0 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp, i8 %tmp_1, i8 %tmp_2, i8 %tmp_6)

ST_1: tmp_3 [1/1] 0.00ns
.preheader8.preheader:8  %tmp_3 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 216, i32 223)

ST_1: tmp_4 [1/1] 0.00ns
.preheader8.preheader:9  %tmp_4 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 224, i32 231)

ST_1: tmp_s [1/1] 0.00ns
.preheader8.preheader:10  %tmp_s = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 208, i32 215)

ST_1: tmp_5 [1/1] 0.00ns
.preheader8.preheader:11  %tmp_5 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 232, i32 239)

ST_1: tmp_7 [1/1] 0.00ns
.preheader8.preheader:13  %tmp_7 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 248, i32 255)

ST_1: tmp_8 [1/1] 0.00ns
.preheader8.preheader:14  %tmp_8 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 256, i32 263)

ST_1: tmp_9 [1/1] 0.00ns
.preheader8.preheader:15  %tmp_9 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 240, i32 247)

ST_1: tmp_10 [1/1] 0.00ns
.preheader8.preheader:16  %tmp_10 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 264, i32 271)

ST_1: tmp_11 [1/1] 0.00ns
.preheader8.preheader:18  %tmp_11 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 280, i32 287)

ST_1: tmp_12 [1/1] 0.00ns
.preheader8.preheader:19  %tmp_12 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 288, i32 295)

ST_1: tmp_13 [1/1] 0.00ns
.preheader8.preheader:20  %tmp_13 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 272, i32 279)

ST_1: tmp_14 [1/1] 0.00ns
.preheader8.preheader:21  %tmp_14 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 296, i32 303)

ST_1: tmp_15 [1/1] 0.00ns
.preheader8.preheader:23  %tmp_15 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 312, i32 319)

ST_1: tmp_16 [1/1] 0.00ns
.preheader8.preheader:24  %tmp_16 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 320, i32 327)

ST_1: tmp_17 [1/1] 0.00ns
.preheader8.preheader:25  %tmp_17 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 304, i32 311)

ST_1: tmp_18 [1/1] 0.00ns
.preheader8.preheader:26  %tmp_18 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 328, i32 335)

ST_1: tmp_19 [1/1] 0.00ns
.preheader8.preheader:28  %tmp_19 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 344, i32 351)

ST_1: tmp_20 [1/1] 0.00ns
.preheader8.preheader:29  %tmp_20 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 352, i32 359)

ST_1: tmp_21 [1/1] 0.00ns
.preheader8.preheader:30  %tmp_21 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 336, i32 343)

ST_1: tmp_22 [1/1] 0.00ns
.preheader8.preheader:31  %tmp_22 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 360, i32 367)

ST_1: tmp_23 [1/1] 0.00ns
.preheader8.preheader:33  %tmp_23 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 376, i32 383)

ST_1: tmp_24 [1/1] 0.00ns
.preheader8.preheader:34  %tmp_24 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 384, i32 391)

ST_1: tmp_25 [1/1] 0.00ns
.preheader8.preheader:35  %tmp_25 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 368, i32 375)

ST_1: tmp_26 [1/1] 0.00ns
.preheader8.preheader:36  %tmp_26 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 392, i32 399)

ST_1: tmp_27 [1/1] 0.00ns
.preheader8.preheader:38  %tmp_27 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 408, i32 415)

ST_1: tmp_28 [1/1] 0.00ns
.preheader8.preheader:39  %tmp_28 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 416, i32 423)

ST_1: tmp_29 [1/1] 0.00ns
.preheader8.preheader:40  %tmp_29 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 400, i32 407)

ST_1: tmp_30 [1/1] 0.00ns
.preheader8.preheader:41  %tmp_30 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 424, i32 431)

ST_1: tmp_31 [1/1] 0.00ns
.preheader8.preheader:43  %tmp_31 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 440, i32 447)

ST_1: tmp_32 [1/1] 0.00ns
.preheader8.preheader:44  %tmp_32 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 448, i32 455)

ST_1: tmp_33 [1/1] 0.00ns
.preheader8.preheader:45  %tmp_33 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 432, i32 439)

ST_1: tmp_34 [1/1] 0.00ns
.preheader8.preheader:46  %tmp_34 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 456, i32 463)

ST_1: tmp_35 [1/1] 0.00ns
.preheader8.preheader:48  %tmp_35 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 472, i32 479)

ST_1: tmp_36 [1/1] 0.00ns
.preheader8.preheader:49  %tmp_36 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 480, i32 487)

ST_1: tmp_37 [1/1] 0.00ns
.preheader8.preheader:50  %tmp_37 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 464, i32 471)

ST_1: tmp_38 [1/1] 0.00ns
.preheader8.preheader:51  %tmp_38 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 488, i32 495)

ST_1: tmp_39 [1/1] 0.00ns
.preheader8.preheader:53  %tmp_39 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 504, i32 511)

ST_1: tmp_40 [1/1] 0.00ns
.preheader8.preheader:54  %tmp_40 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 512, i32 519)

ST_1: tmp_41 [1/1] 0.00ns
.preheader8.preheader:55  %tmp_41 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 496, i32 503)

ST_1: tmp_42 [1/1] 0.00ns
.preheader8.preheader:56  %tmp_42 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 520, i32 527)

ST_1: tmp_43 [1/1] 0.00ns
.preheader8.preheader:58  %tmp_43 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 536, i32 543)

ST_1: tmp_44 [1/1] 0.00ns
.preheader8.preheader:59  %tmp_44 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 544, i32 551)

ST_1: tmp_45 [1/1] 0.00ns
.preheader8.preheader:60  %tmp_45 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 528, i32 535)

ST_1: tmp_46 [1/1] 0.00ns
.preheader8.preheader:61  %tmp_46 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 552, i32 559)

ST_1: tmp_47 [1/1] 0.00ns
.preheader8.preheader:63  %tmp_47 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 568, i32 575)

ST_1: tmp_48 [1/1] 0.00ns
.preheader8.preheader:64  %tmp_48 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 576, i32 583)

ST_1: tmp_49 [1/1] 0.00ns
.preheader8.preheader:65  %tmp_49 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 560, i32 567)

ST_1: tmp_50 [1/1] 0.00ns
.preheader8.preheader:66  %tmp_50 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 584, i32 591)

ST_1: tmp_51 [1/1] 0.00ns
.preheader8.preheader:68  %tmp_51 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 600, i32 607)

ST_1: tmp_52 [1/1] 0.00ns
.preheader8.preheader:69  %tmp_52 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 608, i32 615)

ST_1: tmp_53 [1/1] 0.00ns
.preheader8.preheader:70  %tmp_53 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 592, i32 599)

ST_1: tmp_54 [1/1] 0.00ns
.preheader8.preheader:71  %tmp_54 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 616, i32 623)

ST_1: tmp_55 [1/1] 0.00ns
.preheader8.preheader:73  %tmp_55 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 632, i32 639)

ST_1: tmp_56 [1/1] 0.00ns
.preheader8.preheader:74  %tmp_56 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 640, i32 647)

ST_1: tmp_57 [1/1] 0.00ns
.preheader8.preheader:75  %tmp_57 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 624, i32 631)

ST_1: tmp_63 [1/1] 0.00ns
.preheader8.preheader:76  %tmp_63 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 648, i32 655)

ST_1: tmp_64 [1/1] 0.00ns
.preheader8.preheader:78  %tmp_64 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 664, i32 671)

ST_1: tmp_65 [1/1] 0.00ns
.preheader8.preheader:79  %tmp_65 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 672, i32 679)

ST_1: tmp_66 [1/1] 0.00ns
.preheader8.preheader:80  %tmp_66 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 656, i32 663)

ST_1: tmp_67 [1/1] 0.00ns
.preheader8.preheader:81  %tmp_67 = call i8 @_ssdm_op_PartSelect.i8.i688.i32.i32(i688 %context_read, i32 680, i32 687)

ST_1: A [1/1] 0.00ns
.preheader8.preheader:339  %A = trunc i688 %context_read to i32

ST_1: B [1/1] 0.00ns
.preheader8.preheader:340  %B = call i32 @_ssdm_op_PartSelect.i32.i688.i32.i32(i688 %context_read, i32 32, i32 63)

ST_1: C [1/1] 0.00ns
.preheader8.preheader:341  %C = call i32 @_ssdm_op_PartSelect.i32.i688.i32.i32(i688 %context_read, i32 64, i32 95)

ST_1: D [1/1] 0.00ns
.preheader8.preheader:342  %D = call i32 @_ssdm_op_PartSelect.i32.i688.i32.i32(i688 %context_read, i32 96, i32 127)

ST_1: E [1/1] 0.00ns
.preheader8.preheader:343  %E = call i32 @_ssdm_op_PartSelect.i32.i688.i32.i32(i688 %context_read, i32 128, i32 159)

ST_1: tmp_69 [1/1] 7.03ns
.preheader8.preheader:344  %tmp_69 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A)

ST_1: tmp131 [1/1] 2.44ns
.preheader8.preheader:350  %tmp131 = add i32 1518500249, %W_0


 <State 2>: 7.78ns
ST_2: tmp_70 [1/1] 0.00ns (grouped into LUT with out node tmp_73)
.preheader8.preheader:345  %tmp_70 = and i32 %C, %B

ST_2: tmp_71 [1/1] 0.00ns (grouped into LUT with out node tmp_73)
.preheader8.preheader:346  %tmp_71 = xor i32 %B, -1

ST_2: tmp_72 [1/1] 0.00ns (grouped into LUT with out node tmp_73)
.preheader8.preheader:347  %tmp_72 = and i32 %D, %tmp_71

ST_2: tmp_73 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:348  %tmp_73 = or i32 %tmp_72, %tmp_70

ST_2: tmp130 [1/1] 2.44ns
.preheader8.preheader:349  %tmp130 = add i32 %E, %tmp_69

ST_2: tmp132 [1/1] 1.97ns
.preheader8.preheader:351  %tmp132 = add i32 %tmp_73, %tmp131

ST_2: temp_1 [1/1] 1.97ns
.preheader8.preheader:352  %temp_1 = add i32 %tmp130, %tmp132

ST_2: call_ret1 [1/1] 2.47ns
.preheader8.preheader:353  %call_ret1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A, i32 %B, i32 %C, i32 %D, i32 %temp_1)

ST_2: A_ret [1/1] 0.00ns
.preheader8.preheader:355  %A_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 1

ST_2: B_ret [1/1] 0.00ns
.preheader8.preheader:356  %B_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 2

ST_2: C_ret [1/1] 0.00ns
.preheader8.preheader:357  %C_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 3

ST_2: D_ret [1/1] 0.00ns
.preheader8.preheader:358  %D_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 4


 <State 3>: 7.03ns
ST_3: W_1 [1/1] 0.00ns
.preheader8.preheader:12  %W_1 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_s, i8 %tmp_3, i8 %tmp_4, i8 %tmp_5)

ST_3: tmp_33_1 [1/1] 7.03ns
.preheader8.preheader:359  %tmp_33_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret)

ST_3: tmp134 [1/1] 2.44ns
.preheader8.preheader:365  %tmp134 = add i32 1518500249, %W_1


 <State 4>: 7.78ns
ST_4: call_ret2 [1/1] 0.00ns (grouped into LUT with out node tmp133)
.preheader8.preheader:354  %call_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 0

ST_4: tmp_34_1 [1/1] 0.00ns (grouped into LUT with out node tmp_37_1)
.preheader8.preheader:360  %tmp_34_1 = and i32 %C_ret, %B_ret

ST_4: tmp_35_1 [1/1] 0.00ns (grouped into LUT with out node tmp_37_1)
.preheader8.preheader:361  %tmp_35_1 = xor i32 %B_ret, -1

ST_4: tmp_36_1 [1/1] 0.00ns (grouped into LUT with out node tmp_37_1)
.preheader8.preheader:362  %tmp_36_1 = and i32 %D_ret, %tmp_35_1

ST_4: tmp_37_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:363  %tmp_37_1 = or i32 %tmp_36_1, %tmp_34_1

ST_4: tmp133 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:364  %tmp133 = add i32 %call_ret2, %tmp_33_1

ST_4: tmp135 [1/1] 1.97ns
.preheader8.preheader:366  %tmp135 = add i32 %tmp_37_1, %tmp134

ST_4: temp_1_1 [1/1] 1.97ns
.preheader8.preheader:367  %temp_1_1 = add i32 %tmp133, %tmp135

ST_4: call_ret47_1 [1/1] 2.47ns
.preheader8.preheader:368  %call_ret47_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret, i32 %B_ret, i32 %C_ret, i32 %D_ret, i32 %temp_1_1)

ST_4: A_ret_1 [1/1] 0.00ns
.preheader8.preheader:370  %A_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 1

ST_4: B_ret_1 [1/1] 0.00ns
.preheader8.preheader:371  %B_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 2

ST_4: C_ret_1 [1/1] 0.00ns
.preheader8.preheader:372  %C_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 3

ST_4: D_ret_1 [1/1] 0.00ns
.preheader8.preheader:373  %D_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 4


 <State 5>: 7.03ns
ST_5: W_2 [1/1] 0.00ns
.preheader8.preheader:17  %W_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_9, i8 %tmp_7, i8 %tmp_8, i8 %tmp_10)

ST_5: tmp_33_2 [1/1] 7.03ns
.preheader8.preheader:374  %tmp_33_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_1)

ST_5: tmp137 [1/1] 2.44ns
.preheader8.preheader:380  %tmp137 = add i32 1518500249, %W_2


 <State 6>: 7.78ns
ST_6: call_ret23_1 [1/1] 0.00ns (grouped into LUT with out node tmp136)
.preheader8.preheader:369  %call_ret23_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_1, 0

ST_6: tmp_34_2 [1/1] 0.00ns (grouped into LUT with out node tmp_37_2)
.preheader8.preheader:375  %tmp_34_2 = and i32 %C_ret_1, %B_ret_1

ST_6: tmp_35_2 [1/1] 0.00ns (grouped into LUT with out node tmp_37_2)
.preheader8.preheader:376  %tmp_35_2 = xor i32 %B_ret_1, -1

ST_6: tmp_36_2 [1/1] 0.00ns (grouped into LUT with out node tmp_37_2)
.preheader8.preheader:377  %tmp_36_2 = and i32 %D_ret_1, %tmp_35_2

ST_6: tmp_37_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:378  %tmp_37_2 = or i32 %tmp_36_2, %tmp_34_2

ST_6: tmp136 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:379  %tmp136 = add i32 %call_ret23_1, %tmp_33_2

ST_6: tmp138 [1/1] 1.97ns
.preheader8.preheader:381  %tmp138 = add i32 %tmp_37_2, %tmp137

ST_6: temp_1_2 [1/1] 1.97ns
.preheader8.preheader:382  %temp_1_2 = add i32 %tmp136, %tmp138

ST_6: call_ret47_2 [1/1] 2.47ns
.preheader8.preheader:383  %call_ret47_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_1, i32 %B_ret_1, i32 %C_ret_1, i32 %D_ret_1, i32 %temp_1_2)

ST_6: A_ret_2 [1/1] 0.00ns
.preheader8.preheader:385  %A_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 1

ST_6: B_ret_2 [1/1] 0.00ns
.preheader8.preheader:386  %B_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 2

ST_6: C_ret_2 [1/1] 0.00ns
.preheader8.preheader:387  %C_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 3

ST_6: D_ret_2 [1/1] 0.00ns
.preheader8.preheader:388  %D_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 4


 <State 7>: 7.03ns
ST_7: W_3 [1/1] 0.00ns
.preheader8.preheader:22  %W_3 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_13, i8 %tmp_11, i8 %tmp_12, i8 %tmp_14)

ST_7: tmp_33_3 [1/1] 7.03ns
.preheader8.preheader:389  %tmp_33_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_2)

ST_7: tmp140 [1/1] 2.44ns
.preheader8.preheader:395  %tmp140 = add i32 1518500249, %W_3


 <State 8>: 7.78ns
ST_8: call_ret23_2 [1/1] 0.00ns (grouped into LUT with out node tmp139)
.preheader8.preheader:384  %call_ret23_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_2, 0

ST_8: tmp_34_3 [1/1] 0.00ns (grouped into LUT with out node tmp_37_3)
.preheader8.preheader:390  %tmp_34_3 = and i32 %C_ret_2, %B_ret_2

ST_8: tmp_35_3 [1/1] 0.00ns (grouped into LUT with out node tmp_37_3)
.preheader8.preheader:391  %tmp_35_3 = xor i32 %B_ret_2, -1

ST_8: tmp_36_3 [1/1] 0.00ns (grouped into LUT with out node tmp_37_3)
.preheader8.preheader:392  %tmp_36_3 = and i32 %D_ret_2, %tmp_35_3

ST_8: tmp_37_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:393  %tmp_37_3 = or i32 %tmp_36_3, %tmp_34_3

ST_8: tmp139 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:394  %tmp139 = add i32 %call_ret23_2, %tmp_33_3

ST_8: tmp141 [1/1] 1.97ns
.preheader8.preheader:396  %tmp141 = add i32 %tmp_37_3, %tmp140

ST_8: temp_1_3 [1/1] 1.97ns
.preheader8.preheader:397  %temp_1_3 = add i32 %tmp139, %tmp141

ST_8: call_ret47_3 [1/1] 2.47ns
.preheader8.preheader:398  %call_ret47_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_2, i32 %B_ret_2, i32 %C_ret_2, i32 %D_ret_2, i32 %temp_1_3)

ST_8: A_ret_3 [1/1] 0.00ns
.preheader8.preheader:400  %A_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 1

ST_8: B_ret_3 [1/1] 0.00ns
.preheader8.preheader:401  %B_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 2

ST_8: C_ret_3 [1/1] 0.00ns
.preheader8.preheader:402  %C_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 3

ST_8: D_ret_3 [1/1] 0.00ns
.preheader8.preheader:403  %D_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 4


 <State 9>: 7.03ns
ST_9: W_4 [1/1] 0.00ns
.preheader8.preheader:27  %W_4 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_17, i8 %tmp_15, i8 %tmp_16, i8 %tmp_18)

ST_9: tmp_33_4 [1/1] 7.03ns
.preheader8.preheader:404  %tmp_33_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_3)

ST_9: tmp143 [1/1] 2.44ns
.preheader8.preheader:410  %tmp143 = add i32 1518500249, %W_4


 <State 10>: 7.78ns
ST_10: call_ret23_3 [1/1] 0.00ns (grouped into LUT with out node tmp142)
.preheader8.preheader:399  %call_ret23_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_3, 0

ST_10: tmp_34_4 [1/1] 0.00ns (grouped into LUT with out node tmp_37_4)
.preheader8.preheader:405  %tmp_34_4 = and i32 %C_ret_3, %B_ret_3

ST_10: tmp_35_4 [1/1] 0.00ns (grouped into LUT with out node tmp_37_4)
.preheader8.preheader:406  %tmp_35_4 = xor i32 %B_ret_3, -1

ST_10: tmp_36_4 [1/1] 0.00ns (grouped into LUT with out node tmp_37_4)
.preheader8.preheader:407  %tmp_36_4 = and i32 %D_ret_3, %tmp_35_4

ST_10: tmp_37_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:408  %tmp_37_4 = or i32 %tmp_36_4, %tmp_34_4

ST_10: tmp142 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:409  %tmp142 = add i32 %call_ret23_3, %tmp_33_4

ST_10: tmp144 [1/1] 1.97ns
.preheader8.preheader:411  %tmp144 = add i32 %tmp_37_4, %tmp143

ST_10: temp_1_4 [1/1] 1.97ns
.preheader8.preheader:412  %temp_1_4 = add i32 %tmp142, %tmp144

ST_10: call_ret47_4 [1/1] 2.47ns
.preheader8.preheader:413  %call_ret47_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_3, i32 %B_ret_3, i32 %C_ret_3, i32 %D_ret_3, i32 %temp_1_4)

ST_10: A_ret_4 [1/1] 0.00ns
.preheader8.preheader:415  %A_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 1

ST_10: B_ret_4 [1/1] 0.00ns
.preheader8.preheader:416  %B_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 2

ST_10: C_ret_4 [1/1] 0.00ns
.preheader8.preheader:417  %C_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 3

ST_10: D_ret_4 [1/1] 0.00ns
.preheader8.preheader:418  %D_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 4


 <State 11>: 7.03ns
ST_11: W_5 [1/1] 0.00ns
.preheader8.preheader:32  %W_5 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_21, i8 %tmp_19, i8 %tmp_20, i8 %tmp_22)

ST_11: tmp_33_5 [1/1] 7.03ns
.preheader8.preheader:419  %tmp_33_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_4)

ST_11: tmp146 [1/1] 2.44ns
.preheader8.preheader:425  %tmp146 = add i32 1518500249, %W_5


 <State 12>: 7.78ns
ST_12: call_ret23_4 [1/1] 0.00ns (grouped into LUT with out node tmp145)
.preheader8.preheader:414  %call_ret23_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_4, 0

ST_12: tmp_34_5 [1/1] 0.00ns (grouped into LUT with out node tmp_37_5)
.preheader8.preheader:420  %tmp_34_5 = and i32 %C_ret_4, %B_ret_4

ST_12: tmp_35_5 [1/1] 0.00ns (grouped into LUT with out node tmp_37_5)
.preheader8.preheader:421  %tmp_35_5 = xor i32 %B_ret_4, -1

ST_12: tmp_36_5 [1/1] 0.00ns (grouped into LUT with out node tmp_37_5)
.preheader8.preheader:422  %tmp_36_5 = and i32 %D_ret_4, %tmp_35_5

ST_12: tmp_37_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:423  %tmp_37_5 = or i32 %tmp_36_5, %tmp_34_5

ST_12: tmp145 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:424  %tmp145 = add i32 %call_ret23_4, %tmp_33_5

ST_12: tmp147 [1/1] 1.97ns
.preheader8.preheader:426  %tmp147 = add i32 %tmp_37_5, %tmp146

ST_12: temp_1_5 [1/1] 1.97ns
.preheader8.preheader:427  %temp_1_5 = add i32 %tmp145, %tmp147

ST_12: call_ret47_5 [1/1] 2.47ns
.preheader8.preheader:428  %call_ret47_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_4, i32 %B_ret_4, i32 %C_ret_4, i32 %D_ret_4, i32 %temp_1_5)

ST_12: A_ret_5 [1/1] 0.00ns
.preheader8.preheader:430  %A_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 1

ST_12: B_ret_5 [1/1] 0.00ns
.preheader8.preheader:431  %B_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 2

ST_12: C_ret_5 [1/1] 0.00ns
.preheader8.preheader:432  %C_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 3

ST_12: D_ret_5 [1/1] 0.00ns
.preheader8.preheader:433  %D_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 4


 <State 13>: 7.03ns
ST_13: W_6 [1/1] 0.00ns
.preheader8.preheader:37  %W_6 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_25, i8 %tmp_23, i8 %tmp_24, i8 %tmp_26)

ST_13: tmp_33_6 [1/1] 7.03ns
.preheader8.preheader:434  %tmp_33_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_5)

ST_13: tmp149 [1/1] 2.44ns
.preheader8.preheader:440  %tmp149 = add i32 1518500249, %W_6


 <State 14>: 7.78ns
ST_14: call_ret23_5 [1/1] 0.00ns (grouped into LUT with out node tmp148)
.preheader8.preheader:429  %call_ret23_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_5, 0

ST_14: tmp_34_6 [1/1] 0.00ns (grouped into LUT with out node tmp_37_6)
.preheader8.preheader:435  %tmp_34_6 = and i32 %C_ret_5, %B_ret_5

ST_14: tmp_35_6 [1/1] 0.00ns (grouped into LUT with out node tmp_37_6)
.preheader8.preheader:436  %tmp_35_6 = xor i32 %B_ret_5, -1

ST_14: tmp_36_6 [1/1] 0.00ns (grouped into LUT with out node tmp_37_6)
.preheader8.preheader:437  %tmp_36_6 = and i32 %D_ret_5, %tmp_35_6

ST_14: tmp_37_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:438  %tmp_37_6 = or i32 %tmp_36_6, %tmp_34_6

ST_14: tmp148 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:439  %tmp148 = add i32 %call_ret23_5, %tmp_33_6

ST_14: tmp150 [1/1] 1.97ns
.preheader8.preheader:441  %tmp150 = add i32 %tmp_37_6, %tmp149

ST_14: temp_1_6 [1/1] 1.97ns
.preheader8.preheader:442  %temp_1_6 = add i32 %tmp148, %tmp150

ST_14: call_ret47_6 [1/1] 2.47ns
.preheader8.preheader:443  %call_ret47_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_5, i32 %B_ret_5, i32 %C_ret_5, i32 %D_ret_5, i32 %temp_1_6)

ST_14: A_ret_6 [1/1] 0.00ns
.preheader8.preheader:445  %A_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 1

ST_14: B_ret_6 [1/1] 0.00ns
.preheader8.preheader:446  %B_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 2

ST_14: C_ret_6 [1/1] 0.00ns
.preheader8.preheader:447  %C_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 3

ST_14: D_ret_6 [1/1] 0.00ns
.preheader8.preheader:448  %D_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 4


 <State 15>: 7.03ns
ST_15: W_7 [1/1] 0.00ns
.preheader8.preheader:42  %W_7 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_29, i8 %tmp_27, i8 %tmp_28, i8 %tmp_30)

ST_15: tmp_33_7 [1/1] 7.03ns
.preheader8.preheader:449  %tmp_33_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_6)

ST_15: tmp152 [1/1] 2.44ns
.preheader8.preheader:455  %tmp152 = add i32 1518500249, %W_7


 <State 16>: 7.78ns
ST_16: call_ret23_6 [1/1] 0.00ns (grouped into LUT with out node tmp151)
.preheader8.preheader:444  %call_ret23_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_6, 0

ST_16: tmp_34_7 [1/1] 0.00ns (grouped into LUT with out node tmp_37_7)
.preheader8.preheader:450  %tmp_34_7 = and i32 %C_ret_6, %B_ret_6

ST_16: tmp_35_7 [1/1] 0.00ns (grouped into LUT with out node tmp_37_7)
.preheader8.preheader:451  %tmp_35_7 = xor i32 %B_ret_6, -1

ST_16: tmp_36_7 [1/1] 0.00ns (grouped into LUT with out node tmp_37_7)
.preheader8.preheader:452  %tmp_36_7 = and i32 %D_ret_6, %tmp_35_7

ST_16: tmp_37_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:453  %tmp_37_7 = or i32 %tmp_36_7, %tmp_34_7

ST_16: tmp151 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:454  %tmp151 = add i32 %call_ret23_6, %tmp_33_7

ST_16: tmp153 [1/1] 1.97ns
.preheader8.preheader:456  %tmp153 = add i32 %tmp_37_7, %tmp152

ST_16: temp_1_7 [1/1] 1.97ns
.preheader8.preheader:457  %temp_1_7 = add i32 %tmp151, %tmp153

ST_16: call_ret47_7 [1/1] 2.47ns
.preheader8.preheader:458  %call_ret47_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_6, i32 %B_ret_6, i32 %C_ret_6, i32 %D_ret_6, i32 %temp_1_7)

ST_16: A_ret_7 [1/1] 0.00ns
.preheader8.preheader:460  %A_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 1

ST_16: B_ret_7 [1/1] 0.00ns
.preheader8.preheader:461  %B_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 2

ST_16: C_ret_7 [1/1] 0.00ns
.preheader8.preheader:462  %C_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 3

ST_16: D_ret_7 [1/1] 0.00ns
.preheader8.preheader:463  %D_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 4


 <State 17>: 7.03ns
ST_17: W_8 [1/1] 0.00ns
.preheader8.preheader:47  %W_8 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_33, i8 %tmp_31, i8 %tmp_32, i8 %tmp_34)

ST_17: tmp_33_8 [1/1] 7.03ns
.preheader8.preheader:464  %tmp_33_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_7)

ST_17: tmp155 [1/1] 2.44ns
.preheader8.preheader:470  %tmp155 = add i32 1518500249, %W_8


 <State 18>: 7.78ns
ST_18: call_ret23_7 [1/1] 0.00ns (grouped into LUT with out node tmp154)
.preheader8.preheader:459  %call_ret23_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_7, 0

ST_18: tmp_34_8 [1/1] 0.00ns (grouped into LUT with out node tmp_37_8)
.preheader8.preheader:465  %tmp_34_8 = and i32 %C_ret_7, %B_ret_7

ST_18: tmp_35_8 [1/1] 0.00ns (grouped into LUT with out node tmp_37_8)
.preheader8.preheader:466  %tmp_35_8 = xor i32 %B_ret_7, -1

ST_18: tmp_36_8 [1/1] 0.00ns (grouped into LUT with out node tmp_37_8)
.preheader8.preheader:467  %tmp_36_8 = and i32 %D_ret_7, %tmp_35_8

ST_18: tmp_37_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:468  %tmp_37_8 = or i32 %tmp_36_8, %tmp_34_8

ST_18: tmp154 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:469  %tmp154 = add i32 %call_ret23_7, %tmp_33_8

ST_18: tmp156 [1/1] 1.97ns
.preheader8.preheader:471  %tmp156 = add i32 %tmp_37_8, %tmp155

ST_18: temp_1_8 [1/1] 1.97ns
.preheader8.preheader:472  %temp_1_8 = add i32 %tmp154, %tmp156

ST_18: call_ret47_8 [1/1] 2.47ns
.preheader8.preheader:473  %call_ret47_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_7, i32 %B_ret_7, i32 %C_ret_7, i32 %D_ret_7, i32 %temp_1_8)

ST_18: A_ret_8 [1/1] 0.00ns
.preheader8.preheader:475  %A_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 1

ST_18: B_ret_8 [1/1] 0.00ns
.preheader8.preheader:476  %B_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 2

ST_18: C_ret_8 [1/1] 0.00ns
.preheader8.preheader:477  %C_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 3

ST_18: D_ret_8 [1/1] 0.00ns
.preheader8.preheader:478  %D_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 4


 <State 19>: 7.03ns
ST_19: W_9 [1/1] 0.00ns
.preheader8.preheader:52  %W_9 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_37, i8 %tmp_35, i8 %tmp_36, i8 %tmp_38)

ST_19: tmp_33_9 [1/1] 7.03ns
.preheader8.preheader:479  %tmp_33_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_8)

ST_19: tmp158 [1/1] 2.44ns
.preheader8.preheader:485  %tmp158 = add i32 1518500249, %W_9


 <State 20>: 7.78ns
ST_20: call_ret23_8 [1/1] 0.00ns (grouped into LUT with out node tmp157)
.preheader8.preheader:474  %call_ret23_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_8, 0

ST_20: tmp_34_9 [1/1] 0.00ns (grouped into LUT with out node tmp_37_9)
.preheader8.preheader:480  %tmp_34_9 = and i32 %C_ret_8, %B_ret_8

ST_20: tmp_35_9 [1/1] 0.00ns (grouped into LUT with out node tmp_37_9)
.preheader8.preheader:481  %tmp_35_9 = xor i32 %B_ret_8, -1

ST_20: tmp_36_9 [1/1] 0.00ns (grouped into LUT with out node tmp_37_9)
.preheader8.preheader:482  %tmp_36_9 = and i32 %D_ret_8, %tmp_35_9

ST_20: tmp_37_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:483  %tmp_37_9 = or i32 %tmp_36_9, %tmp_34_9

ST_20: tmp157 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:484  %tmp157 = add i32 %call_ret23_8, %tmp_33_9

ST_20: tmp159 [1/1] 1.97ns
.preheader8.preheader:486  %tmp159 = add i32 %tmp_37_9, %tmp158

ST_20: temp_1_9 [1/1] 1.97ns
.preheader8.preheader:487  %temp_1_9 = add i32 %tmp157, %tmp159

ST_20: call_ret47_9 [1/1] 2.47ns
.preheader8.preheader:488  %call_ret47_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_8, i32 %B_ret_8, i32 %C_ret_8, i32 %D_ret_8, i32 %temp_1_9)

ST_20: A_ret_9 [1/1] 0.00ns
.preheader8.preheader:490  %A_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 1

ST_20: B_ret_9 [1/1] 0.00ns
.preheader8.preheader:491  %B_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 2

ST_20: C_ret_9 [1/1] 0.00ns
.preheader8.preheader:492  %C_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 3

ST_20: D_ret_9 [1/1] 0.00ns
.preheader8.preheader:493  %D_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 4


 <State 21>: 7.03ns
ST_21: W_10 [1/1] 0.00ns
.preheader8.preheader:57  %W_10 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_41, i8 %tmp_39, i8 %tmp_40, i8 %tmp_42)

ST_21: tmp_33_s [1/1] 7.03ns
.preheader8.preheader:494  %tmp_33_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_9)

ST_21: tmp161 [1/1] 2.44ns
.preheader8.preheader:500  %tmp161 = add i32 1518500249, %W_10


 <State 22>: 7.78ns
ST_22: call_ret23_9 [1/1] 0.00ns (grouped into LUT with out node tmp160)
.preheader8.preheader:489  %call_ret23_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_9, 0

ST_22: tmp_34_s [1/1] 0.00ns (grouped into LUT with out node tmp_37_s)
.preheader8.preheader:495  %tmp_34_s = and i32 %C_ret_9, %B_ret_9

ST_22: tmp_35_s [1/1] 0.00ns (grouped into LUT with out node tmp_37_s)
.preheader8.preheader:496  %tmp_35_s = xor i32 %B_ret_9, -1

ST_22: tmp_36_s [1/1] 0.00ns (grouped into LUT with out node tmp_37_s)
.preheader8.preheader:497  %tmp_36_s = and i32 %D_ret_9, %tmp_35_s

ST_22: tmp_37_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:498  %tmp_37_s = or i32 %tmp_36_s, %tmp_34_s

ST_22: tmp160 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:499  %tmp160 = add i32 %call_ret23_9, %tmp_33_s

ST_22: tmp162 [1/1] 1.97ns
.preheader8.preheader:501  %tmp162 = add i32 %tmp_37_s, %tmp161

ST_22: temp_1_s [1/1] 1.97ns
.preheader8.preheader:502  %temp_1_s = add i32 %tmp160, %tmp162

ST_22: call_ret47_s [1/1] 2.47ns
.preheader8.preheader:503  %call_ret47_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_9, i32 %B_ret_9, i32 %C_ret_9, i32 %D_ret_9, i32 %temp_1_s)

ST_22: A_ret_s [1/1] 0.00ns
.preheader8.preheader:505  %A_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 1

ST_22: B_ret_s [1/1] 0.00ns
.preheader8.preheader:506  %B_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 2

ST_22: C_ret_s [1/1] 0.00ns
.preheader8.preheader:507  %C_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 3

ST_22: D_ret_s [1/1] 0.00ns
.preheader8.preheader:508  %D_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 4


 <State 23>: 7.03ns
ST_23: W_11 [1/1] 0.00ns
.preheader8.preheader:62  %W_11 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_45, i8 %tmp_43, i8 %tmp_44, i8 %tmp_46)

ST_23: tmp_33_10 [1/1] 7.03ns
.preheader8.preheader:509  %tmp_33_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_s)

ST_23: tmp164 [1/1] 2.44ns
.preheader8.preheader:515  %tmp164 = add i32 1518500249, %W_11


 <State 24>: 7.78ns
ST_24: call_ret23_s [1/1] 0.00ns (grouped into LUT with out node tmp163)
.preheader8.preheader:504  %call_ret23_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_s, 0

ST_24: tmp_34_10 [1/1] 0.00ns (grouped into LUT with out node tmp_37_10)
.preheader8.preheader:510  %tmp_34_10 = and i32 %C_ret_s, %B_ret_s

ST_24: tmp_35_10 [1/1] 0.00ns (grouped into LUT with out node tmp_37_10)
.preheader8.preheader:511  %tmp_35_10 = xor i32 %B_ret_s, -1

ST_24: tmp_36_10 [1/1] 0.00ns (grouped into LUT with out node tmp_37_10)
.preheader8.preheader:512  %tmp_36_10 = and i32 %D_ret_s, %tmp_35_10

ST_24: tmp_37_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:513  %tmp_37_10 = or i32 %tmp_36_10, %tmp_34_10

ST_24: tmp163 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:514  %tmp163 = add i32 %call_ret23_s, %tmp_33_10

ST_24: tmp165 [1/1] 1.97ns
.preheader8.preheader:516  %tmp165 = add i32 %tmp_37_10, %tmp164

ST_24: temp_1_10 [1/1] 1.97ns
.preheader8.preheader:517  %temp_1_10 = add i32 %tmp163, %tmp165

ST_24: call_ret47_10 [1/1] 2.47ns
.preheader8.preheader:518  %call_ret47_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_s, i32 %B_ret_s, i32 %C_ret_s, i32 %D_ret_s, i32 %temp_1_10)

ST_24: A_ret_10 [1/1] 0.00ns
.preheader8.preheader:520  %A_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 1

ST_24: B_ret_10 [1/1] 0.00ns
.preheader8.preheader:521  %B_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 2

ST_24: C_ret_10 [1/1] 0.00ns
.preheader8.preheader:522  %C_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 3

ST_24: D_ret_10 [1/1] 0.00ns
.preheader8.preheader:523  %D_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 4


 <State 25>: 7.03ns
ST_25: W_12 [1/1] 0.00ns
.preheader8.preheader:67  %W_12 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_49, i8 %tmp_47, i8 %tmp_48, i8 %tmp_50)

ST_25: tmp_33_11 [1/1] 7.03ns
.preheader8.preheader:524  %tmp_33_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_10)

ST_25: tmp167 [1/1] 2.44ns
.preheader8.preheader:530  %tmp167 = add i32 1518500249, %W_12


 <State 26>: 7.78ns
ST_26: call_ret23_10 [1/1] 0.00ns (grouped into LUT with out node tmp166)
.preheader8.preheader:519  %call_ret23_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_10, 0

ST_26: tmp_34_11 [1/1] 0.00ns (grouped into LUT with out node tmp_37_11)
.preheader8.preheader:525  %tmp_34_11 = and i32 %C_ret_10, %B_ret_10

ST_26: tmp_35_11 [1/1] 0.00ns (grouped into LUT with out node tmp_37_11)
.preheader8.preheader:526  %tmp_35_11 = xor i32 %B_ret_10, -1

ST_26: tmp_36_11 [1/1] 0.00ns (grouped into LUT with out node tmp_37_11)
.preheader8.preheader:527  %tmp_36_11 = and i32 %D_ret_10, %tmp_35_11

ST_26: tmp_37_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:528  %tmp_37_11 = or i32 %tmp_36_11, %tmp_34_11

ST_26: tmp166 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:529  %tmp166 = add i32 %call_ret23_10, %tmp_33_11

ST_26: tmp168 [1/1] 1.97ns
.preheader8.preheader:531  %tmp168 = add i32 %tmp_37_11, %tmp167

ST_26: temp_1_11 [1/1] 1.97ns
.preheader8.preheader:532  %temp_1_11 = add i32 %tmp166, %tmp168

ST_26: call_ret47_11 [1/1] 2.47ns
.preheader8.preheader:533  %call_ret47_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_10, i32 %B_ret_10, i32 %C_ret_10, i32 %D_ret_10, i32 %temp_1_11)

ST_26: A_ret_11 [1/1] 0.00ns
.preheader8.preheader:535  %A_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 1

ST_26: B_ret_11 [1/1] 0.00ns
.preheader8.preheader:536  %B_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 2

ST_26: C_ret_11 [1/1] 0.00ns
.preheader8.preheader:537  %C_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 3

ST_26: D_ret_11 [1/1] 0.00ns
.preheader8.preheader:538  %D_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 4


 <State 27>: 7.03ns
ST_27: W_13 [1/1] 0.00ns
.preheader8.preheader:72  %W_13 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_53, i8 %tmp_51, i8 %tmp_52, i8 %tmp_54)

ST_27: tmp_33_12 [1/1] 7.03ns
.preheader8.preheader:539  %tmp_33_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_11)

ST_27: tmp170 [1/1] 2.44ns
.preheader8.preheader:545  %tmp170 = add i32 1518500249, %W_13


 <State 28>: 7.78ns
ST_28: call_ret23_11 [1/1] 0.00ns (grouped into LUT with out node tmp169)
.preheader8.preheader:534  %call_ret23_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_11, 0

ST_28: tmp_34_12 [1/1] 0.00ns (grouped into LUT with out node tmp_37_12)
.preheader8.preheader:540  %tmp_34_12 = and i32 %C_ret_11, %B_ret_11

ST_28: tmp_35_12 [1/1] 0.00ns (grouped into LUT with out node tmp_37_12)
.preheader8.preheader:541  %tmp_35_12 = xor i32 %B_ret_11, -1

ST_28: tmp_36_12 [1/1] 0.00ns (grouped into LUT with out node tmp_37_12)
.preheader8.preheader:542  %tmp_36_12 = and i32 %D_ret_11, %tmp_35_12

ST_28: tmp_37_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:543  %tmp_37_12 = or i32 %tmp_36_12, %tmp_34_12

ST_28: tmp169 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:544  %tmp169 = add i32 %call_ret23_11, %tmp_33_12

ST_28: tmp171 [1/1] 1.97ns
.preheader8.preheader:546  %tmp171 = add i32 %tmp_37_12, %tmp170

ST_28: temp_1_12 [1/1] 1.97ns
.preheader8.preheader:547  %temp_1_12 = add i32 %tmp169, %tmp171

ST_28: call_ret47_12 [1/1] 2.47ns
.preheader8.preheader:548  %call_ret47_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_11, i32 %B_ret_11, i32 %C_ret_11, i32 %D_ret_11, i32 %temp_1_12)

ST_28: A_ret_12 [1/1] 0.00ns
.preheader8.preheader:550  %A_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 1

ST_28: B_ret_12 [1/1] 0.00ns
.preheader8.preheader:551  %B_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 2

ST_28: C_ret_12 [1/1] 0.00ns
.preheader8.preheader:552  %C_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 3

ST_28: D_ret_12 [1/1] 0.00ns
.preheader8.preheader:553  %D_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 4


 <State 29>: 7.03ns
ST_29: W_14 [1/1] 0.00ns
.preheader8.preheader:77  %W_14 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_57, i8 %tmp_55, i8 %tmp_56, i8 %tmp_63)

ST_29: tmp_33_13 [1/1] 7.03ns
.preheader8.preheader:554  %tmp_33_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_12)

ST_29: tmp173 [1/1] 2.44ns
.preheader8.preheader:560  %tmp173 = add i32 1518500249, %W_14


 <State 30>: 7.78ns
ST_30: call_ret23_12 [1/1] 0.00ns (grouped into LUT with out node tmp172)
.preheader8.preheader:549  %call_ret23_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_12, 0

ST_30: tmp_34_13 [1/1] 0.00ns (grouped into LUT with out node tmp_37_13)
.preheader8.preheader:555  %tmp_34_13 = and i32 %C_ret_12, %B_ret_12

ST_30: tmp_35_13 [1/1] 0.00ns (grouped into LUT with out node tmp_37_13)
.preheader8.preheader:556  %tmp_35_13 = xor i32 %B_ret_12, -1

ST_30: tmp_36_13 [1/1] 0.00ns (grouped into LUT with out node tmp_37_13)
.preheader8.preheader:557  %tmp_36_13 = and i32 %D_ret_12, %tmp_35_13

ST_30: tmp_37_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:558  %tmp_37_13 = or i32 %tmp_36_13, %tmp_34_13

ST_30: tmp172 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:559  %tmp172 = add i32 %call_ret23_12, %tmp_33_13

ST_30: tmp174 [1/1] 1.97ns
.preheader8.preheader:561  %tmp174 = add i32 %tmp_37_13, %tmp173

ST_30: temp_1_13 [1/1] 1.97ns
.preheader8.preheader:562  %temp_1_13 = add i32 %tmp172, %tmp174

ST_30: call_ret47_13 [1/1] 2.47ns
.preheader8.preheader:563  %call_ret47_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_12, i32 %B_ret_12, i32 %C_ret_12, i32 %D_ret_12, i32 %temp_1_13)

ST_30: A_ret_13 [1/1] 0.00ns
.preheader8.preheader:565  %A_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 1

ST_30: B_ret_13 [1/1] 0.00ns
.preheader8.preheader:566  %B_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 2

ST_30: C_ret_13 [1/1] 0.00ns
.preheader8.preheader:567  %C_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 3

ST_30: D_ret_13 [1/1] 0.00ns
.preheader8.preheader:568  %D_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 4


 <State 31>: 7.03ns
ST_31: W_15 [1/1] 0.00ns
.preheader8.preheader:82  %W_15 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %tmp_66, i8 %tmp_64, i8 %tmp_65, i8 %tmp_67)

ST_31: tmp_33_14 [1/1] 7.03ns
.preheader8.preheader:569  %tmp_33_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_13)

ST_31: tmp176 [1/1] 2.44ns
.preheader8.preheader:575  %tmp176 = add i32 1518500249, %W_15


 <State 32>: 8.40ns
ST_32: tmp1 [1/1] 0.00ns (grouped into LUT with out node tmp_68)
.preheader8.preheader:83  %tmp1 = xor i32 %W_8, %W_13

ST_32: tmp2 [1/1] 0.00ns (grouped into LUT with out node tmp_68)
.preheader8.preheader:84  %tmp2 = xor i32 %W_2, %W_0

ST_32: tmp_68 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:85  %tmp_68 = xor i32 %tmp2, %tmp1

ST_32: W_16 [1/1] 7.03ns
.preheader8.preheader:86  %W_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_68)

ST_32: call_ret23_13 [1/1] 0.00ns (grouped into LUT with out node tmp175)
.preheader8.preheader:564  %call_ret23_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_13, 0

ST_32: tmp_34_14 [1/1] 0.00ns (grouped into LUT with out node tmp_37_14)
.preheader8.preheader:570  %tmp_34_14 = and i32 %C_ret_13, %B_ret_13

ST_32: tmp_35_14 [1/1] 0.00ns (grouped into LUT with out node tmp_37_14)
.preheader8.preheader:571  %tmp_35_14 = xor i32 %B_ret_13, -1

ST_32: tmp_36_14 [1/1] 0.00ns (grouped into LUT with out node tmp_37_14)
.preheader8.preheader:572  %tmp_36_14 = and i32 %D_ret_13, %tmp_35_14

ST_32: tmp_37_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:573  %tmp_37_14 = or i32 %tmp_36_14, %tmp_34_14

ST_32: tmp175 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:574  %tmp175 = add i32 %call_ret23_13, %tmp_33_14

ST_32: tmp177 [1/1] 1.97ns
.preheader8.preheader:576  %tmp177 = add i32 %tmp_37_14, %tmp176

ST_32: temp_1_14 [1/1] 1.97ns
.preheader8.preheader:577  %temp_1_14 = add i32 %tmp175, %tmp177

ST_32: call_ret47_14 [1/1] 2.47ns
.preheader8.preheader:578  %call_ret47_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_13, i32 %B_ret_13, i32 %C_ret_13, i32 %D_ret_13, i32 %temp_1_14)

ST_32: A_ret_14 [1/1] 0.00ns
.preheader8.preheader:580  %A_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 1

ST_32: B_ret_14 [1/1] 0.00ns
.preheader8.preheader:581  %B_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 2

ST_32: C_ret_14 [1/1] 0.00ns
.preheader8.preheader:582  %C_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 3

ST_32: D_ret_14 [1/1] 0.00ns
.preheader8.preheader:583  %D_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 4


 <State 33>: 7.03ns
ST_33: tmp_33_15 [1/1] 7.03ns
.preheader8.preheader:584  %tmp_33_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_14)

ST_33: tmp179 [1/1] 2.44ns
.preheader8.preheader:590  %tmp179 = add i32 1518500249, %W_16


 <State 34>: 8.40ns
ST_34: tmp3 [1/1] 0.00ns (grouped into LUT with out node tmp_30_1)
.preheader8.preheader:87  %tmp3 = xor i32 %W_9, %W_14

ST_34: tmp4 [1/1] 0.00ns (grouped into LUT with out node tmp_30_1)
.preheader8.preheader:88  %tmp4 = xor i32 %W_3, %W_1

ST_34: tmp_30_1 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:89  %tmp_30_1 = xor i32 %tmp4, %tmp3

ST_34: W_17 [1/1] 7.03ns
.preheader8.preheader:90  %W_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_1)

ST_34: call_ret23_14 [1/1] 0.00ns (grouped into LUT with out node tmp178)
.preheader8.preheader:579  %call_ret23_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_14, 0

ST_34: tmp_34_15 [1/1] 0.00ns (grouped into LUT with out node tmp_37_15)
.preheader8.preheader:585  %tmp_34_15 = and i32 %C_ret_14, %B_ret_14

ST_34: tmp_35_15 [1/1] 0.00ns (grouped into LUT with out node tmp_37_15)
.preheader8.preheader:586  %tmp_35_15 = xor i32 %B_ret_14, -1

ST_34: tmp_36_15 [1/1] 0.00ns (grouped into LUT with out node tmp_37_15)
.preheader8.preheader:587  %tmp_36_15 = and i32 %D_ret_14, %tmp_35_15

ST_34: tmp_37_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:588  %tmp_37_15 = or i32 %tmp_36_15, %tmp_34_15

ST_34: tmp178 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:589  %tmp178 = add i32 %call_ret23_14, %tmp_33_15

ST_34: tmp180 [1/1] 1.97ns
.preheader8.preheader:591  %tmp180 = add i32 %tmp_37_15, %tmp179

ST_34: temp_1_15 [1/1] 1.97ns
.preheader8.preheader:592  %temp_1_15 = add i32 %tmp178, %tmp180

ST_34: call_ret47_15 [1/1] 2.47ns
.preheader8.preheader:593  %call_ret47_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_14, i32 %B_ret_14, i32 %C_ret_14, i32 %D_ret_14, i32 %temp_1_15)

ST_34: A_ret_15 [1/1] 0.00ns
.preheader8.preheader:595  %A_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 1

ST_34: B_ret_15 [1/1] 0.00ns
.preheader8.preheader:596  %B_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 2

ST_34: C_ret_15 [1/1] 0.00ns
.preheader8.preheader:597  %C_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 3

ST_34: D_ret_15 [1/1] 0.00ns
.preheader8.preheader:598  %D_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 4


 <State 35>: 7.03ns
ST_35: tmp_33_16 [1/1] 7.03ns
.preheader8.preheader:599  %tmp_33_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_15)

ST_35: tmp182 [1/1] 2.44ns
.preheader8.preheader:605  %tmp182 = add i32 1518500249, %W_17


 <State 36>: 8.40ns
ST_36: tmp5 [1/1] 0.00ns (grouped into LUT with out node tmp_30_2)
.preheader8.preheader:91  %tmp5 = xor i32 %W_10, %W_15

ST_36: tmp6 [1/1] 0.00ns (grouped into LUT with out node tmp_30_2)
.preheader8.preheader:92  %tmp6 = xor i32 %W_4, %W_2

ST_36: tmp_30_2 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:93  %tmp_30_2 = xor i32 %tmp6, %tmp5

ST_36: W_18 [1/1] 7.03ns
.preheader8.preheader:94  %W_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_2)

ST_36: call_ret23_15 [1/1] 0.00ns (grouped into LUT with out node tmp181)
.preheader8.preheader:594  %call_ret23_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_15, 0

ST_36: tmp_34_16 [1/1] 0.00ns (grouped into LUT with out node tmp_37_16)
.preheader8.preheader:600  %tmp_34_16 = and i32 %C_ret_15, %B_ret_15

ST_36: tmp_35_16 [1/1] 0.00ns (grouped into LUT with out node tmp_37_16)
.preheader8.preheader:601  %tmp_35_16 = xor i32 %B_ret_15, -1

ST_36: tmp_36_16 [1/1] 0.00ns (grouped into LUT with out node tmp_37_16)
.preheader8.preheader:602  %tmp_36_16 = and i32 %D_ret_15, %tmp_35_16

ST_36: tmp_37_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:603  %tmp_37_16 = or i32 %tmp_36_16, %tmp_34_16

ST_36: tmp181 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:604  %tmp181 = add i32 %call_ret23_15, %tmp_33_16

ST_36: tmp183 [1/1] 1.97ns
.preheader8.preheader:606  %tmp183 = add i32 %tmp_37_16, %tmp182

ST_36: temp_1_16 [1/1] 1.97ns
.preheader8.preheader:607  %temp_1_16 = add i32 %tmp181, %tmp183

ST_36: call_ret47_16 [1/1] 2.47ns
.preheader8.preheader:608  %call_ret47_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_15, i32 %B_ret_15, i32 %C_ret_15, i32 %D_ret_15, i32 %temp_1_16)

ST_36: A_ret_16 [1/1] 0.00ns
.preheader8.preheader:610  %A_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 1

ST_36: B_ret_16 [1/1] 0.00ns
.preheader8.preheader:611  %B_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 2

ST_36: C_ret_16 [1/1] 0.00ns
.preheader8.preheader:612  %C_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 3

ST_36: D_ret_16 [1/1] 0.00ns
.preheader8.preheader:613  %D_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 4


 <State 37>: 7.03ns
ST_37: tmp_33_17 [1/1] 7.03ns
.preheader8.preheader:614  %tmp_33_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_16)

ST_37: tmp185 [1/1] 2.44ns
.preheader8.preheader:620  %tmp185 = add i32 1518500249, %W_18


 <State 38>: 8.40ns
ST_38: tmp7 [1/1] 0.00ns (grouped into LUT with out node tmp_30_3)
.preheader8.preheader:95  %tmp7 = xor i32 %W_11, %W_16

ST_38: tmp8 [1/1] 0.00ns (grouped into LUT with out node tmp_30_3)
.preheader8.preheader:96  %tmp8 = xor i32 %W_5, %W_3

ST_38: tmp_30_3 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:97  %tmp_30_3 = xor i32 %tmp8, %tmp7

ST_38: W_19 [1/1] 7.03ns
.preheader8.preheader:98  %W_19 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_3)

ST_38: call_ret23_16 [1/1] 0.00ns (grouped into LUT with out node tmp184)
.preheader8.preheader:609  %call_ret23_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_16, 0

ST_38: tmp_34_17 [1/1] 0.00ns (grouped into LUT with out node tmp_37_17)
.preheader8.preheader:615  %tmp_34_17 = and i32 %C_ret_16, %B_ret_16

ST_38: tmp_35_17 [1/1] 0.00ns (grouped into LUT with out node tmp_37_17)
.preheader8.preheader:616  %tmp_35_17 = xor i32 %B_ret_16, -1

ST_38: tmp_36_17 [1/1] 0.00ns (grouped into LUT with out node tmp_37_17)
.preheader8.preheader:617  %tmp_36_17 = and i32 %D_ret_16, %tmp_35_17

ST_38: tmp_37_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:618  %tmp_37_17 = or i32 %tmp_36_17, %tmp_34_17

ST_38: tmp184 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:619  %tmp184 = add i32 %call_ret23_16, %tmp_33_17

ST_38: tmp186 [1/1] 1.97ns
.preheader8.preheader:621  %tmp186 = add i32 %tmp_37_17, %tmp185

ST_38: temp_1_17 [1/1] 1.97ns
.preheader8.preheader:622  %temp_1_17 = add i32 %tmp184, %tmp186

ST_38: call_ret47_17 [1/1] 2.47ns
.preheader8.preheader:623  %call_ret47_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_16, i32 %B_ret_16, i32 %C_ret_16, i32 %D_ret_16, i32 %temp_1_17)

ST_38: A_ret_17 [1/1] 0.00ns
.preheader8.preheader:625  %A_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 1

ST_38: B_ret_17 [1/1] 0.00ns
.preheader8.preheader:626  %B_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 2

ST_38: C_ret_17 [1/1] 0.00ns
.preheader8.preheader:627  %C_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 3

ST_38: D_ret_17 [1/1] 0.00ns
.preheader8.preheader:628  %D_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 4


 <State 39>: 7.03ns
ST_39: tmp_33_18 [1/1] 7.03ns
.preheader8.preheader:629  %tmp_33_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_17)

ST_39: tmp188 [1/1] 2.44ns
.preheader8.preheader:635  %tmp188 = add i32 1518500249, %W_19


 <State 40>: 8.40ns
ST_40: tmp9 [1/1] 0.00ns (grouped into LUT with out node tmp_30_4)
.preheader8.preheader:99  %tmp9 = xor i32 %W_12, %W_17

ST_40: tmp10 [1/1] 0.00ns (grouped into LUT with out node tmp_30_4)
.preheader8.preheader:100  %tmp10 = xor i32 %W_6, %W_4

ST_40: tmp_30_4 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:101  %tmp_30_4 = xor i32 %tmp10, %tmp9

ST_40: W_20 [1/1] 7.03ns
.preheader8.preheader:102  %W_20 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_4)

ST_40: call_ret23_17 [1/1] 0.00ns (grouped into LUT with out node tmp187)
.preheader8.preheader:624  %call_ret23_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_17, 0

ST_40: tmp_34_18 [1/1] 0.00ns (grouped into LUT with out node tmp_37_18)
.preheader8.preheader:630  %tmp_34_18 = and i32 %C_ret_17, %B_ret_17

ST_40: tmp_35_18 [1/1] 0.00ns (grouped into LUT with out node tmp_37_18)
.preheader8.preheader:631  %tmp_35_18 = xor i32 %B_ret_17, -1

ST_40: tmp_36_18 [1/1] 0.00ns (grouped into LUT with out node tmp_37_18)
.preheader8.preheader:632  %tmp_36_18 = and i32 %D_ret_17, %tmp_35_18

ST_40: tmp_37_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:633  %tmp_37_18 = or i32 %tmp_36_18, %tmp_34_18

ST_40: tmp187 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:634  %tmp187 = add i32 %call_ret23_17, %tmp_33_18

ST_40: tmp189 [1/1] 1.97ns
.preheader8.preheader:636  %tmp189 = add i32 %tmp_37_18, %tmp188

ST_40: temp_1_18 [1/1] 1.97ns
.preheader8.preheader:637  %temp_1_18 = add i32 %tmp187, %tmp189

ST_40: call_ret47_18 [1/1] 2.47ns
.preheader8.preheader:638  %call_ret47_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_17, i32 %B_ret_17, i32 %C_ret_17, i32 %D_ret_17, i32 %temp_1_18)

ST_40: call_ret23_18 [1/1] 0.00ns
.preheader8.preheader:639  %call_ret23_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 0

ST_40: A_ret_18 [1/1] 0.00ns
.preheader8.preheader:640  %A_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 1

ST_40: B_ret_18 [1/1] 0.00ns
.preheader8.preheader:641  %B_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 2

ST_40: C_ret_18 [1/1] 0.00ns
.preheader8.preheader:642  %C_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 3

ST_40: D_ret_18 [1/1] 0.00ns
.preheader8.preheader:643  %D_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret47_18, 4


 <State 41>: 7.03ns
ST_41: tmp_74 [1/1] 7.03ns
.preheader8.preheader:644  %tmp_74 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret_18)

ST_41: tmp192 [1/1] 2.44ns
.preheader8.preheader:648  %tmp192 = add i32 1859775393, %W_20


 <State 42>: 8.40ns
ST_42: tmp11 [1/1] 0.00ns (grouped into LUT with out node tmp_30_5)
.preheader8.preheader:103  %tmp11 = xor i32 %W_13, %W_18

ST_42: tmp12 [1/1] 0.00ns (grouped into LUT with out node tmp_30_5)
.preheader8.preheader:104  %tmp12 = xor i32 %W_7, %W_5

ST_42: tmp_30_5 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:105  %tmp_30_5 = xor i32 %tmp12, %tmp11

ST_42: W_21 [1/1] 7.03ns
.preheader8.preheader:106  %W_21 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_5)

ST_42: tmp190 [1/1] 0.00ns (grouped into LUT with out node tmp191)
.preheader8.preheader:645  %tmp190 = xor i32 %B_ret_18, %D_ret_18

ST_42: tmp_75 [1/1] 0.00ns (grouped into LUT with out node tmp191)
.preheader8.preheader:646  %tmp_75 = xor i32 %tmp190, %C_ret_18

ST_42: tmp191 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:647  %tmp191 = add i32 %tmp_75, %tmp_74

ST_42: tmp193 [1/1] 1.97ns
.preheader8.preheader:649  %tmp193 = add i32 %call_ret23_18, %tmp192

ST_42: temp_2 [1/1] 1.97ns
.preheader8.preheader:650  %temp_2 = add i32 %tmp191, %tmp193

ST_42: call_ret3 [1/1] 2.47ns
.preheader8.preheader:651  %call_ret3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret_18, i32 %B_ret_18, i32 %C_ret_18, i32 %D_ret_18, i32 %temp_2)

ST_42: call_ret4 [1/1] 0.00ns
.preheader8.preheader:652  %call_ret4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 0

ST_42: A_ret1 [1/1] 0.00ns
.preheader8.preheader:653  %A_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 1

ST_42: B_ret1 [1/1] 0.00ns
.preheader8.preheader:654  %B_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 2

ST_42: C_ret1 [1/1] 0.00ns
.preheader8.preheader:655  %C_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 3

ST_42: D_ret1 [1/1] 0.00ns
.preheader8.preheader:656  %D_ret1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 4


 <State 43>: 7.03ns
ST_43: tmp_42_1 [1/1] 7.03ns
.preheader8.preheader:657  %tmp_42_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret1)

ST_43: tmp196 [1/1] 2.44ns
.preheader8.preheader:661  %tmp196 = add i32 1859775393, %W_21


 <State 44>: 8.40ns
ST_44: tmp13 [1/1] 0.00ns (grouped into LUT with out node tmp_30_6)
.preheader8.preheader:107  %tmp13 = xor i32 %W_14, %W_19

ST_44: tmp14 [1/1] 0.00ns (grouped into LUT with out node tmp_30_6)
.preheader8.preheader:108  %tmp14 = xor i32 %W_8, %W_6

ST_44: tmp_30_6 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:109  %tmp_30_6 = xor i32 %tmp14, %tmp13

ST_44: W_22 [1/1] 7.03ns
.preheader8.preheader:110  %W_22 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_6)

ST_44: tmp194 [1/1] 0.00ns (grouped into LUT with out node tmp195)
.preheader8.preheader:658  %tmp194 = xor i32 %B_ret1, %D_ret1

ST_44: tmp_44_1 [1/1] 0.00ns (grouped into LUT with out node tmp195)
.preheader8.preheader:659  %tmp_44_1 = xor i32 %tmp194, %C_ret1

ST_44: tmp195 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:660  %tmp195 = add i32 %tmp_44_1, %tmp_42_1

ST_44: tmp197 [1/1] 1.97ns
.preheader8.preheader:662  %tmp197 = add i32 %call_ret4, %tmp196

ST_44: temp_2_1 [1/1] 1.97ns
.preheader8.preheader:663  %temp_2_1 = add i32 %tmp195, %tmp197

ST_44: call_ret46_1 [1/1] 2.47ns
.preheader8.preheader:664  %call_ret46_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret1, i32 %B_ret1, i32 %C_ret1, i32 %D_ret1, i32 %temp_2_1)

ST_44: call_ret17_1 [1/1] 0.00ns
.preheader8.preheader:665  %call_ret17_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 0

ST_44: A_ret27_1 [1/1] 0.00ns
.preheader8.preheader:666  %A_ret27_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 1

ST_44: B_ret28_1 [1/1] 0.00ns
.preheader8.preheader:667  %B_ret28_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 2

ST_44: C_ret29_1 [1/1] 0.00ns
.preheader8.preheader:668  %C_ret29_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 3

ST_44: D_ret30_1 [1/1] 0.00ns
.preheader8.preheader:669  %D_ret30_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_1, 4


 <State 45>: 7.03ns
ST_45: tmp_42_2 [1/1] 7.03ns
.preheader8.preheader:670  %tmp_42_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_1)

ST_45: tmp200 [1/1] 2.44ns
.preheader8.preheader:674  %tmp200 = add i32 1859775393, %W_22


 <State 46>: 8.40ns
ST_46: tmp15 [1/1] 0.00ns (grouped into LUT with out node tmp_30_7)
.preheader8.preheader:111  %tmp15 = xor i32 %W_15, %W_20

ST_46: tmp16 [1/1] 0.00ns (grouped into LUT with out node tmp_30_7)
.preheader8.preheader:112  %tmp16 = xor i32 %W_9, %W_7

ST_46: tmp_30_7 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:113  %tmp_30_7 = xor i32 %tmp16, %tmp15

ST_46: W_23 [1/1] 7.03ns
.preheader8.preheader:114  %W_23 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_7)

ST_46: tmp198 [1/1] 0.00ns (grouped into LUT with out node tmp199)
.preheader8.preheader:671  %tmp198 = xor i32 %B_ret28_1, %D_ret30_1

ST_46: tmp_44_2 [1/1] 0.00ns (grouped into LUT with out node tmp199)
.preheader8.preheader:672  %tmp_44_2 = xor i32 %tmp198, %C_ret29_1

ST_46: tmp199 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:673  %tmp199 = add i32 %tmp_44_2, %tmp_42_2

ST_46: tmp201 [1/1] 1.97ns
.preheader8.preheader:675  %tmp201 = add i32 %call_ret17_1, %tmp200

ST_46: temp_2_2 [1/1] 1.97ns
.preheader8.preheader:676  %temp_2_2 = add i32 %tmp199, %tmp201

ST_46: call_ret46_2 [1/1] 2.47ns
.preheader8.preheader:677  %call_ret46_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_1, i32 %B_ret28_1, i32 %C_ret29_1, i32 %D_ret30_1, i32 %temp_2_2)

ST_46: call_ret17_2 [1/1] 0.00ns
.preheader8.preheader:678  %call_ret17_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 0

ST_46: A_ret27_2 [1/1] 0.00ns
.preheader8.preheader:679  %A_ret27_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 1

ST_46: B_ret28_2 [1/1] 0.00ns
.preheader8.preheader:680  %B_ret28_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 2

ST_46: C_ret29_2 [1/1] 0.00ns
.preheader8.preheader:681  %C_ret29_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 3

ST_46: D_ret30_2 [1/1] 0.00ns
.preheader8.preheader:682  %D_ret30_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_2, 4


 <State 47>: 7.03ns
ST_47: tmp_42_3 [1/1] 7.03ns
.preheader8.preheader:683  %tmp_42_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_2)

ST_47: tmp204 [1/1] 2.44ns
.preheader8.preheader:687  %tmp204 = add i32 1859775393, %W_23


 <State 48>: 8.40ns
ST_48: tmp17 [1/1] 0.00ns (grouped into LUT with out node tmp_30_8)
.preheader8.preheader:115  %tmp17 = xor i32 %W_16, %W_21

ST_48: tmp18 [1/1] 0.00ns (grouped into LUT with out node tmp_30_8)
.preheader8.preheader:116  %tmp18 = xor i32 %W_10, %W_8

ST_48: tmp_30_8 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:117  %tmp_30_8 = xor i32 %tmp18, %tmp17

ST_48: W_24 [1/1] 7.03ns
.preheader8.preheader:118  %W_24 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_8)

ST_48: tmp202 [1/1] 0.00ns (grouped into LUT with out node tmp203)
.preheader8.preheader:684  %tmp202 = xor i32 %B_ret28_2, %D_ret30_2

ST_48: tmp_44_3 [1/1] 0.00ns (grouped into LUT with out node tmp203)
.preheader8.preheader:685  %tmp_44_3 = xor i32 %tmp202, %C_ret29_2

ST_48: tmp203 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:686  %tmp203 = add i32 %tmp_44_3, %tmp_42_3

ST_48: tmp205 [1/1] 1.97ns
.preheader8.preheader:688  %tmp205 = add i32 %call_ret17_2, %tmp204

ST_48: temp_2_3 [1/1] 1.97ns
.preheader8.preheader:689  %temp_2_3 = add i32 %tmp203, %tmp205

ST_48: call_ret46_3 [1/1] 2.47ns
.preheader8.preheader:690  %call_ret46_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_2, i32 %B_ret28_2, i32 %C_ret29_2, i32 %D_ret30_2, i32 %temp_2_3)

ST_48: call_ret17_3 [1/1] 0.00ns
.preheader8.preheader:691  %call_ret17_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 0

ST_48: A_ret27_3 [1/1] 0.00ns
.preheader8.preheader:692  %A_ret27_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 1

ST_48: B_ret28_3 [1/1] 0.00ns
.preheader8.preheader:693  %B_ret28_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 2

ST_48: C_ret29_3 [1/1] 0.00ns
.preheader8.preheader:694  %C_ret29_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 3

ST_48: D_ret30_3 [1/1] 0.00ns
.preheader8.preheader:695  %D_ret30_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_3, 4


 <State 49>: 7.03ns
ST_49: tmp_42_4 [1/1] 7.03ns
.preheader8.preheader:696  %tmp_42_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_3)

ST_49: tmp208 [1/1] 2.44ns
.preheader8.preheader:700  %tmp208 = add i32 1859775393, %W_24


 <State 50>: 8.40ns
ST_50: tmp19 [1/1] 0.00ns (grouped into LUT with out node tmp_30_9)
.preheader8.preheader:119  %tmp19 = xor i32 %W_17, %W_22

ST_50: tmp20 [1/1] 0.00ns (grouped into LUT with out node tmp_30_9)
.preheader8.preheader:120  %tmp20 = xor i32 %W_11, %W_9

ST_50: tmp_30_9 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:121  %tmp_30_9 = xor i32 %tmp20, %tmp19

ST_50: W_25 [1/1] 7.03ns
.preheader8.preheader:122  %W_25 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_9)

ST_50: tmp206 [1/1] 0.00ns (grouped into LUT with out node tmp207)
.preheader8.preheader:697  %tmp206 = xor i32 %B_ret28_3, %D_ret30_3

ST_50: tmp_44_4 [1/1] 0.00ns (grouped into LUT with out node tmp207)
.preheader8.preheader:698  %tmp_44_4 = xor i32 %tmp206, %C_ret29_3

ST_50: tmp207 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:699  %tmp207 = add i32 %tmp_44_4, %tmp_42_4

ST_50: tmp209 [1/1] 1.97ns
.preheader8.preheader:701  %tmp209 = add i32 %call_ret17_3, %tmp208

ST_50: temp_2_4 [1/1] 1.97ns
.preheader8.preheader:702  %temp_2_4 = add i32 %tmp207, %tmp209

ST_50: call_ret46_4 [1/1] 2.47ns
.preheader8.preheader:703  %call_ret46_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_3, i32 %B_ret28_3, i32 %C_ret29_3, i32 %D_ret30_3, i32 %temp_2_4)

ST_50: call_ret17_4 [1/1] 0.00ns
.preheader8.preheader:704  %call_ret17_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 0

ST_50: A_ret27_4 [1/1] 0.00ns
.preheader8.preheader:705  %A_ret27_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 1

ST_50: B_ret28_4 [1/1] 0.00ns
.preheader8.preheader:706  %B_ret28_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 2

ST_50: C_ret29_4 [1/1] 0.00ns
.preheader8.preheader:707  %C_ret29_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 3

ST_50: D_ret30_4 [1/1] 0.00ns
.preheader8.preheader:708  %D_ret30_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_4, 4


 <State 51>: 7.03ns
ST_51: tmp_42_5 [1/1] 7.03ns
.preheader8.preheader:709  %tmp_42_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_4)

ST_51: tmp212 [1/1] 2.44ns
.preheader8.preheader:713  %tmp212 = add i32 1859775393, %W_25


 <State 52>: 8.40ns
ST_52: tmp21 [1/1] 0.00ns (grouped into LUT with out node tmp_30_s)
.preheader8.preheader:123  %tmp21 = xor i32 %W_18, %W_23

ST_52: tmp22 [1/1] 0.00ns (grouped into LUT with out node tmp_30_s)
.preheader8.preheader:124  %tmp22 = xor i32 %W_12, %W_10

ST_52: tmp_30_s [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:125  %tmp_30_s = xor i32 %tmp22, %tmp21

ST_52: W_26 [1/1] 7.03ns
.preheader8.preheader:126  %W_26 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_s)

ST_52: tmp210 [1/1] 0.00ns (grouped into LUT with out node tmp211)
.preheader8.preheader:710  %tmp210 = xor i32 %B_ret28_4, %D_ret30_4

ST_52: tmp_44_5 [1/1] 0.00ns (grouped into LUT with out node tmp211)
.preheader8.preheader:711  %tmp_44_5 = xor i32 %tmp210, %C_ret29_4

ST_52: tmp211 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:712  %tmp211 = add i32 %tmp_44_5, %tmp_42_5

ST_52: tmp213 [1/1] 1.97ns
.preheader8.preheader:714  %tmp213 = add i32 %call_ret17_4, %tmp212

ST_52: temp_2_5 [1/1] 1.97ns
.preheader8.preheader:715  %temp_2_5 = add i32 %tmp211, %tmp213

ST_52: call_ret46_5 [1/1] 2.47ns
.preheader8.preheader:716  %call_ret46_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_4, i32 %B_ret28_4, i32 %C_ret29_4, i32 %D_ret30_4, i32 %temp_2_5)

ST_52: call_ret17_5 [1/1] 0.00ns
.preheader8.preheader:717  %call_ret17_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 0

ST_52: A_ret27_5 [1/1] 0.00ns
.preheader8.preheader:718  %A_ret27_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 1

ST_52: B_ret28_5 [1/1] 0.00ns
.preheader8.preheader:719  %B_ret28_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 2

ST_52: C_ret29_5 [1/1] 0.00ns
.preheader8.preheader:720  %C_ret29_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 3

ST_52: D_ret30_5 [1/1] 0.00ns
.preheader8.preheader:721  %D_ret30_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_5, 4


 <State 53>: 7.03ns
ST_53: tmp_42_6 [1/1] 7.03ns
.preheader8.preheader:722  %tmp_42_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_5)

ST_53: tmp216 [1/1] 2.44ns
.preheader8.preheader:726  %tmp216 = add i32 1859775393, %W_26


 <State 54>: 8.40ns
ST_54: tmp23 [1/1] 0.00ns (grouped into LUT with out node tmp_30_10)
.preheader8.preheader:127  %tmp23 = xor i32 %W_19, %W_24

ST_54: tmp24 [1/1] 0.00ns (grouped into LUT with out node tmp_30_10)
.preheader8.preheader:128  %tmp24 = xor i32 %W_13, %W_11

ST_54: tmp_30_10 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:129  %tmp_30_10 = xor i32 %tmp24, %tmp23

ST_54: W_27 [1/1] 7.03ns
.preheader8.preheader:130  %W_27 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_10)

ST_54: tmp214 [1/1] 0.00ns (grouped into LUT with out node tmp215)
.preheader8.preheader:723  %tmp214 = xor i32 %B_ret28_5, %D_ret30_5

ST_54: tmp_44_6 [1/1] 0.00ns (grouped into LUT with out node tmp215)
.preheader8.preheader:724  %tmp_44_6 = xor i32 %tmp214, %C_ret29_5

ST_54: tmp215 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:725  %tmp215 = add i32 %tmp_44_6, %tmp_42_6

ST_54: tmp217 [1/1] 1.97ns
.preheader8.preheader:727  %tmp217 = add i32 %call_ret17_5, %tmp216

ST_54: temp_2_6 [1/1] 1.97ns
.preheader8.preheader:728  %temp_2_6 = add i32 %tmp215, %tmp217

ST_54: call_ret46_6 [1/1] 2.47ns
.preheader8.preheader:729  %call_ret46_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_5, i32 %B_ret28_5, i32 %C_ret29_5, i32 %D_ret30_5, i32 %temp_2_6)

ST_54: call_ret17_6 [1/1] 0.00ns
.preheader8.preheader:730  %call_ret17_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 0

ST_54: A_ret27_6 [1/1] 0.00ns
.preheader8.preheader:731  %A_ret27_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 1

ST_54: B_ret28_6 [1/1] 0.00ns
.preheader8.preheader:732  %B_ret28_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 2

ST_54: C_ret29_6 [1/1] 0.00ns
.preheader8.preheader:733  %C_ret29_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 3

ST_54: D_ret30_6 [1/1] 0.00ns
.preheader8.preheader:734  %D_ret30_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_6, 4


 <State 55>: 7.03ns
ST_55: tmp_42_7 [1/1] 7.03ns
.preheader8.preheader:735  %tmp_42_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_6)

ST_55: tmp220 [1/1] 2.44ns
.preheader8.preheader:739  %tmp220 = add i32 1859775393, %W_27


 <State 56>: 8.40ns
ST_56: tmp25 [1/1] 0.00ns (grouped into LUT with out node tmp_30_11)
.preheader8.preheader:131  %tmp25 = xor i32 %W_20, %W_25

ST_56: tmp26 [1/1] 0.00ns (grouped into LUT with out node tmp_30_11)
.preheader8.preheader:132  %tmp26 = xor i32 %W_14, %W_12

ST_56: tmp_30_11 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:133  %tmp_30_11 = xor i32 %tmp26, %tmp25

ST_56: W_28 [1/1] 7.03ns
.preheader8.preheader:134  %W_28 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_11)

ST_56: tmp218 [1/1] 0.00ns (grouped into LUT with out node tmp219)
.preheader8.preheader:736  %tmp218 = xor i32 %B_ret28_6, %D_ret30_6

ST_56: tmp_44_7 [1/1] 0.00ns (grouped into LUT with out node tmp219)
.preheader8.preheader:737  %tmp_44_7 = xor i32 %tmp218, %C_ret29_6

ST_56: tmp219 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:738  %tmp219 = add i32 %tmp_44_7, %tmp_42_7

ST_56: tmp221 [1/1] 1.97ns
.preheader8.preheader:740  %tmp221 = add i32 %call_ret17_6, %tmp220

ST_56: temp_2_7 [1/1] 1.97ns
.preheader8.preheader:741  %temp_2_7 = add i32 %tmp219, %tmp221

ST_56: call_ret46_7 [1/1] 2.47ns
.preheader8.preheader:742  %call_ret46_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_6, i32 %B_ret28_6, i32 %C_ret29_6, i32 %D_ret30_6, i32 %temp_2_7)

ST_56: call_ret17_7 [1/1] 0.00ns
.preheader8.preheader:743  %call_ret17_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 0

ST_56: A_ret27_7 [1/1] 0.00ns
.preheader8.preheader:744  %A_ret27_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 1

ST_56: B_ret28_7 [1/1] 0.00ns
.preheader8.preheader:745  %B_ret28_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 2

ST_56: C_ret29_7 [1/1] 0.00ns
.preheader8.preheader:746  %C_ret29_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 3

ST_56: D_ret30_7 [1/1] 0.00ns
.preheader8.preheader:747  %D_ret30_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_7, 4


 <State 57>: 7.03ns
ST_57: tmp_42_8 [1/1] 7.03ns
.preheader8.preheader:748  %tmp_42_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_7)

ST_57: tmp224 [1/1] 2.44ns
.preheader8.preheader:752  %tmp224 = add i32 1859775393, %W_28


 <State 58>: 8.40ns
ST_58: tmp27 [1/1] 0.00ns (grouped into LUT with out node tmp_30_12)
.preheader8.preheader:135  %tmp27 = xor i32 %W_21, %W_26

ST_58: tmp28 [1/1] 0.00ns (grouped into LUT with out node tmp_30_12)
.preheader8.preheader:136  %tmp28 = xor i32 %W_15, %W_13

ST_58: tmp_30_12 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:137  %tmp_30_12 = xor i32 %tmp28, %tmp27

ST_58: W_29 [1/1] 7.03ns
.preheader8.preheader:138  %W_29 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_12)

ST_58: tmp222 [1/1] 0.00ns (grouped into LUT with out node tmp223)
.preheader8.preheader:749  %tmp222 = xor i32 %B_ret28_7, %D_ret30_7

ST_58: tmp_44_8 [1/1] 0.00ns (grouped into LUT with out node tmp223)
.preheader8.preheader:750  %tmp_44_8 = xor i32 %tmp222, %C_ret29_7

ST_58: tmp223 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:751  %tmp223 = add i32 %tmp_44_8, %tmp_42_8

ST_58: tmp225 [1/1] 1.97ns
.preheader8.preheader:753  %tmp225 = add i32 %call_ret17_7, %tmp224

ST_58: temp_2_8 [1/1] 1.97ns
.preheader8.preheader:754  %temp_2_8 = add i32 %tmp223, %tmp225

ST_58: call_ret46_8 [1/1] 2.47ns
.preheader8.preheader:755  %call_ret46_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_7, i32 %B_ret28_7, i32 %C_ret29_7, i32 %D_ret30_7, i32 %temp_2_8)

ST_58: call_ret17_8 [1/1] 0.00ns
.preheader8.preheader:756  %call_ret17_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 0

ST_58: A_ret27_8 [1/1] 0.00ns
.preheader8.preheader:757  %A_ret27_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 1

ST_58: B_ret28_8 [1/1] 0.00ns
.preheader8.preheader:758  %B_ret28_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 2

ST_58: C_ret29_8 [1/1] 0.00ns
.preheader8.preheader:759  %C_ret29_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 3

ST_58: D_ret30_8 [1/1] 0.00ns
.preheader8.preheader:760  %D_ret30_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_8, 4


 <State 59>: 7.03ns
ST_59: tmp_42_9 [1/1] 7.03ns
.preheader8.preheader:761  %tmp_42_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_8)

ST_59: tmp228 [1/1] 2.44ns
.preheader8.preheader:765  %tmp228 = add i32 1859775393, %W_29


 <State 60>: 8.40ns
ST_60: tmp29 [1/1] 0.00ns (grouped into LUT with out node tmp_30_13)
.preheader8.preheader:139  %tmp29 = xor i32 %W_22, %W_27

ST_60: tmp30 [1/1] 0.00ns (grouped into LUT with out node tmp_30_13)
.preheader8.preheader:140  %tmp30 = xor i32 %W_16, %W_14

ST_60: tmp_30_13 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:141  %tmp_30_13 = xor i32 %tmp30, %tmp29

ST_60: W_30 [1/1] 7.03ns
.preheader8.preheader:142  %W_30 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_13)

ST_60: tmp226 [1/1] 0.00ns (grouped into LUT with out node tmp227)
.preheader8.preheader:762  %tmp226 = xor i32 %B_ret28_8, %D_ret30_8

ST_60: tmp_44_9 [1/1] 0.00ns (grouped into LUT with out node tmp227)
.preheader8.preheader:763  %tmp_44_9 = xor i32 %tmp226, %C_ret29_8

ST_60: tmp227 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:764  %tmp227 = add i32 %tmp_44_9, %tmp_42_9

ST_60: tmp229 [1/1] 1.97ns
.preheader8.preheader:766  %tmp229 = add i32 %call_ret17_8, %tmp228

ST_60: temp_2_9 [1/1] 1.97ns
.preheader8.preheader:767  %temp_2_9 = add i32 %tmp227, %tmp229

ST_60: call_ret46_9 [1/1] 2.47ns
.preheader8.preheader:768  %call_ret46_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_8, i32 %B_ret28_8, i32 %C_ret29_8, i32 %D_ret30_8, i32 %temp_2_9)

ST_60: call_ret17_9 [1/1] 0.00ns
.preheader8.preheader:769  %call_ret17_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 0

ST_60: A_ret27_9 [1/1] 0.00ns
.preheader8.preheader:770  %A_ret27_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 1

ST_60: B_ret28_9 [1/1] 0.00ns
.preheader8.preheader:771  %B_ret28_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 2

ST_60: C_ret29_9 [1/1] 0.00ns
.preheader8.preheader:772  %C_ret29_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 3

ST_60: D_ret30_9 [1/1] 0.00ns
.preheader8.preheader:773  %D_ret30_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_9, 4


 <State 61>: 7.03ns
ST_61: tmp_42_s [1/1] 7.03ns
.preheader8.preheader:774  %tmp_42_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_9)

ST_61: tmp232 [1/1] 2.44ns
.preheader8.preheader:778  %tmp232 = add i32 1859775393, %W_30


 <State 62>: 8.40ns
ST_62: tmp31 [1/1] 0.00ns (grouped into LUT with out node tmp_30_14)
.preheader8.preheader:143  %tmp31 = xor i32 %W_23, %W_28

ST_62: tmp32 [1/1] 0.00ns (grouped into LUT with out node tmp_30_14)
.preheader8.preheader:144  %tmp32 = xor i32 %W_17, %W_15

ST_62: tmp_30_14 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:145  %tmp_30_14 = xor i32 %tmp32, %tmp31

ST_62: W_31 [1/1] 7.03ns
.preheader8.preheader:146  %W_31 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_14)

ST_62: tmp230 [1/1] 0.00ns (grouped into LUT with out node tmp231)
.preheader8.preheader:775  %tmp230 = xor i32 %B_ret28_9, %D_ret30_9

ST_62: tmp_44_s [1/1] 0.00ns (grouped into LUT with out node tmp231)
.preheader8.preheader:776  %tmp_44_s = xor i32 %tmp230, %C_ret29_9

ST_62: tmp231 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:777  %tmp231 = add i32 %tmp_44_s, %tmp_42_s

ST_62: tmp233 [1/1] 1.97ns
.preheader8.preheader:779  %tmp233 = add i32 %call_ret17_9, %tmp232

ST_62: temp_2_s [1/1] 1.97ns
.preheader8.preheader:780  %temp_2_s = add i32 %tmp231, %tmp233

ST_62: call_ret46_s [1/1] 2.47ns
.preheader8.preheader:781  %call_ret46_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_9, i32 %B_ret28_9, i32 %C_ret29_9, i32 %D_ret30_9, i32 %temp_2_s)

ST_62: call_ret17_s [1/1] 0.00ns
.preheader8.preheader:782  %call_ret17_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 0

ST_62: A_ret27_s [1/1] 0.00ns
.preheader8.preheader:783  %A_ret27_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 1

ST_62: B_ret28_s [1/1] 0.00ns
.preheader8.preheader:784  %B_ret28_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 2

ST_62: C_ret29_s [1/1] 0.00ns
.preheader8.preheader:785  %C_ret29_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 3

ST_62: D_ret30_s [1/1] 0.00ns
.preheader8.preheader:786  %D_ret30_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_s, 4


 <State 63>: 7.03ns
ST_63: tmp_42_10 [1/1] 7.03ns
.preheader8.preheader:787  %tmp_42_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_s)

ST_63: tmp236 [1/1] 2.44ns
.preheader8.preheader:791  %tmp236 = add i32 1859775393, %W_31


 <State 64>: 8.40ns
ST_64: tmp33 [1/1] 0.00ns (grouped into LUT with out node tmp_30_15)
.preheader8.preheader:147  %tmp33 = xor i32 %W_24, %W_29

ST_64: tmp34 [1/1] 0.00ns (grouped into LUT with out node tmp_30_15)
.preheader8.preheader:148  %tmp34 = xor i32 %W_18, %W_16

ST_64: tmp_30_15 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:149  %tmp_30_15 = xor i32 %tmp34, %tmp33

ST_64: W_32 [1/1] 7.03ns
.preheader8.preheader:150  %W_32 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_15)

ST_64: tmp234 [1/1] 0.00ns (grouped into LUT with out node tmp235)
.preheader8.preheader:788  %tmp234 = xor i32 %B_ret28_s, %D_ret30_s

ST_64: tmp_44_10 [1/1] 0.00ns (grouped into LUT with out node tmp235)
.preheader8.preheader:789  %tmp_44_10 = xor i32 %tmp234, %C_ret29_s

ST_64: tmp235 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:790  %tmp235 = add i32 %tmp_44_10, %tmp_42_10

ST_64: tmp237 [1/1] 1.97ns
.preheader8.preheader:792  %tmp237 = add i32 %call_ret17_s, %tmp236

ST_64: temp_2_10 [1/1] 1.97ns
.preheader8.preheader:793  %temp_2_10 = add i32 %tmp235, %tmp237

ST_64: call_ret46_10 [1/1] 2.47ns
.preheader8.preheader:794  %call_ret46_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_s, i32 %B_ret28_s, i32 %C_ret29_s, i32 %D_ret30_s, i32 %temp_2_10)

ST_64: call_ret17_10 [1/1] 0.00ns
.preheader8.preheader:795  %call_ret17_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 0

ST_64: A_ret27_10 [1/1] 0.00ns
.preheader8.preheader:796  %A_ret27_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 1

ST_64: B_ret28_10 [1/1] 0.00ns
.preheader8.preheader:797  %B_ret28_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 2

ST_64: C_ret29_10 [1/1] 0.00ns
.preheader8.preheader:798  %C_ret29_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 3

ST_64: D_ret30_10 [1/1] 0.00ns
.preheader8.preheader:799  %D_ret30_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_10, 4


 <State 65>: 7.03ns
ST_65: tmp_42_11 [1/1] 7.03ns
.preheader8.preheader:800  %tmp_42_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_10)

ST_65: tmp240 [1/1] 2.44ns
.preheader8.preheader:804  %tmp240 = add i32 1859775393, %W_32


 <State 66>: 8.40ns
ST_66: tmp35 [1/1] 0.00ns (grouped into LUT with out node tmp_30_16)
.preheader8.preheader:151  %tmp35 = xor i32 %W_25, %W_30

ST_66: tmp36 [1/1] 0.00ns (grouped into LUT with out node tmp_30_16)
.preheader8.preheader:152  %tmp36 = xor i32 %W_19, %W_17

ST_66: tmp_30_16 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:153  %tmp_30_16 = xor i32 %tmp36, %tmp35

ST_66: W_33 [1/1] 7.03ns
.preheader8.preheader:154  %W_33 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_16)

ST_66: tmp238 [1/1] 0.00ns (grouped into LUT with out node tmp239)
.preheader8.preheader:801  %tmp238 = xor i32 %B_ret28_10, %D_ret30_10

ST_66: tmp_44_11 [1/1] 0.00ns (grouped into LUT with out node tmp239)
.preheader8.preheader:802  %tmp_44_11 = xor i32 %tmp238, %C_ret29_10

ST_66: tmp239 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:803  %tmp239 = add i32 %tmp_44_11, %tmp_42_11

ST_66: tmp241 [1/1] 1.97ns
.preheader8.preheader:805  %tmp241 = add i32 %call_ret17_10, %tmp240

ST_66: temp_2_11 [1/1] 1.97ns
.preheader8.preheader:806  %temp_2_11 = add i32 %tmp239, %tmp241

ST_66: call_ret46_11 [1/1] 2.47ns
.preheader8.preheader:807  %call_ret46_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_10, i32 %B_ret28_10, i32 %C_ret29_10, i32 %D_ret30_10, i32 %temp_2_11)

ST_66: call_ret17_11 [1/1] 0.00ns
.preheader8.preheader:808  %call_ret17_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 0

ST_66: A_ret27_11 [1/1] 0.00ns
.preheader8.preheader:809  %A_ret27_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 1

ST_66: B_ret28_11 [1/1] 0.00ns
.preheader8.preheader:810  %B_ret28_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 2

ST_66: C_ret29_11 [1/1] 0.00ns
.preheader8.preheader:811  %C_ret29_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 3

ST_66: D_ret30_11 [1/1] 0.00ns
.preheader8.preheader:812  %D_ret30_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_11, 4


 <State 67>: 7.03ns
ST_67: tmp_42_12 [1/1] 7.03ns
.preheader8.preheader:813  %tmp_42_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_11)

ST_67: tmp244 [1/1] 2.44ns
.preheader8.preheader:817  %tmp244 = add i32 1859775393, %W_33


 <State 68>: 8.40ns
ST_68: tmp37 [1/1] 0.00ns (grouped into LUT with out node tmp_30_17)
.preheader8.preheader:155  %tmp37 = xor i32 %W_26, %W_31

ST_68: tmp38 [1/1] 0.00ns (grouped into LUT with out node tmp_30_17)
.preheader8.preheader:156  %tmp38 = xor i32 %W_20, %W_18

ST_68: tmp_30_17 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:157  %tmp_30_17 = xor i32 %tmp38, %tmp37

ST_68: W_34 [1/1] 7.03ns
.preheader8.preheader:158  %W_34 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_17)

ST_68: tmp242 [1/1] 0.00ns (grouped into LUT with out node tmp243)
.preheader8.preheader:814  %tmp242 = xor i32 %B_ret28_11, %D_ret30_11

ST_68: tmp_44_12 [1/1] 0.00ns (grouped into LUT with out node tmp243)
.preheader8.preheader:815  %tmp_44_12 = xor i32 %tmp242, %C_ret29_11

ST_68: tmp243 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:816  %tmp243 = add i32 %tmp_44_12, %tmp_42_12

ST_68: tmp245 [1/1] 1.97ns
.preheader8.preheader:818  %tmp245 = add i32 %call_ret17_11, %tmp244

ST_68: temp_2_12 [1/1] 1.97ns
.preheader8.preheader:819  %temp_2_12 = add i32 %tmp243, %tmp245

ST_68: call_ret46_12 [1/1] 2.47ns
.preheader8.preheader:820  %call_ret46_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_11, i32 %B_ret28_11, i32 %C_ret29_11, i32 %D_ret30_11, i32 %temp_2_12)

ST_68: call_ret17_12 [1/1] 0.00ns
.preheader8.preheader:821  %call_ret17_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 0

ST_68: A_ret27_12 [1/1] 0.00ns
.preheader8.preheader:822  %A_ret27_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 1

ST_68: B_ret28_12 [1/1] 0.00ns
.preheader8.preheader:823  %B_ret28_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 2

ST_68: C_ret29_12 [1/1] 0.00ns
.preheader8.preheader:824  %C_ret29_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 3

ST_68: D_ret30_12 [1/1] 0.00ns
.preheader8.preheader:825  %D_ret30_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_12, 4


 <State 69>: 7.03ns
ST_69: tmp_42_13 [1/1] 7.03ns
.preheader8.preheader:826  %tmp_42_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_12)

ST_69: tmp248 [1/1] 2.44ns
.preheader8.preheader:830  %tmp248 = add i32 1859775393, %W_34


 <State 70>: 8.40ns
ST_70: tmp39 [1/1] 0.00ns (grouped into LUT with out node tmp_30_18)
.preheader8.preheader:159  %tmp39 = xor i32 %W_27, %W_32

ST_70: tmp40 [1/1] 0.00ns (grouped into LUT with out node tmp_30_18)
.preheader8.preheader:160  %tmp40 = xor i32 %W_21, %W_19

ST_70: tmp_30_18 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:161  %tmp_30_18 = xor i32 %tmp40, %tmp39

ST_70: W_35 [1/1] 7.03ns
.preheader8.preheader:162  %W_35 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_18)

ST_70: tmp246 [1/1] 0.00ns (grouped into LUT with out node tmp247)
.preheader8.preheader:827  %tmp246 = xor i32 %B_ret28_12, %D_ret30_12

ST_70: tmp_44_13 [1/1] 0.00ns (grouped into LUT with out node tmp247)
.preheader8.preheader:828  %tmp_44_13 = xor i32 %tmp246, %C_ret29_12

ST_70: tmp247 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:829  %tmp247 = add i32 %tmp_44_13, %tmp_42_13

ST_70: tmp249 [1/1] 1.97ns
.preheader8.preheader:831  %tmp249 = add i32 %call_ret17_12, %tmp248

ST_70: temp_2_13 [1/1] 1.97ns
.preheader8.preheader:832  %temp_2_13 = add i32 %tmp247, %tmp249

ST_70: call_ret46_13 [1/1] 2.47ns
.preheader8.preheader:833  %call_ret46_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_12, i32 %B_ret28_12, i32 %C_ret29_12, i32 %D_ret30_12, i32 %temp_2_13)

ST_70: call_ret17_13 [1/1] 0.00ns
.preheader8.preheader:834  %call_ret17_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 0

ST_70: A_ret27_13 [1/1] 0.00ns
.preheader8.preheader:835  %A_ret27_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 1

ST_70: B_ret28_13 [1/1] 0.00ns
.preheader8.preheader:836  %B_ret28_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 2

ST_70: C_ret29_13 [1/1] 0.00ns
.preheader8.preheader:837  %C_ret29_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 3

ST_70: D_ret30_13 [1/1] 0.00ns
.preheader8.preheader:838  %D_ret30_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_13, 4


 <State 71>: 7.03ns
ST_71: tmp_42_14 [1/1] 7.03ns
.preheader8.preheader:839  %tmp_42_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_13)

ST_71: tmp252 [1/1] 2.44ns
.preheader8.preheader:843  %tmp252 = add i32 1859775393, %W_35


 <State 72>: 8.40ns
ST_72: tmp41 [1/1] 0.00ns (grouped into LUT with out node tmp_30_19)
.preheader8.preheader:163  %tmp41 = xor i32 %W_28, %W_33

ST_72: tmp42 [1/1] 0.00ns (grouped into LUT with out node tmp_30_19)
.preheader8.preheader:164  %tmp42 = xor i32 %W_22, %W_20

ST_72: tmp_30_19 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:165  %tmp_30_19 = xor i32 %tmp42, %tmp41

ST_72: W_36 [1/1] 7.03ns
.preheader8.preheader:166  %W_36 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_19)

ST_72: tmp250 [1/1] 0.00ns (grouped into LUT with out node tmp251)
.preheader8.preheader:840  %tmp250 = xor i32 %B_ret28_13, %D_ret30_13

ST_72: tmp_44_14 [1/1] 0.00ns (grouped into LUT with out node tmp251)
.preheader8.preheader:841  %tmp_44_14 = xor i32 %tmp250, %C_ret29_13

ST_72: tmp251 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:842  %tmp251 = add i32 %tmp_44_14, %tmp_42_14

ST_72: tmp253 [1/1] 1.97ns
.preheader8.preheader:844  %tmp253 = add i32 %call_ret17_13, %tmp252

ST_72: temp_2_14 [1/1] 1.97ns
.preheader8.preheader:845  %temp_2_14 = add i32 %tmp251, %tmp253

ST_72: call_ret46_14 [1/1] 2.47ns
.preheader8.preheader:846  %call_ret46_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_13, i32 %B_ret28_13, i32 %C_ret29_13, i32 %D_ret30_13, i32 %temp_2_14)

ST_72: call_ret17_14 [1/1] 0.00ns
.preheader8.preheader:847  %call_ret17_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 0

ST_72: A_ret27_14 [1/1] 0.00ns
.preheader8.preheader:848  %A_ret27_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 1

ST_72: B_ret28_14 [1/1] 0.00ns
.preheader8.preheader:849  %B_ret28_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 2

ST_72: C_ret29_14 [1/1] 0.00ns
.preheader8.preheader:850  %C_ret29_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 3

ST_72: D_ret30_14 [1/1] 0.00ns
.preheader8.preheader:851  %D_ret30_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_14, 4


 <State 73>: 7.03ns
ST_73: tmp_42_15 [1/1] 7.03ns
.preheader8.preheader:852  %tmp_42_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_14)

ST_73: tmp256 [1/1] 2.44ns
.preheader8.preheader:856  %tmp256 = add i32 1859775393, %W_36


 <State 74>: 8.40ns
ST_74: tmp43 [1/1] 0.00ns (grouped into LUT with out node tmp_30_20)
.preheader8.preheader:167  %tmp43 = xor i32 %W_29, %W_34

ST_74: tmp44 [1/1] 0.00ns (grouped into LUT with out node tmp_30_20)
.preheader8.preheader:168  %tmp44 = xor i32 %W_23, %W_21

ST_74: tmp_30_20 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:169  %tmp_30_20 = xor i32 %tmp44, %tmp43

ST_74: W_37 [1/1] 7.03ns
.preheader8.preheader:170  %W_37 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_20)

ST_74: tmp254 [1/1] 0.00ns (grouped into LUT with out node tmp255)
.preheader8.preheader:853  %tmp254 = xor i32 %B_ret28_14, %D_ret30_14

ST_74: tmp_44_15 [1/1] 0.00ns (grouped into LUT with out node tmp255)
.preheader8.preheader:854  %tmp_44_15 = xor i32 %tmp254, %C_ret29_14

ST_74: tmp255 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:855  %tmp255 = add i32 %tmp_44_15, %tmp_42_15

ST_74: tmp257 [1/1] 1.97ns
.preheader8.preheader:857  %tmp257 = add i32 %call_ret17_14, %tmp256

ST_74: temp_2_15 [1/1] 1.97ns
.preheader8.preheader:858  %temp_2_15 = add i32 %tmp255, %tmp257

ST_74: call_ret46_15 [1/1] 2.47ns
.preheader8.preheader:859  %call_ret46_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_14, i32 %B_ret28_14, i32 %C_ret29_14, i32 %D_ret30_14, i32 %temp_2_15)

ST_74: call_ret17_15 [1/1] 0.00ns
.preheader8.preheader:860  %call_ret17_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 0

ST_74: A_ret27_15 [1/1] 0.00ns
.preheader8.preheader:861  %A_ret27_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 1

ST_74: B_ret28_15 [1/1] 0.00ns
.preheader8.preheader:862  %B_ret28_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 2

ST_74: C_ret29_15 [1/1] 0.00ns
.preheader8.preheader:863  %C_ret29_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 3

ST_74: D_ret30_15 [1/1] 0.00ns
.preheader8.preheader:864  %D_ret30_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_15, 4


 <State 75>: 7.03ns
ST_75: tmp_42_16 [1/1] 7.03ns
.preheader8.preheader:865  %tmp_42_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_15)

ST_75: tmp260 [1/1] 2.44ns
.preheader8.preheader:869  %tmp260 = add i32 1859775393, %W_37


 <State 76>: 8.40ns
ST_76: tmp45 [1/1] 0.00ns (grouped into LUT with out node tmp_30_21)
.preheader8.preheader:171  %tmp45 = xor i32 %W_30, %W_35

ST_76: tmp46 [1/1] 0.00ns (grouped into LUT with out node tmp_30_21)
.preheader8.preheader:172  %tmp46 = xor i32 %W_24, %W_22

ST_76: tmp_30_21 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:173  %tmp_30_21 = xor i32 %tmp46, %tmp45

ST_76: W_38 [1/1] 7.03ns
.preheader8.preheader:174  %W_38 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_21)

ST_76: tmp258 [1/1] 0.00ns (grouped into LUT with out node tmp259)
.preheader8.preheader:866  %tmp258 = xor i32 %B_ret28_15, %D_ret30_15

ST_76: tmp_44_16 [1/1] 0.00ns (grouped into LUT with out node tmp259)
.preheader8.preheader:867  %tmp_44_16 = xor i32 %tmp258, %C_ret29_15

ST_76: tmp259 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:868  %tmp259 = add i32 %tmp_44_16, %tmp_42_16

ST_76: tmp261 [1/1] 1.97ns
.preheader8.preheader:870  %tmp261 = add i32 %call_ret17_15, %tmp260

ST_76: temp_2_16 [1/1] 1.97ns
.preheader8.preheader:871  %temp_2_16 = add i32 %tmp259, %tmp261

ST_76: call_ret46_16 [1/1] 2.47ns
.preheader8.preheader:872  %call_ret46_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_15, i32 %B_ret28_15, i32 %C_ret29_15, i32 %D_ret30_15, i32 %temp_2_16)

ST_76: call_ret17_16 [1/1] 0.00ns
.preheader8.preheader:873  %call_ret17_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 0

ST_76: A_ret27_16 [1/1] 0.00ns
.preheader8.preheader:874  %A_ret27_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 1

ST_76: B_ret28_16 [1/1] 0.00ns
.preheader8.preheader:875  %B_ret28_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 2

ST_76: C_ret29_16 [1/1] 0.00ns
.preheader8.preheader:876  %C_ret29_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 3

ST_76: D_ret30_16 [1/1] 0.00ns
.preheader8.preheader:877  %D_ret30_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_16, 4


 <State 77>: 7.03ns
ST_77: tmp_42_17 [1/1] 7.03ns
.preheader8.preheader:878  %tmp_42_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_16)

ST_77: tmp264 [1/1] 2.44ns
.preheader8.preheader:882  %tmp264 = add i32 1859775393, %W_38


 <State 78>: 8.40ns
ST_78: tmp47 [1/1] 0.00ns (grouped into LUT with out node tmp_30_22)
.preheader8.preheader:175  %tmp47 = xor i32 %W_31, %W_36

ST_78: tmp48 [1/1] 0.00ns (grouped into LUT with out node tmp_30_22)
.preheader8.preheader:176  %tmp48 = xor i32 %W_25, %W_23

ST_78: tmp_30_22 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:177  %tmp_30_22 = xor i32 %tmp48, %tmp47

ST_78: W_39 [1/1] 7.03ns
.preheader8.preheader:178  %W_39 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_22)

ST_78: tmp262 [1/1] 0.00ns (grouped into LUT with out node tmp263)
.preheader8.preheader:879  %tmp262 = xor i32 %B_ret28_16, %D_ret30_16

ST_78: tmp_44_17 [1/1] 0.00ns (grouped into LUT with out node tmp263)
.preheader8.preheader:880  %tmp_44_17 = xor i32 %tmp262, %C_ret29_16

ST_78: tmp263 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:881  %tmp263 = add i32 %tmp_44_17, %tmp_42_17

ST_78: tmp265 [1/1] 1.97ns
.preheader8.preheader:883  %tmp265 = add i32 %call_ret17_16, %tmp264

ST_78: temp_2_17 [1/1] 1.97ns
.preheader8.preheader:884  %temp_2_17 = add i32 %tmp263, %tmp265

ST_78: call_ret46_17 [1/1] 2.47ns
.preheader8.preheader:885  %call_ret46_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_16, i32 %B_ret28_16, i32 %C_ret29_16, i32 %D_ret30_16, i32 %temp_2_17)

ST_78: call_ret17_17 [1/1] 0.00ns
.preheader8.preheader:886  %call_ret17_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 0

ST_78: A_ret27_17 [1/1] 0.00ns
.preheader8.preheader:887  %A_ret27_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 1

ST_78: B_ret28_17 [1/1] 0.00ns
.preheader8.preheader:888  %B_ret28_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 2

ST_78: C_ret29_17 [1/1] 0.00ns
.preheader8.preheader:889  %C_ret29_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 3

ST_78: D_ret30_17 [1/1] 0.00ns
.preheader8.preheader:890  %D_ret30_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_17, 4


 <State 79>: 7.03ns
ST_79: tmp_42_18 [1/1] 7.03ns
.preheader8.preheader:891  %tmp_42_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_17)

ST_79: tmp268 [1/1] 2.44ns
.preheader8.preheader:895  %tmp268 = add i32 1859775393, %W_39


 <State 80>: 8.40ns
ST_80: tmp49 [1/1] 0.00ns (grouped into LUT with out node tmp_30_23)
.preheader8.preheader:179  %tmp49 = xor i32 %W_32, %W_37

ST_80: tmp50 [1/1] 0.00ns (grouped into LUT with out node tmp_30_23)
.preheader8.preheader:180  %tmp50 = xor i32 %W_26, %W_24

ST_80: tmp_30_23 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:181  %tmp_30_23 = xor i32 %tmp50, %tmp49

ST_80: W_40 [1/1] 7.03ns
.preheader8.preheader:182  %W_40 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_23)

ST_80: tmp266 [1/1] 0.00ns (grouped into LUT with out node tmp267)
.preheader8.preheader:892  %tmp266 = xor i32 %B_ret28_17, %D_ret30_17

ST_80: tmp_44_18 [1/1] 0.00ns (grouped into LUT with out node tmp267)
.preheader8.preheader:893  %tmp_44_18 = xor i32 %tmp266, %C_ret29_17

ST_80: tmp267 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:894  %tmp267 = add i32 %tmp_44_18, %tmp_42_18

ST_80: tmp269 [1/1] 1.97ns
.preheader8.preheader:896  %tmp269 = add i32 %call_ret17_17, %tmp268

ST_80: temp_2_18 [1/1] 1.97ns
.preheader8.preheader:897  %temp_2_18 = add i32 %tmp267, %tmp269

ST_80: call_ret46_18 [1/1] 2.47ns
.preheader8.preheader:898  %call_ret46_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_17, i32 %B_ret28_17, i32 %C_ret29_17, i32 %D_ret30_17, i32 %temp_2_18)

ST_80: call_ret17_18 [1/1] 0.00ns
.preheader8.preheader:899  %call_ret17_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 0

ST_80: A_ret27_18 [1/1] 0.00ns
.preheader8.preheader:900  %A_ret27_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 1

ST_80: B_ret28_18 [1/1] 0.00ns
.preheader8.preheader:901  %B_ret28_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 2

ST_80: C_ret29_18 [1/1] 0.00ns
.preheader8.preheader:902  %C_ret29_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 3

ST_80: D_ret30_18 [1/1] 0.00ns
.preheader8.preheader:903  %D_ret30_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret46_18, 4


 <State 81>: 7.03ns
ST_81: tmp_76 [1/1] 7.03ns
.preheader8.preheader:904  %tmp_76 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret27_18)

ST_81: tmp_77 [1/1] 0.00ns (grouped into LUT with out node tmp271)
.preheader8.preheader:905  %tmp_77 = or i32 %D_ret30_18, %C_ret29_18

ST_81: tmp_78 [1/1] 0.00ns (grouped into LUT with out node tmp271)
.preheader8.preheader:906  %tmp_78 = and i32 %tmp_77, %B_ret28_18

ST_81: tmp_79 [1/1] 0.00ns (grouped into LUT with out node tmp271)
.preheader8.preheader:907  %tmp_79 = and i32 %D_ret30_18, %C_ret29_18

ST_81: tmp_80 [1/1] 0.00ns (grouped into LUT with out node tmp271)
.preheader8.preheader:908  %tmp_80 = or i32 %tmp_78, %tmp_79

ST_81: tmp271 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:910  %tmp271 = add i32 %tmp_80, %W_40


 <State 82>: 8.40ns
ST_82: tmp51 [1/1] 0.00ns (grouped into LUT with out node tmp_30_24)
.preheader8.preheader:183  %tmp51 = xor i32 %W_33, %W_38

ST_82: tmp52 [1/1] 0.00ns (grouped into LUT with out node tmp_30_24)
.preheader8.preheader:184  %tmp52 = xor i32 %W_27, %W_25

ST_82: tmp_30_24 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:185  %tmp_30_24 = xor i32 %tmp52, %tmp51

ST_82: W_41 [1/1] 7.03ns
.preheader8.preheader:186  %W_41 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_24)

ST_82: tmp270 [1/1] 2.44ns
.preheader8.preheader:909  %tmp270 = add i32 -1894007588, %tmp_76

ST_82: tmp272 [1/1] 1.97ns
.preheader8.preheader:911  %tmp272 = add i32 %call_ret17_18, %tmp271

ST_82: temp_3 [1/1] 1.97ns
.preheader8.preheader:912  %temp_3 = add i32 %tmp270, %tmp272

ST_82: call_ret5 [1/1] 2.47ns
.preheader8.preheader:913  %call_ret5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret27_18, i32 %B_ret28_18, i32 %C_ret29_18, i32 %D_ret30_18, i32 %temp_3)

ST_82: call_ret6 [1/1] 0.00ns
.preheader8.preheader:914  %call_ret6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 0

ST_82: A_ret2 [1/1] 0.00ns
.preheader8.preheader:915  %A_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 1

ST_82: B_ret2 [1/1] 0.00ns
.preheader8.preheader:916  %B_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 2

ST_82: C_ret2 [1/1] 0.00ns
.preheader8.preheader:917  %C_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 3

ST_82: D_ret2 [1/1] 0.00ns
.preheader8.preheader:918  %D_ret2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 4


 <State 83>: 7.03ns
ST_83: tmp_49_1 [1/1] 7.03ns
.preheader8.preheader:919  %tmp_49_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret2)

ST_83: tmp_50_1 [1/1] 0.00ns (grouped into LUT with out node tmp274)
.preheader8.preheader:920  %tmp_50_1 = or i32 %D_ret2, %C_ret2

ST_83: tmp_51_1 [1/1] 0.00ns (grouped into LUT with out node tmp274)
.preheader8.preheader:921  %tmp_51_1 = and i32 %tmp_50_1, %B_ret2

ST_83: tmp_52_1 [1/1] 0.00ns (grouped into LUT with out node tmp274)
.preheader8.preheader:922  %tmp_52_1 = and i32 %D_ret2, %C_ret2

ST_83: tmp_53_1 [1/1] 0.00ns (grouped into LUT with out node tmp274)
.preheader8.preheader:923  %tmp_53_1 = or i32 %tmp_51_1, %tmp_52_1

ST_83: tmp274 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:925  %tmp274 = add i32 %tmp_53_1, %W_41


 <State 84>: 8.40ns
ST_84: tmp53 [1/1] 0.00ns (grouped into LUT with out node tmp_30_25)
.preheader8.preheader:187  %tmp53 = xor i32 %W_34, %W_39

ST_84: tmp54 [1/1] 0.00ns (grouped into LUT with out node tmp_30_25)
.preheader8.preheader:188  %tmp54 = xor i32 %W_28, %W_26

ST_84: tmp_30_25 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:189  %tmp_30_25 = xor i32 %tmp54, %tmp53

ST_84: W_42 [1/1] 7.03ns
.preheader8.preheader:190  %W_42 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_25)

ST_84: tmp273 [1/1] 2.44ns
.preheader8.preheader:924  %tmp273 = add i32 -1894007588, %tmp_49_1

ST_84: tmp275 [1/1] 1.97ns
.preheader8.preheader:926  %tmp275 = add i32 %call_ret6, %tmp274

ST_84: temp_3_1 [1/1] 1.97ns
.preheader8.preheader:927  %temp_3_1 = add i32 %tmp273, %tmp275

ST_84: call_ret45_1 [1/1] 2.47ns
.preheader8.preheader:928  %call_ret45_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret2, i32 %B_ret2, i32 %C_ret2, i32 %D_ret2, i32 %temp_3_1)

ST_84: call_ret11_1 [1/1] 0.00ns
.preheader8.preheader:929  %call_ret11_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 0

ST_84: A_ret33_1 [1/1] 0.00ns
.preheader8.preheader:930  %A_ret33_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 1

ST_84: B_ret34_1 [1/1] 0.00ns
.preheader8.preheader:931  %B_ret34_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 2

ST_84: C_ret35_1 [1/1] 0.00ns
.preheader8.preheader:932  %C_ret35_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 3

ST_84: D_ret36_1 [1/1] 0.00ns
.preheader8.preheader:933  %D_ret36_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_1, 4


 <State 85>: 7.03ns
ST_85: tmp_49_2 [1/1] 7.03ns
.preheader8.preheader:934  %tmp_49_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_1)

ST_85: tmp_50_2 [1/1] 0.00ns (grouped into LUT with out node tmp277)
.preheader8.preheader:935  %tmp_50_2 = or i32 %D_ret36_1, %C_ret35_1

ST_85: tmp_51_2 [1/1] 0.00ns (grouped into LUT with out node tmp277)
.preheader8.preheader:936  %tmp_51_2 = and i32 %tmp_50_2, %B_ret34_1

ST_85: tmp_52_2 [1/1] 0.00ns (grouped into LUT with out node tmp277)
.preheader8.preheader:937  %tmp_52_2 = and i32 %D_ret36_1, %C_ret35_1

ST_85: tmp_53_2 [1/1] 0.00ns (grouped into LUT with out node tmp277)
.preheader8.preheader:938  %tmp_53_2 = or i32 %tmp_51_2, %tmp_52_2

ST_85: tmp277 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:940  %tmp277 = add i32 %tmp_53_2, %W_42


 <State 86>: 8.40ns
ST_86: tmp55 [1/1] 0.00ns (grouped into LUT with out node tmp_30_26)
.preheader8.preheader:191  %tmp55 = xor i32 %W_35, %W_40

ST_86: tmp56 [1/1] 0.00ns (grouped into LUT with out node tmp_30_26)
.preheader8.preheader:192  %tmp56 = xor i32 %W_29, %W_27

ST_86: tmp_30_26 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:193  %tmp_30_26 = xor i32 %tmp56, %tmp55

ST_86: W_43 [1/1] 7.03ns
.preheader8.preheader:194  %W_43 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_26)

ST_86: tmp276 [1/1] 2.44ns
.preheader8.preheader:939  %tmp276 = add i32 -1894007588, %tmp_49_2

ST_86: tmp278 [1/1] 1.97ns
.preheader8.preheader:941  %tmp278 = add i32 %call_ret11_1, %tmp277

ST_86: temp_3_2 [1/1] 1.97ns
.preheader8.preheader:942  %temp_3_2 = add i32 %tmp276, %tmp278

ST_86: call_ret45_2 [1/1] 2.47ns
.preheader8.preheader:943  %call_ret45_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_1, i32 %B_ret34_1, i32 %C_ret35_1, i32 %D_ret36_1, i32 %temp_3_2)

ST_86: call_ret11_2 [1/1] 0.00ns
.preheader8.preheader:944  %call_ret11_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 0

ST_86: A_ret33_2 [1/1] 0.00ns
.preheader8.preheader:945  %A_ret33_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 1

ST_86: B_ret34_2 [1/1] 0.00ns
.preheader8.preheader:946  %B_ret34_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 2

ST_86: C_ret35_2 [1/1] 0.00ns
.preheader8.preheader:947  %C_ret35_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 3

ST_86: D_ret36_2 [1/1] 0.00ns
.preheader8.preheader:948  %D_ret36_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_2, 4


 <State 87>: 7.03ns
ST_87: tmp_49_3 [1/1] 7.03ns
.preheader8.preheader:949  %tmp_49_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_2)

ST_87: tmp_50_3 [1/1] 0.00ns (grouped into LUT with out node tmp280)
.preheader8.preheader:950  %tmp_50_3 = or i32 %D_ret36_2, %C_ret35_2

ST_87: tmp_51_3 [1/1] 0.00ns (grouped into LUT with out node tmp280)
.preheader8.preheader:951  %tmp_51_3 = and i32 %tmp_50_3, %B_ret34_2

ST_87: tmp_52_3 [1/1] 0.00ns (grouped into LUT with out node tmp280)
.preheader8.preheader:952  %tmp_52_3 = and i32 %D_ret36_2, %C_ret35_2

ST_87: tmp_53_3 [1/1] 0.00ns (grouped into LUT with out node tmp280)
.preheader8.preheader:953  %tmp_53_3 = or i32 %tmp_51_3, %tmp_52_3

ST_87: tmp280 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:955  %tmp280 = add i32 %tmp_53_3, %W_43


 <State 88>: 8.40ns
ST_88: tmp57 [1/1] 0.00ns (grouped into LUT with out node tmp_30_27)
.preheader8.preheader:195  %tmp57 = xor i32 %W_36, %W_41

ST_88: tmp58 [1/1] 0.00ns (grouped into LUT with out node tmp_30_27)
.preheader8.preheader:196  %tmp58 = xor i32 %W_30, %W_28

ST_88: tmp_30_27 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:197  %tmp_30_27 = xor i32 %tmp58, %tmp57

ST_88: W_44 [1/1] 7.03ns
.preheader8.preheader:198  %W_44 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_27)

ST_88: tmp279 [1/1] 2.44ns
.preheader8.preheader:954  %tmp279 = add i32 -1894007588, %tmp_49_3

ST_88: tmp281 [1/1] 1.97ns
.preheader8.preheader:956  %tmp281 = add i32 %call_ret11_2, %tmp280

ST_88: temp_3_3 [1/1] 1.97ns
.preheader8.preheader:957  %temp_3_3 = add i32 %tmp279, %tmp281

ST_88: call_ret45_3 [1/1] 2.47ns
.preheader8.preheader:958  %call_ret45_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_2, i32 %B_ret34_2, i32 %C_ret35_2, i32 %D_ret36_2, i32 %temp_3_3)

ST_88: call_ret11_3 [1/1] 0.00ns
.preheader8.preheader:959  %call_ret11_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 0

ST_88: A_ret33_3 [1/1] 0.00ns
.preheader8.preheader:960  %A_ret33_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 1

ST_88: B_ret34_3 [1/1] 0.00ns
.preheader8.preheader:961  %B_ret34_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 2

ST_88: C_ret35_3 [1/1] 0.00ns
.preheader8.preheader:962  %C_ret35_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 3

ST_88: D_ret36_3 [1/1] 0.00ns
.preheader8.preheader:963  %D_ret36_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_3, 4


 <State 89>: 7.03ns
ST_89: tmp_49_4 [1/1] 7.03ns
.preheader8.preheader:964  %tmp_49_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_3)

ST_89: tmp_50_4 [1/1] 0.00ns (grouped into LUT with out node tmp283)
.preheader8.preheader:965  %tmp_50_4 = or i32 %D_ret36_3, %C_ret35_3

ST_89: tmp_51_4 [1/1] 0.00ns (grouped into LUT with out node tmp283)
.preheader8.preheader:966  %tmp_51_4 = and i32 %tmp_50_4, %B_ret34_3

ST_89: tmp_52_4 [1/1] 0.00ns (grouped into LUT with out node tmp283)
.preheader8.preheader:967  %tmp_52_4 = and i32 %D_ret36_3, %C_ret35_3

ST_89: tmp_53_4 [1/1] 0.00ns (grouped into LUT with out node tmp283)
.preheader8.preheader:968  %tmp_53_4 = or i32 %tmp_51_4, %tmp_52_4

ST_89: tmp283 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:970  %tmp283 = add i32 %tmp_53_4, %W_44


 <State 90>: 8.40ns
ST_90: tmp59 [1/1] 0.00ns (grouped into LUT with out node tmp_30_28)
.preheader8.preheader:199  %tmp59 = xor i32 %W_37, %W_42

ST_90: tmp60 [1/1] 0.00ns (grouped into LUT with out node tmp_30_28)
.preheader8.preheader:200  %tmp60 = xor i32 %W_31, %W_29

ST_90: tmp_30_28 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:201  %tmp_30_28 = xor i32 %tmp60, %tmp59

ST_90: W_45 [1/1] 7.03ns
.preheader8.preheader:202  %W_45 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_28)

ST_90: tmp282 [1/1] 2.44ns
.preheader8.preheader:969  %tmp282 = add i32 -1894007588, %tmp_49_4

ST_90: tmp284 [1/1] 1.97ns
.preheader8.preheader:971  %tmp284 = add i32 %call_ret11_3, %tmp283

ST_90: temp_3_4 [1/1] 1.97ns
.preheader8.preheader:972  %temp_3_4 = add i32 %tmp282, %tmp284

ST_90: call_ret45_4 [1/1] 2.47ns
.preheader8.preheader:973  %call_ret45_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_3, i32 %B_ret34_3, i32 %C_ret35_3, i32 %D_ret36_3, i32 %temp_3_4)

ST_90: call_ret11_4 [1/1] 0.00ns
.preheader8.preheader:974  %call_ret11_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 0

ST_90: A_ret33_4 [1/1] 0.00ns
.preheader8.preheader:975  %A_ret33_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 1

ST_90: B_ret34_4 [1/1] 0.00ns
.preheader8.preheader:976  %B_ret34_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 2

ST_90: C_ret35_4 [1/1] 0.00ns
.preheader8.preheader:977  %C_ret35_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 3

ST_90: D_ret36_4 [1/1] 0.00ns
.preheader8.preheader:978  %D_ret36_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_4, 4


 <State 91>: 7.03ns
ST_91: tmp_49_5 [1/1] 7.03ns
.preheader8.preheader:979  %tmp_49_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_4)

ST_91: tmp_50_5 [1/1] 0.00ns (grouped into LUT with out node tmp286)
.preheader8.preheader:980  %tmp_50_5 = or i32 %D_ret36_4, %C_ret35_4

ST_91: tmp_51_5 [1/1] 0.00ns (grouped into LUT with out node tmp286)
.preheader8.preheader:981  %tmp_51_5 = and i32 %tmp_50_5, %B_ret34_4

ST_91: tmp_52_5 [1/1] 0.00ns (grouped into LUT with out node tmp286)
.preheader8.preheader:982  %tmp_52_5 = and i32 %D_ret36_4, %C_ret35_4

ST_91: tmp_53_5 [1/1] 0.00ns (grouped into LUT with out node tmp286)
.preheader8.preheader:983  %tmp_53_5 = or i32 %tmp_51_5, %tmp_52_5

ST_91: tmp286 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:985  %tmp286 = add i32 %tmp_53_5, %W_45


 <State 92>: 8.40ns
ST_92: tmp61 [1/1] 0.00ns (grouped into LUT with out node tmp_30_29)
.preheader8.preheader:203  %tmp61 = xor i32 %W_38, %W_43

ST_92: tmp62 [1/1] 0.00ns (grouped into LUT with out node tmp_30_29)
.preheader8.preheader:204  %tmp62 = xor i32 %W_32, %W_30

ST_92: tmp_30_29 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:205  %tmp_30_29 = xor i32 %tmp62, %tmp61

ST_92: W_46 [1/1] 7.03ns
.preheader8.preheader:206  %W_46 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_29)

ST_92: tmp285 [1/1] 2.44ns
.preheader8.preheader:984  %tmp285 = add i32 -1894007588, %tmp_49_5

ST_92: tmp287 [1/1] 1.97ns
.preheader8.preheader:986  %tmp287 = add i32 %call_ret11_4, %tmp286

ST_92: temp_3_5 [1/1] 1.97ns
.preheader8.preheader:987  %temp_3_5 = add i32 %tmp285, %tmp287

ST_92: call_ret45_5 [1/1] 2.47ns
.preheader8.preheader:988  %call_ret45_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_4, i32 %B_ret34_4, i32 %C_ret35_4, i32 %D_ret36_4, i32 %temp_3_5)

ST_92: call_ret11_5 [1/1] 0.00ns
.preheader8.preheader:989  %call_ret11_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 0

ST_92: A_ret33_5 [1/1] 0.00ns
.preheader8.preheader:990  %A_ret33_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 1

ST_92: B_ret34_5 [1/1] 0.00ns
.preheader8.preheader:991  %B_ret34_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 2

ST_92: C_ret35_5 [1/1] 0.00ns
.preheader8.preheader:992  %C_ret35_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 3

ST_92: D_ret36_5 [1/1] 0.00ns
.preheader8.preheader:993  %D_ret36_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_5, 4


 <State 93>: 7.03ns
ST_93: tmp_49_6 [1/1] 7.03ns
.preheader8.preheader:994  %tmp_49_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_5)

ST_93: tmp_50_6 [1/1] 0.00ns (grouped into LUT with out node tmp289)
.preheader8.preheader:995  %tmp_50_6 = or i32 %D_ret36_5, %C_ret35_5

ST_93: tmp_51_6 [1/1] 0.00ns (grouped into LUT with out node tmp289)
.preheader8.preheader:996  %tmp_51_6 = and i32 %tmp_50_6, %B_ret34_5

ST_93: tmp_52_6 [1/1] 0.00ns (grouped into LUT with out node tmp289)
.preheader8.preheader:997  %tmp_52_6 = and i32 %D_ret36_5, %C_ret35_5

ST_93: tmp_53_6 [1/1] 0.00ns (grouped into LUT with out node tmp289)
.preheader8.preheader:998  %tmp_53_6 = or i32 %tmp_51_6, %tmp_52_6

ST_93: tmp289 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1000  %tmp289 = add i32 %tmp_53_6, %W_46


 <State 94>: 8.40ns
ST_94: tmp63 [1/1] 0.00ns (grouped into LUT with out node tmp_30_30)
.preheader8.preheader:207  %tmp63 = xor i32 %W_39, %W_44

ST_94: tmp64 [1/1] 0.00ns (grouped into LUT with out node tmp_30_30)
.preheader8.preheader:208  %tmp64 = xor i32 %W_33, %W_31

ST_94: tmp_30_30 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:209  %tmp_30_30 = xor i32 %tmp64, %tmp63

ST_94: W_47 [1/1] 7.03ns
.preheader8.preheader:210  %W_47 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_30)

ST_94: tmp288 [1/1] 2.44ns
.preheader8.preheader:999  %tmp288 = add i32 -1894007588, %tmp_49_6

ST_94: tmp290 [1/1] 1.97ns
.preheader8.preheader:1001  %tmp290 = add i32 %call_ret11_5, %tmp289

ST_94: temp_3_6 [1/1] 1.97ns
.preheader8.preheader:1002  %temp_3_6 = add i32 %tmp288, %tmp290

ST_94: call_ret45_6 [1/1] 2.47ns
.preheader8.preheader:1003  %call_ret45_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_5, i32 %B_ret34_5, i32 %C_ret35_5, i32 %D_ret36_5, i32 %temp_3_6)

ST_94: call_ret11_6 [1/1] 0.00ns
.preheader8.preheader:1004  %call_ret11_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 0

ST_94: A_ret33_6 [1/1] 0.00ns
.preheader8.preheader:1005  %A_ret33_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 1

ST_94: B_ret34_6 [1/1] 0.00ns
.preheader8.preheader:1006  %B_ret34_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 2

ST_94: C_ret35_6 [1/1] 0.00ns
.preheader8.preheader:1007  %C_ret35_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 3

ST_94: D_ret36_6 [1/1] 0.00ns
.preheader8.preheader:1008  %D_ret36_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_6, 4


 <State 95>: 7.03ns
ST_95: tmp_49_7 [1/1] 7.03ns
.preheader8.preheader:1009  %tmp_49_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_6)

ST_95: tmp_50_7 [1/1] 0.00ns (grouped into LUT with out node tmp292)
.preheader8.preheader:1010  %tmp_50_7 = or i32 %D_ret36_6, %C_ret35_6

ST_95: tmp_51_7 [1/1] 0.00ns (grouped into LUT with out node tmp292)
.preheader8.preheader:1011  %tmp_51_7 = and i32 %tmp_50_7, %B_ret34_6

ST_95: tmp_52_7 [1/1] 0.00ns (grouped into LUT with out node tmp292)
.preheader8.preheader:1012  %tmp_52_7 = and i32 %D_ret36_6, %C_ret35_6

ST_95: tmp_53_7 [1/1] 0.00ns (grouped into LUT with out node tmp292)
.preheader8.preheader:1013  %tmp_53_7 = or i32 %tmp_51_7, %tmp_52_7

ST_95: tmp292 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1015  %tmp292 = add i32 %tmp_53_7, %W_47


 <State 96>: 8.40ns
ST_96: tmp65 [1/1] 0.00ns (grouped into LUT with out node tmp_30_31)
.preheader8.preheader:211  %tmp65 = xor i32 %W_40, %W_45

ST_96: tmp66 [1/1] 0.00ns (grouped into LUT with out node tmp_30_31)
.preheader8.preheader:212  %tmp66 = xor i32 %W_34, %W_32

ST_96: tmp_30_31 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:213  %tmp_30_31 = xor i32 %tmp66, %tmp65

ST_96: W_48 [1/1] 7.03ns
.preheader8.preheader:214  %W_48 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_31)

ST_96: tmp291 [1/1] 2.44ns
.preheader8.preheader:1014  %tmp291 = add i32 -1894007588, %tmp_49_7

ST_96: tmp293 [1/1] 1.97ns
.preheader8.preheader:1016  %tmp293 = add i32 %call_ret11_6, %tmp292

ST_96: temp_3_7 [1/1] 1.97ns
.preheader8.preheader:1017  %temp_3_7 = add i32 %tmp291, %tmp293

ST_96: call_ret45_7 [1/1] 2.47ns
.preheader8.preheader:1018  %call_ret45_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_6, i32 %B_ret34_6, i32 %C_ret35_6, i32 %D_ret36_6, i32 %temp_3_7)

ST_96: call_ret11_7 [1/1] 0.00ns
.preheader8.preheader:1019  %call_ret11_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 0

ST_96: A_ret33_7 [1/1] 0.00ns
.preheader8.preheader:1020  %A_ret33_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 1

ST_96: B_ret34_7 [1/1] 0.00ns
.preheader8.preheader:1021  %B_ret34_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 2

ST_96: C_ret35_7 [1/1] 0.00ns
.preheader8.preheader:1022  %C_ret35_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 3

ST_96: D_ret36_7 [1/1] 0.00ns
.preheader8.preheader:1023  %D_ret36_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_7, 4


 <State 97>: 7.03ns
ST_97: tmp_49_8 [1/1] 7.03ns
.preheader8.preheader:1024  %tmp_49_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_7)

ST_97: tmp_50_8 [1/1] 0.00ns (grouped into LUT with out node tmp295)
.preheader8.preheader:1025  %tmp_50_8 = or i32 %D_ret36_7, %C_ret35_7

ST_97: tmp_51_8 [1/1] 0.00ns (grouped into LUT with out node tmp295)
.preheader8.preheader:1026  %tmp_51_8 = and i32 %tmp_50_8, %B_ret34_7

ST_97: tmp_52_8 [1/1] 0.00ns (grouped into LUT with out node tmp295)
.preheader8.preheader:1027  %tmp_52_8 = and i32 %D_ret36_7, %C_ret35_7

ST_97: tmp_53_8 [1/1] 0.00ns (grouped into LUT with out node tmp295)
.preheader8.preheader:1028  %tmp_53_8 = or i32 %tmp_51_8, %tmp_52_8

ST_97: tmp295 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1030  %tmp295 = add i32 %tmp_53_8, %W_48


 <State 98>: 8.40ns
ST_98: tmp67 [1/1] 0.00ns (grouped into LUT with out node tmp_30_32)
.preheader8.preheader:215  %tmp67 = xor i32 %W_41, %W_46

ST_98: tmp68 [1/1] 0.00ns (grouped into LUT with out node tmp_30_32)
.preheader8.preheader:216  %tmp68 = xor i32 %W_35, %W_33

ST_98: tmp_30_32 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:217  %tmp_30_32 = xor i32 %tmp68, %tmp67

ST_98: W_49 [1/1] 7.03ns
.preheader8.preheader:218  %W_49 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_32)

ST_98: tmp294 [1/1] 2.44ns
.preheader8.preheader:1029  %tmp294 = add i32 -1894007588, %tmp_49_8

ST_98: tmp296 [1/1] 1.97ns
.preheader8.preheader:1031  %tmp296 = add i32 %call_ret11_7, %tmp295

ST_98: temp_3_8 [1/1] 1.97ns
.preheader8.preheader:1032  %temp_3_8 = add i32 %tmp294, %tmp296

ST_98: call_ret45_8 [1/1] 2.47ns
.preheader8.preheader:1033  %call_ret45_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_7, i32 %B_ret34_7, i32 %C_ret35_7, i32 %D_ret36_7, i32 %temp_3_8)

ST_98: call_ret11_8 [1/1] 0.00ns
.preheader8.preheader:1034  %call_ret11_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 0

ST_98: A_ret33_8 [1/1] 0.00ns
.preheader8.preheader:1035  %A_ret33_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 1

ST_98: B_ret34_8 [1/1] 0.00ns
.preheader8.preheader:1036  %B_ret34_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 2

ST_98: C_ret35_8 [1/1] 0.00ns
.preheader8.preheader:1037  %C_ret35_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 3

ST_98: D_ret36_8 [1/1] 0.00ns
.preheader8.preheader:1038  %D_ret36_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_8, 4


 <State 99>: 7.03ns
ST_99: tmp_49_9 [1/1] 7.03ns
.preheader8.preheader:1039  %tmp_49_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_8)

ST_99: tmp_50_9 [1/1] 0.00ns (grouped into LUT with out node tmp298)
.preheader8.preheader:1040  %tmp_50_9 = or i32 %D_ret36_8, %C_ret35_8

ST_99: tmp_51_9 [1/1] 0.00ns (grouped into LUT with out node tmp298)
.preheader8.preheader:1041  %tmp_51_9 = and i32 %tmp_50_9, %B_ret34_8

ST_99: tmp_52_9 [1/1] 0.00ns (grouped into LUT with out node tmp298)
.preheader8.preheader:1042  %tmp_52_9 = and i32 %D_ret36_8, %C_ret35_8

ST_99: tmp_53_9 [1/1] 0.00ns (grouped into LUT with out node tmp298)
.preheader8.preheader:1043  %tmp_53_9 = or i32 %tmp_51_9, %tmp_52_9

ST_99: tmp298 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1045  %tmp298 = add i32 %tmp_53_9, %W_49


 <State 100>: 8.40ns
ST_100: tmp69 [1/1] 0.00ns (grouped into LUT with out node tmp_30_33)
.preheader8.preheader:219  %tmp69 = xor i32 %W_42, %W_47

ST_100: tmp70 [1/1] 0.00ns (grouped into LUT with out node tmp_30_33)
.preheader8.preheader:220  %tmp70 = xor i32 %W_36, %W_34

ST_100: tmp_30_33 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:221  %tmp_30_33 = xor i32 %tmp70, %tmp69

ST_100: W_50 [1/1] 7.03ns
.preheader8.preheader:222  %W_50 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_33)

ST_100: tmp297 [1/1] 2.44ns
.preheader8.preheader:1044  %tmp297 = add i32 -1894007588, %tmp_49_9

ST_100: tmp299 [1/1] 1.97ns
.preheader8.preheader:1046  %tmp299 = add i32 %call_ret11_8, %tmp298

ST_100: temp_3_9 [1/1] 1.97ns
.preheader8.preheader:1047  %temp_3_9 = add i32 %tmp297, %tmp299

ST_100: call_ret45_9 [1/1] 2.47ns
.preheader8.preheader:1048  %call_ret45_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_8, i32 %B_ret34_8, i32 %C_ret35_8, i32 %D_ret36_8, i32 %temp_3_9)

ST_100: call_ret11_9 [1/1] 0.00ns
.preheader8.preheader:1049  %call_ret11_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 0

ST_100: A_ret33_9 [1/1] 0.00ns
.preheader8.preheader:1050  %A_ret33_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 1

ST_100: B_ret34_9 [1/1] 0.00ns
.preheader8.preheader:1051  %B_ret34_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 2

ST_100: C_ret35_9 [1/1] 0.00ns
.preheader8.preheader:1052  %C_ret35_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 3

ST_100: D_ret36_9 [1/1] 0.00ns
.preheader8.preheader:1053  %D_ret36_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_9, 4


 <State 101>: 7.03ns
ST_101: tmp_49_s [1/1] 7.03ns
.preheader8.preheader:1054  %tmp_49_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_9)

ST_101: tmp_50_s [1/1] 0.00ns (grouped into LUT with out node tmp301)
.preheader8.preheader:1055  %tmp_50_s = or i32 %D_ret36_9, %C_ret35_9

ST_101: tmp_51_s [1/1] 0.00ns (grouped into LUT with out node tmp301)
.preheader8.preheader:1056  %tmp_51_s = and i32 %tmp_50_s, %B_ret34_9

ST_101: tmp_52_s [1/1] 0.00ns (grouped into LUT with out node tmp301)
.preheader8.preheader:1057  %tmp_52_s = and i32 %D_ret36_9, %C_ret35_9

ST_101: tmp_53_s [1/1] 0.00ns (grouped into LUT with out node tmp301)
.preheader8.preheader:1058  %tmp_53_s = or i32 %tmp_51_s, %tmp_52_s

ST_101: tmp301 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1060  %tmp301 = add i32 %tmp_53_s, %W_50


 <State 102>: 8.40ns
ST_102: tmp71 [1/1] 0.00ns (grouped into LUT with out node tmp_30_34)
.preheader8.preheader:223  %tmp71 = xor i32 %W_43, %W_48

ST_102: tmp72 [1/1] 0.00ns (grouped into LUT with out node tmp_30_34)
.preheader8.preheader:224  %tmp72 = xor i32 %W_37, %W_35

ST_102: tmp_30_34 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:225  %tmp_30_34 = xor i32 %tmp72, %tmp71

ST_102: W_51 [1/1] 7.03ns
.preheader8.preheader:226  %W_51 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_34)

ST_102: tmp300 [1/1] 2.44ns
.preheader8.preheader:1059  %tmp300 = add i32 -1894007588, %tmp_49_s

ST_102: tmp302 [1/1] 1.97ns
.preheader8.preheader:1061  %tmp302 = add i32 %call_ret11_9, %tmp301

ST_102: temp_3_s [1/1] 1.97ns
.preheader8.preheader:1062  %temp_3_s = add i32 %tmp300, %tmp302

ST_102: call_ret45_s [1/1] 2.47ns
.preheader8.preheader:1063  %call_ret45_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_9, i32 %B_ret34_9, i32 %C_ret35_9, i32 %D_ret36_9, i32 %temp_3_s)

ST_102: call_ret11_s [1/1] 0.00ns
.preheader8.preheader:1064  %call_ret11_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 0

ST_102: A_ret33_s [1/1] 0.00ns
.preheader8.preheader:1065  %A_ret33_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 1

ST_102: B_ret34_s [1/1] 0.00ns
.preheader8.preheader:1066  %B_ret34_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 2

ST_102: C_ret35_s [1/1] 0.00ns
.preheader8.preheader:1067  %C_ret35_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 3

ST_102: D_ret36_s [1/1] 0.00ns
.preheader8.preheader:1068  %D_ret36_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_s, 4


 <State 103>: 7.03ns
ST_103: tmp_49_10 [1/1] 7.03ns
.preheader8.preheader:1069  %tmp_49_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_s)

ST_103: tmp_50_10 [1/1] 0.00ns (grouped into LUT with out node tmp304)
.preheader8.preheader:1070  %tmp_50_10 = or i32 %D_ret36_s, %C_ret35_s

ST_103: tmp_51_10 [1/1] 0.00ns (grouped into LUT with out node tmp304)
.preheader8.preheader:1071  %tmp_51_10 = and i32 %tmp_50_10, %B_ret34_s

ST_103: tmp_52_10 [1/1] 0.00ns (grouped into LUT with out node tmp304)
.preheader8.preheader:1072  %tmp_52_10 = and i32 %D_ret36_s, %C_ret35_s

ST_103: tmp_53_10 [1/1] 0.00ns (grouped into LUT with out node tmp304)
.preheader8.preheader:1073  %tmp_53_10 = or i32 %tmp_51_10, %tmp_52_10

ST_103: tmp304 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1075  %tmp304 = add i32 %tmp_53_10, %W_51


 <State 104>: 8.40ns
ST_104: tmp73 [1/1] 0.00ns (grouped into LUT with out node tmp_30_35)
.preheader8.preheader:227  %tmp73 = xor i32 %W_44, %W_49

ST_104: tmp74 [1/1] 0.00ns (grouped into LUT with out node tmp_30_35)
.preheader8.preheader:228  %tmp74 = xor i32 %W_38, %W_36

ST_104: tmp_30_35 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:229  %tmp_30_35 = xor i32 %tmp74, %tmp73

ST_104: W_52 [1/1] 7.03ns
.preheader8.preheader:230  %W_52 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_35)

ST_104: tmp303 [1/1] 2.44ns
.preheader8.preheader:1074  %tmp303 = add i32 -1894007588, %tmp_49_10

ST_104: tmp305 [1/1] 1.97ns
.preheader8.preheader:1076  %tmp305 = add i32 %call_ret11_s, %tmp304

ST_104: temp_3_10 [1/1] 1.97ns
.preheader8.preheader:1077  %temp_3_10 = add i32 %tmp303, %tmp305

ST_104: call_ret45_10 [1/1] 2.47ns
.preheader8.preheader:1078  %call_ret45_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_s, i32 %B_ret34_s, i32 %C_ret35_s, i32 %D_ret36_s, i32 %temp_3_10)

ST_104: call_ret11_10 [1/1] 0.00ns
.preheader8.preheader:1079  %call_ret11_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 0

ST_104: A_ret33_10 [1/1] 0.00ns
.preheader8.preheader:1080  %A_ret33_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 1

ST_104: B_ret34_10 [1/1] 0.00ns
.preheader8.preheader:1081  %B_ret34_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 2

ST_104: C_ret35_10 [1/1] 0.00ns
.preheader8.preheader:1082  %C_ret35_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 3

ST_104: D_ret36_10 [1/1] 0.00ns
.preheader8.preheader:1083  %D_ret36_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_10, 4


 <State 105>: 7.03ns
ST_105: tmp_49_11 [1/1] 7.03ns
.preheader8.preheader:1084  %tmp_49_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_10)

ST_105: tmp_50_11 [1/1] 0.00ns (grouped into LUT with out node tmp307)
.preheader8.preheader:1085  %tmp_50_11 = or i32 %D_ret36_10, %C_ret35_10

ST_105: tmp_51_11 [1/1] 0.00ns (grouped into LUT with out node tmp307)
.preheader8.preheader:1086  %tmp_51_11 = and i32 %tmp_50_11, %B_ret34_10

ST_105: tmp_52_11 [1/1] 0.00ns (grouped into LUT with out node tmp307)
.preheader8.preheader:1087  %tmp_52_11 = and i32 %D_ret36_10, %C_ret35_10

ST_105: tmp_53_11 [1/1] 0.00ns (grouped into LUT with out node tmp307)
.preheader8.preheader:1088  %tmp_53_11 = or i32 %tmp_51_11, %tmp_52_11

ST_105: tmp307 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1090  %tmp307 = add i32 %tmp_53_11, %W_52


 <State 106>: 8.40ns
ST_106: tmp75 [1/1] 0.00ns (grouped into LUT with out node tmp_30_36)
.preheader8.preheader:231  %tmp75 = xor i32 %W_45, %W_50

ST_106: tmp76 [1/1] 0.00ns (grouped into LUT with out node tmp_30_36)
.preheader8.preheader:232  %tmp76 = xor i32 %W_39, %W_37

ST_106: tmp_30_36 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:233  %tmp_30_36 = xor i32 %tmp76, %tmp75

ST_106: W_53 [1/1] 7.03ns
.preheader8.preheader:234  %W_53 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_36)

ST_106: tmp306 [1/1] 2.44ns
.preheader8.preheader:1089  %tmp306 = add i32 -1894007588, %tmp_49_11

ST_106: tmp308 [1/1] 1.97ns
.preheader8.preheader:1091  %tmp308 = add i32 %call_ret11_10, %tmp307

ST_106: temp_3_11 [1/1] 1.97ns
.preheader8.preheader:1092  %temp_3_11 = add i32 %tmp306, %tmp308

ST_106: call_ret45_11 [1/1] 2.47ns
.preheader8.preheader:1093  %call_ret45_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_10, i32 %B_ret34_10, i32 %C_ret35_10, i32 %D_ret36_10, i32 %temp_3_11)

ST_106: call_ret11_11 [1/1] 0.00ns
.preheader8.preheader:1094  %call_ret11_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 0

ST_106: A_ret33_11 [1/1] 0.00ns
.preheader8.preheader:1095  %A_ret33_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 1

ST_106: B_ret34_11 [1/1] 0.00ns
.preheader8.preheader:1096  %B_ret34_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 2

ST_106: C_ret35_11 [1/1] 0.00ns
.preheader8.preheader:1097  %C_ret35_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 3

ST_106: D_ret36_11 [1/1] 0.00ns
.preheader8.preheader:1098  %D_ret36_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_11, 4


 <State 107>: 7.03ns
ST_107: tmp_49_12 [1/1] 7.03ns
.preheader8.preheader:1099  %tmp_49_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_11)

ST_107: tmp_50_12 [1/1] 0.00ns (grouped into LUT with out node tmp310)
.preheader8.preheader:1100  %tmp_50_12 = or i32 %D_ret36_11, %C_ret35_11

ST_107: tmp_51_12 [1/1] 0.00ns (grouped into LUT with out node tmp310)
.preheader8.preheader:1101  %tmp_51_12 = and i32 %tmp_50_12, %B_ret34_11

ST_107: tmp_52_12 [1/1] 0.00ns (grouped into LUT with out node tmp310)
.preheader8.preheader:1102  %tmp_52_12 = and i32 %D_ret36_11, %C_ret35_11

ST_107: tmp_53_12 [1/1] 0.00ns (grouped into LUT with out node tmp310)
.preheader8.preheader:1103  %tmp_53_12 = or i32 %tmp_51_12, %tmp_52_12

ST_107: tmp310 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1105  %tmp310 = add i32 %tmp_53_12, %W_53


 <State 108>: 8.40ns
ST_108: tmp77 [1/1] 0.00ns (grouped into LUT with out node tmp_30_37)
.preheader8.preheader:235  %tmp77 = xor i32 %W_46, %W_51

ST_108: tmp78 [1/1] 0.00ns (grouped into LUT with out node tmp_30_37)
.preheader8.preheader:236  %tmp78 = xor i32 %W_40, %W_38

ST_108: tmp_30_37 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:237  %tmp_30_37 = xor i32 %tmp78, %tmp77

ST_108: W_54 [1/1] 7.03ns
.preheader8.preheader:238  %W_54 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_37)

ST_108: tmp309 [1/1] 2.44ns
.preheader8.preheader:1104  %tmp309 = add i32 -1894007588, %tmp_49_12

ST_108: tmp311 [1/1] 1.97ns
.preheader8.preheader:1106  %tmp311 = add i32 %call_ret11_11, %tmp310

ST_108: temp_3_12 [1/1] 1.97ns
.preheader8.preheader:1107  %temp_3_12 = add i32 %tmp309, %tmp311

ST_108: call_ret45_12 [1/1] 2.47ns
.preheader8.preheader:1108  %call_ret45_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_11, i32 %B_ret34_11, i32 %C_ret35_11, i32 %D_ret36_11, i32 %temp_3_12)

ST_108: call_ret11_12 [1/1] 0.00ns
.preheader8.preheader:1109  %call_ret11_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 0

ST_108: A_ret33_12 [1/1] 0.00ns
.preheader8.preheader:1110  %A_ret33_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 1

ST_108: B_ret34_12 [1/1] 0.00ns
.preheader8.preheader:1111  %B_ret34_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 2

ST_108: C_ret35_12 [1/1] 0.00ns
.preheader8.preheader:1112  %C_ret35_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 3

ST_108: D_ret36_12 [1/1] 0.00ns
.preheader8.preheader:1113  %D_ret36_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_12, 4


 <State 109>: 7.03ns
ST_109: tmp_49_13 [1/1] 7.03ns
.preheader8.preheader:1114  %tmp_49_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_12)

ST_109: tmp_50_13 [1/1] 0.00ns (grouped into LUT with out node tmp313)
.preheader8.preheader:1115  %tmp_50_13 = or i32 %D_ret36_12, %C_ret35_12

ST_109: tmp_51_13 [1/1] 0.00ns (grouped into LUT with out node tmp313)
.preheader8.preheader:1116  %tmp_51_13 = and i32 %tmp_50_13, %B_ret34_12

ST_109: tmp_52_13 [1/1] 0.00ns (grouped into LUT with out node tmp313)
.preheader8.preheader:1117  %tmp_52_13 = and i32 %D_ret36_12, %C_ret35_12

ST_109: tmp_53_13 [1/1] 0.00ns (grouped into LUT with out node tmp313)
.preheader8.preheader:1118  %tmp_53_13 = or i32 %tmp_51_13, %tmp_52_13

ST_109: tmp313 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1120  %tmp313 = add i32 %tmp_53_13, %W_54


 <State 110>: 8.40ns
ST_110: tmp79 [1/1] 0.00ns (grouped into LUT with out node tmp_30_38)
.preheader8.preheader:239  %tmp79 = xor i32 %W_47, %W_52

ST_110: tmp80 [1/1] 0.00ns (grouped into LUT with out node tmp_30_38)
.preheader8.preheader:240  %tmp80 = xor i32 %W_41, %W_39

ST_110: tmp_30_38 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:241  %tmp_30_38 = xor i32 %tmp80, %tmp79

ST_110: W_55 [1/1] 7.03ns
.preheader8.preheader:242  %W_55 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_38)

ST_110: tmp312 [1/1] 2.44ns
.preheader8.preheader:1119  %tmp312 = add i32 -1894007588, %tmp_49_13

ST_110: tmp314 [1/1] 1.97ns
.preheader8.preheader:1121  %tmp314 = add i32 %call_ret11_12, %tmp313

ST_110: temp_3_13 [1/1] 1.97ns
.preheader8.preheader:1122  %temp_3_13 = add i32 %tmp312, %tmp314

ST_110: call_ret45_13 [1/1] 2.47ns
.preheader8.preheader:1123  %call_ret45_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_12, i32 %B_ret34_12, i32 %C_ret35_12, i32 %D_ret36_12, i32 %temp_3_13)

ST_110: call_ret11_13 [1/1] 0.00ns
.preheader8.preheader:1124  %call_ret11_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 0

ST_110: A_ret33_13 [1/1] 0.00ns
.preheader8.preheader:1125  %A_ret33_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 1

ST_110: B_ret34_13 [1/1] 0.00ns
.preheader8.preheader:1126  %B_ret34_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 2

ST_110: C_ret35_13 [1/1] 0.00ns
.preheader8.preheader:1127  %C_ret35_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 3

ST_110: D_ret36_13 [1/1] 0.00ns
.preheader8.preheader:1128  %D_ret36_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_13, 4


 <State 111>: 7.03ns
ST_111: tmp_49_14 [1/1] 7.03ns
.preheader8.preheader:1129  %tmp_49_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_13)

ST_111: tmp_50_14 [1/1] 0.00ns (grouped into LUT with out node tmp316)
.preheader8.preheader:1130  %tmp_50_14 = or i32 %D_ret36_13, %C_ret35_13

ST_111: tmp_51_14 [1/1] 0.00ns (grouped into LUT with out node tmp316)
.preheader8.preheader:1131  %tmp_51_14 = and i32 %tmp_50_14, %B_ret34_13

ST_111: tmp_52_14 [1/1] 0.00ns (grouped into LUT with out node tmp316)
.preheader8.preheader:1132  %tmp_52_14 = and i32 %D_ret36_13, %C_ret35_13

ST_111: tmp_53_14 [1/1] 0.00ns (grouped into LUT with out node tmp316)
.preheader8.preheader:1133  %tmp_53_14 = or i32 %tmp_51_14, %tmp_52_14

ST_111: tmp316 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1135  %tmp316 = add i32 %tmp_53_14, %W_55


 <State 112>: 8.40ns
ST_112: tmp81 [1/1] 0.00ns (grouped into LUT with out node tmp_30_39)
.preheader8.preheader:243  %tmp81 = xor i32 %W_48, %W_53

ST_112: tmp82 [1/1] 0.00ns (grouped into LUT with out node tmp_30_39)
.preheader8.preheader:244  %tmp82 = xor i32 %W_42, %W_40

ST_112: tmp_30_39 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:245  %tmp_30_39 = xor i32 %tmp82, %tmp81

ST_112: W_56 [1/1] 7.03ns
.preheader8.preheader:246  %W_56 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_39)

ST_112: tmp315 [1/1] 2.44ns
.preheader8.preheader:1134  %tmp315 = add i32 -1894007588, %tmp_49_14

ST_112: tmp317 [1/1] 1.97ns
.preheader8.preheader:1136  %tmp317 = add i32 %call_ret11_13, %tmp316

ST_112: temp_3_14 [1/1] 1.97ns
.preheader8.preheader:1137  %temp_3_14 = add i32 %tmp315, %tmp317

ST_112: call_ret45_14 [1/1] 2.47ns
.preheader8.preheader:1138  %call_ret45_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_13, i32 %B_ret34_13, i32 %C_ret35_13, i32 %D_ret36_13, i32 %temp_3_14)

ST_112: call_ret11_14 [1/1] 0.00ns
.preheader8.preheader:1139  %call_ret11_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 0

ST_112: A_ret33_14 [1/1] 0.00ns
.preheader8.preheader:1140  %A_ret33_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 1

ST_112: B_ret34_14 [1/1] 0.00ns
.preheader8.preheader:1141  %B_ret34_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 2

ST_112: C_ret35_14 [1/1] 0.00ns
.preheader8.preheader:1142  %C_ret35_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 3

ST_112: D_ret36_14 [1/1] 0.00ns
.preheader8.preheader:1143  %D_ret36_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_14, 4


 <State 113>: 7.03ns
ST_113: tmp_49_15 [1/1] 7.03ns
.preheader8.preheader:1144  %tmp_49_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_14)

ST_113: tmp_50_15 [1/1] 0.00ns (grouped into LUT with out node tmp319)
.preheader8.preheader:1145  %tmp_50_15 = or i32 %D_ret36_14, %C_ret35_14

ST_113: tmp_51_15 [1/1] 0.00ns (grouped into LUT with out node tmp319)
.preheader8.preheader:1146  %tmp_51_15 = and i32 %tmp_50_15, %B_ret34_14

ST_113: tmp_52_15 [1/1] 0.00ns (grouped into LUT with out node tmp319)
.preheader8.preheader:1147  %tmp_52_15 = and i32 %D_ret36_14, %C_ret35_14

ST_113: tmp_53_15 [1/1] 0.00ns (grouped into LUT with out node tmp319)
.preheader8.preheader:1148  %tmp_53_15 = or i32 %tmp_51_15, %tmp_52_15

ST_113: tmp319 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1150  %tmp319 = add i32 %tmp_53_15, %W_56


 <State 114>: 8.40ns
ST_114: tmp83 [1/1] 0.00ns (grouped into LUT with out node tmp_30_40)
.preheader8.preheader:247  %tmp83 = xor i32 %W_49, %W_54

ST_114: tmp84 [1/1] 0.00ns (grouped into LUT with out node tmp_30_40)
.preheader8.preheader:248  %tmp84 = xor i32 %W_43, %W_41

ST_114: tmp_30_40 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:249  %tmp_30_40 = xor i32 %tmp84, %tmp83

ST_114: W_57 [1/1] 7.03ns
.preheader8.preheader:250  %W_57 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_40)

ST_114: tmp318 [1/1] 2.44ns
.preheader8.preheader:1149  %tmp318 = add i32 -1894007588, %tmp_49_15

ST_114: tmp320 [1/1] 1.97ns
.preheader8.preheader:1151  %tmp320 = add i32 %call_ret11_14, %tmp319

ST_114: temp_3_15 [1/1] 1.97ns
.preheader8.preheader:1152  %temp_3_15 = add i32 %tmp318, %tmp320

ST_114: call_ret45_15 [1/1] 2.47ns
.preheader8.preheader:1153  %call_ret45_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_14, i32 %B_ret34_14, i32 %C_ret35_14, i32 %D_ret36_14, i32 %temp_3_15)

ST_114: call_ret11_15 [1/1] 0.00ns
.preheader8.preheader:1154  %call_ret11_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 0

ST_114: A_ret33_15 [1/1] 0.00ns
.preheader8.preheader:1155  %A_ret33_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 1

ST_114: B_ret34_15 [1/1] 0.00ns
.preheader8.preheader:1156  %B_ret34_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 2

ST_114: C_ret35_15 [1/1] 0.00ns
.preheader8.preheader:1157  %C_ret35_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 3

ST_114: D_ret36_15 [1/1] 0.00ns
.preheader8.preheader:1158  %D_ret36_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_15, 4


 <State 115>: 7.03ns
ST_115: tmp_49_16 [1/1] 7.03ns
.preheader8.preheader:1159  %tmp_49_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_15)

ST_115: tmp_50_16 [1/1] 0.00ns (grouped into LUT with out node tmp322)
.preheader8.preheader:1160  %tmp_50_16 = or i32 %D_ret36_15, %C_ret35_15

ST_115: tmp_51_16 [1/1] 0.00ns (grouped into LUT with out node tmp322)
.preheader8.preheader:1161  %tmp_51_16 = and i32 %tmp_50_16, %B_ret34_15

ST_115: tmp_52_16 [1/1] 0.00ns (grouped into LUT with out node tmp322)
.preheader8.preheader:1162  %tmp_52_16 = and i32 %D_ret36_15, %C_ret35_15

ST_115: tmp_53_16 [1/1] 0.00ns (grouped into LUT with out node tmp322)
.preheader8.preheader:1163  %tmp_53_16 = or i32 %tmp_51_16, %tmp_52_16

ST_115: tmp322 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1165  %tmp322 = add i32 %tmp_53_16, %W_57


 <State 116>: 8.40ns
ST_116: tmp85 [1/1] 0.00ns (grouped into LUT with out node tmp_30_41)
.preheader8.preheader:251  %tmp85 = xor i32 %W_50, %W_55

ST_116: tmp86 [1/1] 0.00ns (grouped into LUT with out node tmp_30_41)
.preheader8.preheader:252  %tmp86 = xor i32 %W_44, %W_42

ST_116: tmp_30_41 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:253  %tmp_30_41 = xor i32 %tmp86, %tmp85

ST_116: W_58 [1/1] 7.03ns
.preheader8.preheader:254  %W_58 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_41)

ST_116: tmp321 [1/1] 2.44ns
.preheader8.preheader:1164  %tmp321 = add i32 -1894007588, %tmp_49_16

ST_116: tmp323 [1/1] 1.97ns
.preheader8.preheader:1166  %tmp323 = add i32 %call_ret11_15, %tmp322

ST_116: temp_3_16 [1/1] 1.97ns
.preheader8.preheader:1167  %temp_3_16 = add i32 %tmp321, %tmp323

ST_116: call_ret45_16 [1/1] 2.47ns
.preheader8.preheader:1168  %call_ret45_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_15, i32 %B_ret34_15, i32 %C_ret35_15, i32 %D_ret36_15, i32 %temp_3_16)

ST_116: call_ret11_16 [1/1] 0.00ns
.preheader8.preheader:1169  %call_ret11_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 0

ST_116: A_ret33_16 [1/1] 0.00ns
.preheader8.preheader:1170  %A_ret33_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 1

ST_116: B_ret34_16 [1/1] 0.00ns
.preheader8.preheader:1171  %B_ret34_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 2

ST_116: C_ret35_16 [1/1] 0.00ns
.preheader8.preheader:1172  %C_ret35_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 3

ST_116: D_ret36_16 [1/1] 0.00ns
.preheader8.preheader:1173  %D_ret36_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_16, 4


 <State 117>: 7.03ns
ST_117: tmp_49_17 [1/1] 7.03ns
.preheader8.preheader:1174  %tmp_49_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_16)

ST_117: tmp_50_17 [1/1] 0.00ns (grouped into LUT with out node tmp325)
.preheader8.preheader:1175  %tmp_50_17 = or i32 %D_ret36_16, %C_ret35_16

ST_117: tmp_51_17 [1/1] 0.00ns (grouped into LUT with out node tmp325)
.preheader8.preheader:1176  %tmp_51_17 = and i32 %tmp_50_17, %B_ret34_16

ST_117: tmp_52_17 [1/1] 0.00ns (grouped into LUT with out node tmp325)
.preheader8.preheader:1177  %tmp_52_17 = and i32 %D_ret36_16, %C_ret35_16

ST_117: tmp_53_17 [1/1] 0.00ns (grouped into LUT with out node tmp325)
.preheader8.preheader:1178  %tmp_53_17 = or i32 %tmp_51_17, %tmp_52_17

ST_117: tmp325 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1180  %tmp325 = add i32 %tmp_53_17, %W_58


 <State 118>: 8.40ns
ST_118: tmp87 [1/1] 0.00ns (grouped into LUT with out node tmp_30_42)
.preheader8.preheader:255  %tmp87 = xor i32 %W_51, %W_56

ST_118: tmp88 [1/1] 0.00ns (grouped into LUT with out node tmp_30_42)
.preheader8.preheader:256  %tmp88 = xor i32 %W_45, %W_43

ST_118: tmp_30_42 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:257  %tmp_30_42 = xor i32 %tmp88, %tmp87

ST_118: W_59 [1/1] 7.03ns
.preheader8.preheader:258  %W_59 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_42)

ST_118: tmp324 [1/1] 2.44ns
.preheader8.preheader:1179  %tmp324 = add i32 -1894007588, %tmp_49_17

ST_118: tmp326 [1/1] 1.97ns
.preheader8.preheader:1181  %tmp326 = add i32 %call_ret11_16, %tmp325

ST_118: temp_3_17 [1/1] 1.97ns
.preheader8.preheader:1182  %temp_3_17 = add i32 %tmp324, %tmp326

ST_118: call_ret45_17 [1/1] 2.47ns
.preheader8.preheader:1183  %call_ret45_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_16, i32 %B_ret34_16, i32 %C_ret35_16, i32 %D_ret36_16, i32 %temp_3_17)

ST_118: call_ret11_17 [1/1] 0.00ns
.preheader8.preheader:1184  %call_ret11_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 0

ST_118: A_ret33_17 [1/1] 0.00ns
.preheader8.preheader:1185  %A_ret33_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 1

ST_118: B_ret34_17 [1/1] 0.00ns
.preheader8.preheader:1186  %B_ret34_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 2

ST_118: C_ret35_17 [1/1] 0.00ns
.preheader8.preheader:1187  %C_ret35_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 3

ST_118: D_ret36_17 [1/1] 0.00ns
.preheader8.preheader:1188  %D_ret36_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_17, 4


 <State 119>: 7.03ns
ST_119: tmp_49_18 [1/1] 7.03ns
.preheader8.preheader:1189  %tmp_49_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_17)

ST_119: tmp_50_18 [1/1] 0.00ns (grouped into LUT with out node tmp328)
.preheader8.preheader:1190  %tmp_50_18 = or i32 %D_ret36_17, %C_ret35_17

ST_119: tmp_51_18 [1/1] 0.00ns (grouped into LUT with out node tmp328)
.preheader8.preheader:1191  %tmp_51_18 = and i32 %tmp_50_18, %B_ret34_17

ST_119: tmp_52_18 [1/1] 0.00ns (grouped into LUT with out node tmp328)
.preheader8.preheader:1192  %tmp_52_18 = and i32 %D_ret36_17, %C_ret35_17

ST_119: tmp_53_18 [1/1] 0.00ns (grouped into LUT with out node tmp328)
.preheader8.preheader:1193  %tmp_53_18 = or i32 %tmp_51_18, %tmp_52_18

ST_119: tmp328 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1195  %tmp328 = add i32 %tmp_53_18, %W_59


 <State 120>: 8.40ns
ST_120: tmp89 [1/1] 0.00ns (grouped into LUT with out node tmp_30_43)
.preheader8.preheader:259  %tmp89 = xor i32 %W_52, %W_57

ST_120: tmp90 [1/1] 0.00ns (grouped into LUT with out node tmp_30_43)
.preheader8.preheader:260  %tmp90 = xor i32 %W_46, %W_44

ST_120: tmp_30_43 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:261  %tmp_30_43 = xor i32 %tmp90, %tmp89

ST_120: W_60 [1/1] 7.03ns
.preheader8.preheader:262  %W_60 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_43)

ST_120: tmp327 [1/1] 2.44ns
.preheader8.preheader:1194  %tmp327 = add i32 -1894007588, %tmp_49_18

ST_120: tmp329 [1/1] 1.97ns
.preheader8.preheader:1196  %tmp329 = add i32 %call_ret11_17, %tmp328

ST_120: temp_3_18 [1/1] 1.97ns
.preheader8.preheader:1197  %temp_3_18 = add i32 %tmp327, %tmp329

ST_120: call_ret45_18 [1/1] 2.47ns
.preheader8.preheader:1198  %call_ret45_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_17, i32 %B_ret34_17, i32 %C_ret35_17, i32 %D_ret36_17, i32 %temp_3_18)

ST_120: call_ret11_18 [1/1] 0.00ns
.preheader8.preheader:1199  %call_ret11_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 0

ST_120: A_ret33_18 [1/1] 0.00ns
.preheader8.preheader:1200  %A_ret33_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 1

ST_120: B_ret34_18 [1/1] 0.00ns
.preheader8.preheader:1201  %B_ret34_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 2

ST_120: C_ret35_18 [1/1] 0.00ns
.preheader8.preheader:1202  %C_ret35_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 3

ST_120: D_ret36_18 [1/1] 0.00ns
.preheader8.preheader:1203  %D_ret36_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret45_18, 4


 <State 121>: 7.03ns
ST_121: tmp_81 [1/1] 7.03ns
.preheader8.preheader:1204  %tmp_81 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret33_18)

ST_121: tmp332 [1/1] 2.44ns
.preheader8.preheader:1208  %tmp332 = add i32 -899497514, %W_60


 <State 122>: 8.40ns
ST_122: tmp91 [1/1] 0.00ns (grouped into LUT with out node tmp_30_44)
.preheader8.preheader:263  %tmp91 = xor i32 %W_53, %W_58

ST_122: tmp92 [1/1] 0.00ns (grouped into LUT with out node tmp_30_44)
.preheader8.preheader:264  %tmp92 = xor i32 %W_47, %W_45

ST_122: tmp_30_44 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:265  %tmp_30_44 = xor i32 %tmp92, %tmp91

ST_122: W_61 [1/1] 7.03ns
.preheader8.preheader:266  %W_61 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_44)

ST_122: tmp330 [1/1] 0.00ns (grouped into LUT with out node tmp331)
.preheader8.preheader:1205  %tmp330 = xor i32 %B_ret34_18, %D_ret36_18

ST_122: tmp_82 [1/1] 0.00ns (grouped into LUT with out node tmp331)
.preheader8.preheader:1206  %tmp_82 = xor i32 %tmp330, %C_ret35_18

ST_122: tmp331 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1207  %tmp331 = add i32 %tmp_82, %tmp_81

ST_122: tmp333 [1/1] 1.97ns
.preheader8.preheader:1209  %tmp333 = add i32 %call_ret11_18, %tmp332

ST_122: temp_4 [1/1] 1.97ns
.preheader8.preheader:1210  %temp_4 = add i32 %tmp331, %tmp333

ST_122: call_ret7 [1/1] 2.47ns
.preheader8.preheader:1211  %call_ret7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret33_18, i32 %B_ret34_18, i32 %C_ret35_18, i32 %D_ret36_18, i32 %temp_4)

ST_122: call_ret [1/1] 0.00ns
.preheader8.preheader:1212  %call_ret = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 0

ST_122: A_ret3 [1/1] 0.00ns
.preheader8.preheader:1213  %A_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 1

ST_122: B_ret3 [1/1] 0.00ns
.preheader8.preheader:1214  %B_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 2

ST_122: C_ret3 [1/1] 0.00ns
.preheader8.preheader:1215  %C_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 3

ST_122: D_ret3 [1/1] 0.00ns
.preheader8.preheader:1216  %D_ret3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 4


 <State 123>: 7.03ns
ST_123: tmp_63_1 [1/1] 7.03ns
.preheader8.preheader:1217  %tmp_63_1 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret3)

ST_123: tmp336 [1/1] 2.44ns
.preheader8.preheader:1221  %tmp336 = add i32 -899497514, %W_61


 <State 124>: 8.40ns
ST_124: tmp93 [1/1] 0.00ns (grouped into LUT with out node tmp_30_45)
.preheader8.preheader:267  %tmp93 = xor i32 %W_54, %W_59

ST_124: tmp94 [1/1] 0.00ns (grouped into LUT with out node tmp_30_45)
.preheader8.preheader:268  %tmp94 = xor i32 %W_48, %W_46

ST_124: tmp_30_45 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:269  %tmp_30_45 = xor i32 %tmp94, %tmp93

ST_124: W_62 [1/1] 7.03ns
.preheader8.preheader:270  %W_62 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_45)

ST_124: tmp95 [1/1] 0.00ns (grouped into LUT with out node tmp_30_46)
.preheader8.preheader:271  %tmp95 = xor i32 %W_55, %W_60

ST_124: tmp96 [1/1] 0.00ns (grouped into LUT with out node tmp_30_46)
.preheader8.preheader:272  %tmp96 = xor i32 %W_49, %W_47

ST_124: tmp_30_46 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:273  %tmp_30_46 = xor i32 %tmp96, %tmp95

ST_124: tmp334 [1/1] 0.00ns (grouped into LUT with out node tmp335)
.preheader8.preheader:1218  %tmp334 = xor i32 %B_ret3, %D_ret3

ST_124: tmp_65_1 [1/1] 0.00ns (grouped into LUT with out node tmp335)
.preheader8.preheader:1219  %tmp_65_1 = xor i32 %tmp334, %C_ret3

ST_124: tmp335 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1220  %tmp335 = add i32 %tmp_65_1, %tmp_63_1

ST_124: tmp337 [1/1] 1.97ns
.preheader8.preheader:1222  %tmp337 = add i32 %call_ret, %tmp336

ST_124: temp_4_1 [1/1] 1.97ns
.preheader8.preheader:1223  %temp_4_1 = add i32 %tmp335, %tmp337

ST_124: call_ret44_1 [1/1] 2.47ns
.preheader8.preheader:1224  %call_ret44_1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret3, i32 %B_ret3, i32 %C_ret3, i32 %D_ret3, i32 %temp_4_1)

ST_124: call_ret_1 [1/1] 0.00ns
.preheader8.preheader:1225  %call_ret_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 0

ST_124: A_ret39_1 [1/1] 0.00ns
.preheader8.preheader:1226  %A_ret39_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 1

ST_124: B_ret40_1 [1/1] 0.00ns
.preheader8.preheader:1227  %B_ret40_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 2

ST_124: C_ret41_1 [1/1] 0.00ns
.preheader8.preheader:1228  %C_ret41_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 3

ST_124: D_ret42_1 [1/1] 0.00ns
.preheader8.preheader:1229  %D_ret42_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_1, 4


 <State 125>: 8.40ns
ST_125: W_63 [1/1] 7.03ns
.preheader8.preheader:274  %W_63 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_46)

ST_125: tmp97 [1/1] 0.00ns (grouped into LUT with out node tmp_30_47)
.preheader8.preheader:275  %tmp97 = xor i32 %W_56, %W_61

ST_125: tmp98 [1/1] 0.00ns (grouped into LUT with out node tmp_30_47)
.preheader8.preheader:276  %tmp98 = xor i32 %W_50, %W_48

ST_125: tmp_30_47 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:277  %tmp_30_47 = xor i32 %tmp98, %tmp97

ST_125: tmp101 [1/1] 0.00ns (grouped into LUT with out node tmp_30_49)
.preheader8.preheader:283  %tmp101 = xor i32 %W_58, %W_63

ST_125: tmp102 [1/1] 0.00ns (grouped into LUT with out node tmp_30_49)
.preheader8.preheader:284  %tmp102 = xor i32 %W_52, %W_50

ST_125: tmp_30_49 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:285  %tmp_30_49 = xor i32 %tmp102, %tmp101

ST_125: tmp_63_2 [1/1] 7.03ns
.preheader8.preheader:1230  %tmp_63_2 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_1)

ST_125: tmp340 [1/1] 2.44ns
.preheader8.preheader:1234  %tmp340 = add i32 -899497514, %W_62


 <State 126>: 8.40ns
ST_126: W_64 [1/1] 7.03ns
.preheader8.preheader:278  %W_64 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_47)

ST_126: tmp99 [1/1] 0.00ns (grouped into LUT with out node tmp_30_48)
.preheader8.preheader:279  %tmp99 = xor i32 %W_57, %W_62

ST_126: tmp100 [1/1] 0.00ns (grouped into LUT with out node tmp_30_48)
.preheader8.preheader:280  %tmp100 = xor i32 %W_51, %W_49

ST_126: tmp_30_48 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:281  %tmp_30_48 = xor i32 %tmp100, %tmp99

ST_126: W_66 [1/1] 7.03ns
.preheader8.preheader:286  %W_66 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_49)

ST_126: tmp103 [1/1] 0.00ns (grouped into LUT with out node tmp_30_50)
.preheader8.preheader:287  %tmp103 = xor i32 %W_59, %W_64

ST_126: tmp104 [1/1] 0.00ns (grouped into LUT with out node tmp_30_50)
.preheader8.preheader:288  %tmp104 = xor i32 %W_53, %W_51

ST_126: tmp_30_50 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:289  %tmp_30_50 = xor i32 %tmp104, %tmp103

ST_126: tmp107 [1/1] 0.00ns (grouped into LUT with out node tmp_30_52)
.preheader8.preheader:295  %tmp107 = xor i32 %W_61, %W_66

ST_126: tmp108 [1/1] 0.00ns (grouped into LUT with out node tmp_30_52)
.preheader8.preheader:296  %tmp108 = xor i32 %W_55, %W_53

ST_126: tmp_30_52 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:297  %tmp_30_52 = xor i32 %tmp108, %tmp107

ST_126: tmp338 [1/1] 0.00ns (grouped into LUT with out node tmp339)
.preheader8.preheader:1231  %tmp338 = xor i32 %B_ret40_1, %D_ret42_1

ST_126: tmp_65_2 [1/1] 0.00ns (grouped into LUT with out node tmp339)
.preheader8.preheader:1232  %tmp_65_2 = xor i32 %tmp338, %C_ret41_1

ST_126: tmp339 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1233  %tmp339 = add i32 %tmp_65_2, %tmp_63_2

ST_126: tmp341 [1/1] 1.97ns
.preheader8.preheader:1235  %tmp341 = add i32 %call_ret_1, %tmp340

ST_126: temp_4_2 [1/1] 1.97ns
.preheader8.preheader:1236  %temp_4_2 = add i32 %tmp339, %tmp341

ST_126: call_ret44_2 [1/1] 2.47ns
.preheader8.preheader:1237  %call_ret44_2 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_1, i32 %B_ret40_1, i32 %C_ret41_1, i32 %D_ret42_1, i32 %temp_4_2)

ST_126: call_ret_2 [1/1] 0.00ns
.preheader8.preheader:1238  %call_ret_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 0

ST_126: A_ret39_2 [1/1] 0.00ns
.preheader8.preheader:1239  %A_ret39_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 1

ST_126: B_ret40_2 [1/1] 0.00ns
.preheader8.preheader:1240  %B_ret40_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 2

ST_126: C_ret41_2 [1/1] 0.00ns
.preheader8.preheader:1241  %C_ret41_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 3

ST_126: D_ret42_2 [1/1] 0.00ns
.preheader8.preheader:1242  %D_ret42_2 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_2, 4


 <State 127>: 8.40ns
ST_127: W_65 [1/1] 7.03ns
.preheader8.preheader:282  %W_65 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_48)

ST_127: W_67 [1/1] 7.03ns
.preheader8.preheader:290  %W_67 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_50)

ST_127: tmp105 [1/1] 0.00ns (grouped into LUT with out node tmp_30_51)
.preheader8.preheader:291  %tmp105 = xor i32 %W_60, %W_65

ST_127: tmp106 [1/1] 0.00ns (grouped into LUT with out node tmp_30_51)
.preheader8.preheader:292  %tmp106 = xor i32 %W_54, %W_52

ST_127: tmp_30_51 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:293  %tmp_30_51 = xor i32 %tmp106, %tmp105

ST_127: W_69 [1/1] 7.03ns
.preheader8.preheader:298  %W_69 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_52)

ST_127: tmp109 [1/1] 0.00ns (grouped into LUT with out node tmp_30_53)
.preheader8.preheader:299  %tmp109 = xor i32 %W_62, %W_67

ST_127: tmp110 [1/1] 0.00ns (grouped into LUT with out node tmp_30_53)
.preheader8.preheader:300  %tmp110 = xor i32 %W_56, %W_54

ST_127: tmp_30_53 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:301  %tmp_30_53 = xor i32 %tmp110, %tmp109

ST_127: tmp113 [1/1] 0.00ns (grouped into LUT with out node tmp_30_55)
.preheader8.preheader:307  %tmp113 = xor i32 %W_64, %W_69

ST_127: tmp114 [1/1] 0.00ns (grouped into LUT with out node tmp_30_55)
.preheader8.preheader:308  %tmp114 = xor i32 %W_58, %W_56

ST_127: tmp_30_55 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:309  %tmp_30_55 = xor i32 %tmp114, %tmp113

ST_127: tmp_63_3 [1/1] 7.03ns
.preheader8.preheader:1243  %tmp_63_3 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_2)

ST_127: tmp344 [1/1] 2.44ns
.preheader8.preheader:1247  %tmp344 = add i32 -899497514, %W_63


 <State 128>: 8.40ns
ST_128: W_68 [1/1] 7.03ns
.preheader8.preheader:294  %W_68 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_51)

ST_128: W_70 [1/1] 7.03ns
.preheader8.preheader:302  %W_70 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_53)

ST_128: tmp111 [1/1] 0.00ns (grouped into LUT with out node tmp_30_54)
.preheader8.preheader:303  %tmp111 = xor i32 %W_63, %W_68

ST_128: tmp112 [1/1] 0.00ns (grouped into LUT with out node tmp_30_54)
.preheader8.preheader:304  %tmp112 = xor i32 %W_57, %W_55

ST_128: tmp_30_54 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:305  %tmp_30_54 = xor i32 %tmp112, %tmp111

ST_128: W_72 [1/1] 7.03ns
.preheader8.preheader:310  %W_72 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_55)

ST_128: tmp115 [1/1] 0.00ns (grouped into LUT with out node tmp_30_56)
.preheader8.preheader:311  %tmp115 = xor i32 %W_65, %W_70

ST_128: tmp116 [1/1] 0.00ns (grouped into LUT with out node tmp_30_56)
.preheader8.preheader:312  %tmp116 = xor i32 %W_59, %W_57

ST_128: tmp_30_56 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:313  %tmp_30_56 = xor i32 %tmp116, %tmp115

ST_128: tmp119 [1/1] 0.00ns (grouped into LUT with out node tmp_30_58)
.preheader8.preheader:319  %tmp119 = xor i32 %W_67, %W_72

ST_128: tmp120 [1/1] 0.00ns (grouped into LUT with out node tmp_30_58)
.preheader8.preheader:320  %tmp120 = xor i32 %W_61, %W_59

ST_128: tmp_30_58 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:321  %tmp_30_58 = xor i32 %tmp120, %tmp119

ST_128: tmp342 [1/1] 0.00ns (grouped into LUT with out node tmp343)
.preheader8.preheader:1244  %tmp342 = xor i32 %B_ret40_2, %D_ret42_2

ST_128: tmp_65_3 [1/1] 0.00ns (grouped into LUT with out node tmp343)
.preheader8.preheader:1245  %tmp_65_3 = xor i32 %tmp342, %C_ret41_2

ST_128: tmp343 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1246  %tmp343 = add i32 %tmp_65_3, %tmp_63_3

ST_128: tmp345 [1/1] 1.97ns
.preheader8.preheader:1248  %tmp345 = add i32 %call_ret_2, %tmp344

ST_128: temp_4_3 [1/1] 1.97ns
.preheader8.preheader:1249  %temp_4_3 = add i32 %tmp343, %tmp345

ST_128: call_ret44_3 [1/1] 2.47ns
.preheader8.preheader:1250  %call_ret44_3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_2, i32 %B_ret40_2, i32 %C_ret41_2, i32 %D_ret42_2, i32 %temp_4_3)

ST_128: call_ret_3 [1/1] 0.00ns
.preheader8.preheader:1251  %call_ret_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 0

ST_128: A_ret39_3 [1/1] 0.00ns
.preheader8.preheader:1252  %A_ret39_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 1

ST_128: B_ret40_3 [1/1] 0.00ns
.preheader8.preheader:1253  %B_ret40_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 2

ST_128: C_ret41_3 [1/1] 0.00ns
.preheader8.preheader:1254  %C_ret41_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 3

ST_128: D_ret42_3 [1/1] 0.00ns
.preheader8.preheader:1255  %D_ret42_3 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_3, 4


 <State 129>: 8.40ns
ST_129: W_71 [1/1] 7.03ns
.preheader8.preheader:306  %W_71 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_54)

ST_129: W_73 [1/1] 7.03ns
.preheader8.preheader:314  %W_73 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_56)

ST_129: tmp117 [1/1] 0.00ns (grouped into LUT with out node tmp_30_57)
.preheader8.preheader:315  %tmp117 = xor i32 %W_66, %W_71

ST_129: tmp118 [1/1] 0.00ns (grouped into LUT with out node tmp_30_57)
.preheader8.preheader:316  %tmp118 = xor i32 %W_60, %W_58

ST_129: tmp_30_57 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:317  %tmp_30_57 = xor i32 %tmp118, %tmp117

ST_129: W_75 [1/1] 7.03ns
.preheader8.preheader:322  %W_75 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_58)

ST_129: tmp121 [1/1] 0.00ns (grouped into LUT with out node tmp_30_59)
.preheader8.preheader:323  %tmp121 = xor i32 %W_68, %W_73

ST_129: tmp122 [1/1] 0.00ns (grouped into LUT with out node tmp_30_59)
.preheader8.preheader:324  %tmp122 = xor i32 %W_62, %W_60

ST_129: tmp_30_59 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:325  %tmp_30_59 = xor i32 %tmp122, %tmp121

ST_129: tmp125 [1/1] 0.00ns (grouped into LUT with out node tmp_30_61)
.preheader8.preheader:331  %tmp125 = xor i32 %W_70, %W_75

ST_129: tmp126 [1/1] 0.00ns (grouped into LUT with out node tmp_30_61)
.preheader8.preheader:332  %tmp126 = xor i32 %W_64, %W_62

ST_129: tmp_30_61 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:333  %tmp_30_61 = xor i32 %tmp126, %tmp125

ST_129: tmp_63_4 [1/1] 7.03ns
.preheader8.preheader:1256  %tmp_63_4 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_3)

ST_129: tmp348 [1/1] 2.44ns
.preheader8.preheader:1260  %tmp348 = add i32 -899497514, %W_64


 <State 130>: 6.88ns
ST_130: tmp346 [1/1] 0.00ns (grouped into LUT with out node tmp347)
.preheader8.preheader:1257  %tmp346 = xor i32 %B_ret40_3, %D_ret42_3

ST_130: tmp_65_4 [1/1] 0.00ns (grouped into LUT with out node tmp347)
.preheader8.preheader:1258  %tmp_65_4 = xor i32 %tmp346, %C_ret41_3

ST_130: tmp347 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1259  %tmp347 = add i32 %tmp_65_4, %tmp_63_4

ST_130: tmp349 [1/1] 1.97ns
.preheader8.preheader:1261  %tmp349 = add i32 %call_ret_3, %tmp348

ST_130: temp_4_4 [1/1] 1.97ns
.preheader8.preheader:1262  %temp_4_4 = add i32 %tmp347, %tmp349

ST_130: call_ret44_4 [1/1] 2.47ns
.preheader8.preheader:1263  %call_ret44_4 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_3, i32 %B_ret40_3, i32 %C_ret41_3, i32 %D_ret42_3, i32 %temp_4_4)

ST_130: call_ret_4 [1/1] 0.00ns
.preheader8.preheader:1264  %call_ret_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 0

ST_130: A_ret39_4 [1/1] 0.00ns
.preheader8.preheader:1265  %A_ret39_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 1

ST_130: B_ret40_4 [1/1] 0.00ns
.preheader8.preheader:1266  %B_ret40_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 2

ST_130: C_ret41_4 [1/1] 0.00ns
.preheader8.preheader:1267  %C_ret41_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 3

ST_130: D_ret42_4 [1/1] 0.00ns
.preheader8.preheader:1268  %D_ret42_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_4, 4


 <State 131>: 8.40ns
ST_131: W_74 [1/1] 7.03ns
.preheader8.preheader:318  %W_74 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_57)

ST_131: W_76 [1/1] 7.03ns
.preheader8.preheader:326  %W_76 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_59)

ST_131: tmp123 [1/1] 0.00ns (grouped into LUT with out node tmp_30_60)
.preheader8.preheader:327  %tmp123 = xor i32 %W_69, %W_74

ST_131: tmp124 [1/1] 0.00ns (grouped into LUT with out node tmp_30_60)
.preheader8.preheader:328  %tmp124 = xor i32 %W_63, %W_61

ST_131: tmp_30_60 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:329  %tmp_30_60 = xor i32 %tmp124, %tmp123

ST_131: tmp127 [1/1] 0.00ns (grouped into LUT with out node tmp_30_62)
.preheader8.preheader:335  %tmp127 = xor i32 %W_71, %W_76

ST_131: tmp128 [1/1] 0.00ns (grouped into LUT with out node tmp_30_62)
.preheader8.preheader:336  %tmp128 = xor i32 %W_65, %W_63

ST_131: tmp_30_62 [1/1] 1.37ns (out node of the LUT)
.preheader8.preheader:337  %tmp_30_62 = xor i32 %tmp128, %tmp127

ST_131: tmp_63_5 [1/1] 7.03ns
.preheader8.preheader:1269  %tmp_63_5 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_4)

ST_131: tmp352 [1/1] 2.44ns
.preheader8.preheader:1273  %tmp352 = add i32 -899497514, %W_65


 <State 132>: 6.88ns
ST_132: tmp350 [1/1] 0.00ns (grouped into LUT with out node tmp351)
.preheader8.preheader:1270  %tmp350 = xor i32 %B_ret40_4, %D_ret42_4

ST_132: tmp_65_5 [1/1] 0.00ns (grouped into LUT with out node tmp351)
.preheader8.preheader:1271  %tmp_65_5 = xor i32 %tmp350, %C_ret41_4

ST_132: tmp351 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1272  %tmp351 = add i32 %tmp_65_5, %tmp_63_5

ST_132: tmp353 [1/1] 1.97ns
.preheader8.preheader:1274  %tmp353 = add i32 %call_ret_4, %tmp352

ST_132: temp_4_5 [1/1] 1.97ns
.preheader8.preheader:1275  %temp_4_5 = add i32 %tmp351, %tmp353

ST_132: call_ret44_5 [1/1] 2.47ns
.preheader8.preheader:1276  %call_ret44_5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_4, i32 %B_ret40_4, i32 %C_ret41_4, i32 %D_ret42_4, i32 %temp_4_5)

ST_132: call_ret_5 [1/1] 0.00ns
.preheader8.preheader:1277  %call_ret_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 0

ST_132: A_ret39_5 [1/1] 0.00ns
.preheader8.preheader:1278  %A_ret39_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 1

ST_132: B_ret40_5 [1/1] 0.00ns
.preheader8.preheader:1279  %B_ret40_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 2

ST_132: C_ret41_5 [1/1] 0.00ns
.preheader8.preheader:1280  %C_ret41_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 3

ST_132: D_ret42_5 [1/1] 0.00ns
.preheader8.preheader:1281  %D_ret42_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_5, 4


 <State 133>: 7.03ns
ST_133: tmp_63_6 [1/1] 7.03ns
.preheader8.preheader:1282  %tmp_63_6 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_5)

ST_133: tmp356 [1/1] 2.44ns
.preheader8.preheader:1286  %tmp356 = add i32 -899497514, %W_66


 <State 134>: 6.88ns
ST_134: tmp354 [1/1] 0.00ns (grouped into LUT with out node tmp355)
.preheader8.preheader:1283  %tmp354 = xor i32 %B_ret40_5, %D_ret42_5

ST_134: tmp_65_6 [1/1] 0.00ns (grouped into LUT with out node tmp355)
.preheader8.preheader:1284  %tmp_65_6 = xor i32 %tmp354, %C_ret41_5

ST_134: tmp355 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1285  %tmp355 = add i32 %tmp_65_6, %tmp_63_6

ST_134: tmp357 [1/1] 1.97ns
.preheader8.preheader:1287  %tmp357 = add i32 %call_ret_5, %tmp356

ST_134: temp_4_6 [1/1] 1.97ns
.preheader8.preheader:1288  %temp_4_6 = add i32 %tmp355, %tmp357

ST_134: call_ret44_6 [1/1] 2.47ns
.preheader8.preheader:1289  %call_ret44_6 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_5, i32 %B_ret40_5, i32 %C_ret41_5, i32 %D_ret42_5, i32 %temp_4_6)

ST_134: call_ret_6 [1/1] 0.00ns
.preheader8.preheader:1290  %call_ret_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 0

ST_134: A_ret39_6 [1/1] 0.00ns
.preheader8.preheader:1291  %A_ret39_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 1

ST_134: B_ret40_6 [1/1] 0.00ns
.preheader8.preheader:1292  %B_ret40_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 2

ST_134: C_ret41_6 [1/1] 0.00ns
.preheader8.preheader:1293  %C_ret41_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 3

ST_134: D_ret42_6 [1/1] 0.00ns
.preheader8.preheader:1294  %D_ret42_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_6, 4


 <State 135>: 7.03ns
ST_135: tmp_63_7 [1/1] 7.03ns
.preheader8.preheader:1295  %tmp_63_7 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_6)

ST_135: tmp360 [1/1] 2.44ns
.preheader8.preheader:1299  %tmp360 = add i32 -899497514, %W_67


 <State 136>: 6.88ns
ST_136: tmp358 [1/1] 0.00ns (grouped into LUT with out node tmp359)
.preheader8.preheader:1296  %tmp358 = xor i32 %B_ret40_6, %D_ret42_6

ST_136: tmp_65_7 [1/1] 0.00ns (grouped into LUT with out node tmp359)
.preheader8.preheader:1297  %tmp_65_7 = xor i32 %tmp358, %C_ret41_6

ST_136: tmp359 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1298  %tmp359 = add i32 %tmp_65_7, %tmp_63_7

ST_136: tmp361 [1/1] 1.97ns
.preheader8.preheader:1300  %tmp361 = add i32 %call_ret_6, %tmp360

ST_136: temp_4_7 [1/1] 1.97ns
.preheader8.preheader:1301  %temp_4_7 = add i32 %tmp359, %tmp361

ST_136: call_ret44_7 [1/1] 2.47ns
.preheader8.preheader:1302  %call_ret44_7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_6, i32 %B_ret40_6, i32 %C_ret41_6, i32 %D_ret42_6, i32 %temp_4_7)

ST_136: call_ret_7 [1/1] 0.00ns
.preheader8.preheader:1303  %call_ret_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 0

ST_136: A_ret39_7 [1/1] 0.00ns
.preheader8.preheader:1304  %A_ret39_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 1

ST_136: B_ret40_7 [1/1] 0.00ns
.preheader8.preheader:1305  %B_ret40_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 2

ST_136: C_ret41_7 [1/1] 0.00ns
.preheader8.preheader:1306  %C_ret41_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 3

ST_136: D_ret42_7 [1/1] 0.00ns
.preheader8.preheader:1307  %D_ret42_7 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_7, 4


 <State 137>: 7.03ns
ST_137: tmp_63_8 [1/1] 7.03ns
.preheader8.preheader:1308  %tmp_63_8 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_7)

ST_137: tmp364 [1/1] 2.44ns
.preheader8.preheader:1312  %tmp364 = add i32 -899497514, %W_68


 <State 138>: 6.88ns
ST_138: tmp362 [1/1] 0.00ns (grouped into LUT with out node tmp363)
.preheader8.preheader:1309  %tmp362 = xor i32 %B_ret40_7, %D_ret42_7

ST_138: tmp_65_8 [1/1] 0.00ns (grouped into LUT with out node tmp363)
.preheader8.preheader:1310  %tmp_65_8 = xor i32 %tmp362, %C_ret41_7

ST_138: tmp363 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1311  %tmp363 = add i32 %tmp_65_8, %tmp_63_8

ST_138: tmp365 [1/1] 1.97ns
.preheader8.preheader:1313  %tmp365 = add i32 %call_ret_7, %tmp364

ST_138: temp_4_8 [1/1] 1.97ns
.preheader8.preheader:1314  %temp_4_8 = add i32 %tmp363, %tmp365

ST_138: call_ret44_8 [1/1] 2.47ns
.preheader8.preheader:1315  %call_ret44_8 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_7, i32 %B_ret40_7, i32 %C_ret41_7, i32 %D_ret42_7, i32 %temp_4_8)

ST_138: call_ret_8 [1/1] 0.00ns
.preheader8.preheader:1316  %call_ret_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 0

ST_138: A_ret39_8 [1/1] 0.00ns
.preheader8.preheader:1317  %A_ret39_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 1

ST_138: B_ret40_8 [1/1] 0.00ns
.preheader8.preheader:1318  %B_ret40_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 2

ST_138: C_ret41_8 [1/1] 0.00ns
.preheader8.preheader:1319  %C_ret41_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 3

ST_138: D_ret42_8 [1/1] 0.00ns
.preheader8.preheader:1320  %D_ret42_8 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_8, 4


 <State 139>: 7.03ns
ST_139: tmp_63_9 [1/1] 7.03ns
.preheader8.preheader:1321  %tmp_63_9 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_8)

ST_139: tmp368 [1/1] 2.44ns
.preheader8.preheader:1325  %tmp368 = add i32 -899497514, %W_69


 <State 140>: 6.88ns
ST_140: tmp366 [1/1] 0.00ns (grouped into LUT with out node tmp367)
.preheader8.preheader:1322  %tmp366 = xor i32 %B_ret40_8, %D_ret42_8

ST_140: tmp_65_9 [1/1] 0.00ns (grouped into LUT with out node tmp367)
.preheader8.preheader:1323  %tmp_65_9 = xor i32 %tmp366, %C_ret41_8

ST_140: tmp367 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1324  %tmp367 = add i32 %tmp_65_9, %tmp_63_9

ST_140: tmp369 [1/1] 1.97ns
.preheader8.preheader:1326  %tmp369 = add i32 %call_ret_8, %tmp368

ST_140: temp_4_9 [1/1] 1.97ns
.preheader8.preheader:1327  %temp_4_9 = add i32 %tmp367, %tmp369

ST_140: call_ret44_9 [1/1] 2.47ns
.preheader8.preheader:1328  %call_ret44_9 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_8, i32 %B_ret40_8, i32 %C_ret41_8, i32 %D_ret42_8, i32 %temp_4_9)

ST_140: call_ret_9 [1/1] 0.00ns
.preheader8.preheader:1329  %call_ret_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 0

ST_140: A_ret39_9 [1/1] 0.00ns
.preheader8.preheader:1330  %A_ret39_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 1

ST_140: B_ret40_9 [1/1] 0.00ns
.preheader8.preheader:1331  %B_ret40_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 2

ST_140: C_ret41_9 [1/1] 0.00ns
.preheader8.preheader:1332  %C_ret41_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 3

ST_140: D_ret42_9 [1/1] 0.00ns
.preheader8.preheader:1333  %D_ret42_9 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_9, 4


 <State 141>: 7.03ns
ST_141: tmp_63_s [1/1] 7.03ns
.preheader8.preheader:1334  %tmp_63_s = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_9)

ST_141: tmp372 [1/1] 2.44ns
.preheader8.preheader:1338  %tmp372 = add i32 -899497514, %W_70


 <State 142>: 6.88ns
ST_142: tmp370 [1/1] 0.00ns (grouped into LUT with out node tmp371)
.preheader8.preheader:1335  %tmp370 = xor i32 %B_ret40_9, %D_ret42_9

ST_142: tmp_65_s [1/1] 0.00ns (grouped into LUT with out node tmp371)
.preheader8.preheader:1336  %tmp_65_s = xor i32 %tmp370, %C_ret41_9

ST_142: tmp371 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1337  %tmp371 = add i32 %tmp_65_s, %tmp_63_s

ST_142: tmp373 [1/1] 1.97ns
.preheader8.preheader:1339  %tmp373 = add i32 %call_ret_9, %tmp372

ST_142: temp_4_s [1/1] 1.97ns
.preheader8.preheader:1340  %temp_4_s = add i32 %tmp371, %tmp373

ST_142: call_ret44_s [1/1] 2.47ns
.preheader8.preheader:1341  %call_ret44_s = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_9, i32 %B_ret40_9, i32 %C_ret41_9, i32 %D_ret42_9, i32 %temp_4_s)

ST_142: call_ret_s [1/1] 0.00ns
.preheader8.preheader:1342  %call_ret_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 0

ST_142: A_ret39_s [1/1] 0.00ns
.preheader8.preheader:1343  %A_ret39_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 1

ST_142: B_ret40_s [1/1] 0.00ns
.preheader8.preheader:1344  %B_ret40_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 2

ST_142: C_ret41_s [1/1] 0.00ns
.preheader8.preheader:1345  %C_ret41_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 3

ST_142: D_ret42_s [1/1] 0.00ns
.preheader8.preheader:1346  %D_ret42_s = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_s, 4


 <State 143>: 7.03ns
ST_143: tmp_63_10 [1/1] 7.03ns
.preheader8.preheader:1347  %tmp_63_10 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_s)

ST_143: tmp376 [1/1] 2.44ns
.preheader8.preheader:1351  %tmp376 = add i32 -899497514, %W_71


 <State 144>: 6.88ns
ST_144: tmp374 [1/1] 0.00ns (grouped into LUT with out node tmp375)
.preheader8.preheader:1348  %tmp374 = xor i32 %B_ret40_s, %D_ret42_s

ST_144: tmp_65_10 [1/1] 0.00ns (grouped into LUT with out node tmp375)
.preheader8.preheader:1349  %tmp_65_10 = xor i32 %tmp374, %C_ret41_s

ST_144: tmp375 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1350  %tmp375 = add i32 %tmp_65_10, %tmp_63_10

ST_144: tmp377 [1/1] 1.97ns
.preheader8.preheader:1352  %tmp377 = add i32 %call_ret_s, %tmp376

ST_144: temp_4_10 [1/1] 1.97ns
.preheader8.preheader:1353  %temp_4_10 = add i32 %tmp375, %tmp377

ST_144: call_ret44_10 [1/1] 2.47ns
.preheader8.preheader:1354  %call_ret44_10 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_s, i32 %B_ret40_s, i32 %C_ret41_s, i32 %D_ret42_s, i32 %temp_4_10)

ST_144: call_ret_10 [1/1] 0.00ns
.preheader8.preheader:1355  %call_ret_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 0

ST_144: A_ret39_10 [1/1] 0.00ns
.preheader8.preheader:1356  %A_ret39_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 1

ST_144: B_ret40_10 [1/1] 0.00ns
.preheader8.preheader:1357  %B_ret40_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 2

ST_144: C_ret41_10 [1/1] 0.00ns
.preheader8.preheader:1358  %C_ret41_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 3

ST_144: D_ret42_10 [1/1] 0.00ns
.preheader8.preheader:1359  %D_ret42_10 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_10, 4


 <State 145>: 7.03ns
ST_145: tmp_63_11 [1/1] 7.03ns
.preheader8.preheader:1360  %tmp_63_11 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_10)

ST_145: tmp380 [1/1] 2.44ns
.preheader8.preheader:1364  %tmp380 = add i32 -899497514, %W_72


 <State 146>: 6.88ns
ST_146: tmp378 [1/1] 0.00ns (grouped into LUT with out node tmp379)
.preheader8.preheader:1361  %tmp378 = xor i32 %B_ret40_10, %D_ret42_10

ST_146: tmp_65_11 [1/1] 0.00ns (grouped into LUT with out node tmp379)
.preheader8.preheader:1362  %tmp_65_11 = xor i32 %tmp378, %C_ret41_10

ST_146: tmp379 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1363  %tmp379 = add i32 %tmp_65_11, %tmp_63_11

ST_146: tmp381 [1/1] 1.97ns
.preheader8.preheader:1365  %tmp381 = add i32 %call_ret_10, %tmp380

ST_146: temp_4_11 [1/1] 1.97ns
.preheader8.preheader:1366  %temp_4_11 = add i32 %tmp379, %tmp381

ST_146: call_ret44_11 [1/1] 2.47ns
.preheader8.preheader:1367  %call_ret44_11 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_10, i32 %B_ret40_10, i32 %C_ret41_10, i32 %D_ret42_10, i32 %temp_4_11)

ST_146: call_ret_11 [1/1] 0.00ns
.preheader8.preheader:1368  %call_ret_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 0

ST_146: A_ret39_11 [1/1] 0.00ns
.preheader8.preheader:1369  %A_ret39_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 1

ST_146: B_ret40_11 [1/1] 0.00ns
.preheader8.preheader:1370  %B_ret40_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 2

ST_146: C_ret41_11 [1/1] 0.00ns
.preheader8.preheader:1371  %C_ret41_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 3

ST_146: D_ret42_11 [1/1] 0.00ns
.preheader8.preheader:1372  %D_ret42_11 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_11, 4


 <State 147>: 7.03ns
ST_147: tmp_63_12 [1/1] 7.03ns
.preheader8.preheader:1373  %tmp_63_12 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_11)

ST_147: tmp384 [1/1] 2.44ns
.preheader8.preheader:1377  %tmp384 = add i32 -899497514, %W_73


 <State 148>: 6.88ns
ST_148: tmp382 [1/1] 0.00ns (grouped into LUT with out node tmp383)
.preheader8.preheader:1374  %tmp382 = xor i32 %B_ret40_11, %D_ret42_11

ST_148: tmp_65_12 [1/1] 0.00ns (grouped into LUT with out node tmp383)
.preheader8.preheader:1375  %tmp_65_12 = xor i32 %tmp382, %C_ret41_11

ST_148: tmp383 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1376  %tmp383 = add i32 %tmp_65_12, %tmp_63_12

ST_148: tmp385 [1/1] 1.97ns
.preheader8.preheader:1378  %tmp385 = add i32 %call_ret_11, %tmp384

ST_148: temp_4_12 [1/1] 1.97ns
.preheader8.preheader:1379  %temp_4_12 = add i32 %tmp383, %tmp385

ST_148: call_ret44_12 [1/1] 2.47ns
.preheader8.preheader:1380  %call_ret44_12 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_11, i32 %B_ret40_11, i32 %C_ret41_11, i32 %D_ret42_11, i32 %temp_4_12)

ST_148: call_ret_12 [1/1] 0.00ns
.preheader8.preheader:1381  %call_ret_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 0

ST_148: A_ret39_12 [1/1] 0.00ns
.preheader8.preheader:1382  %A_ret39_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 1

ST_148: B_ret40_12 [1/1] 0.00ns
.preheader8.preheader:1383  %B_ret40_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 2

ST_148: C_ret41_12 [1/1] 0.00ns
.preheader8.preheader:1384  %C_ret41_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 3

ST_148: D_ret42_12 [1/1] 0.00ns
.preheader8.preheader:1385  %D_ret42_12 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_12, 4


 <State 149>: 7.03ns
ST_149: tmp_63_13 [1/1] 7.03ns
.preheader8.preheader:1386  %tmp_63_13 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_12)

ST_149: tmp388 [1/1] 2.44ns
.preheader8.preheader:1390  %tmp388 = add i32 -899497514, %W_74


 <State 150>: 6.88ns
ST_150: tmp386 [1/1] 0.00ns (grouped into LUT with out node tmp387)
.preheader8.preheader:1387  %tmp386 = xor i32 %B_ret40_12, %D_ret42_12

ST_150: tmp_65_13 [1/1] 0.00ns (grouped into LUT with out node tmp387)
.preheader8.preheader:1388  %tmp_65_13 = xor i32 %tmp386, %C_ret41_12

ST_150: tmp387 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1389  %tmp387 = add i32 %tmp_65_13, %tmp_63_13

ST_150: tmp389 [1/1] 1.97ns
.preheader8.preheader:1391  %tmp389 = add i32 %call_ret_12, %tmp388

ST_150: temp_4_13 [1/1] 1.97ns
.preheader8.preheader:1392  %temp_4_13 = add i32 %tmp387, %tmp389

ST_150: call_ret44_13 [1/1] 2.47ns
.preheader8.preheader:1393  %call_ret44_13 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_12, i32 %B_ret40_12, i32 %C_ret41_12, i32 %D_ret42_12, i32 %temp_4_13)

ST_150: call_ret_13 [1/1] 0.00ns
.preheader8.preheader:1394  %call_ret_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 0

ST_150: A_ret39_13 [1/1] 0.00ns
.preheader8.preheader:1395  %A_ret39_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 1

ST_150: B_ret40_13 [1/1] 0.00ns
.preheader8.preheader:1396  %B_ret40_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 2

ST_150: C_ret41_13 [1/1] 0.00ns
.preheader8.preheader:1397  %C_ret41_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 3

ST_150: D_ret42_13 [1/1] 0.00ns
.preheader8.preheader:1398  %D_ret42_13 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_13, 4


 <State 151>: 7.03ns
ST_151: tmp_63_14 [1/1] 7.03ns
.preheader8.preheader:1399  %tmp_63_14 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_13)

ST_151: tmp392 [1/1] 2.44ns
.preheader8.preheader:1403  %tmp392 = add i32 -899497514, %W_75


 <State 152>: 6.88ns
ST_152: tmp390 [1/1] 0.00ns (grouped into LUT with out node tmp391)
.preheader8.preheader:1400  %tmp390 = xor i32 %B_ret40_13, %D_ret42_13

ST_152: tmp_65_14 [1/1] 0.00ns (grouped into LUT with out node tmp391)
.preheader8.preheader:1401  %tmp_65_14 = xor i32 %tmp390, %C_ret41_13

ST_152: tmp391 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1402  %tmp391 = add i32 %tmp_65_14, %tmp_63_14

ST_152: tmp393 [1/1] 1.97ns
.preheader8.preheader:1404  %tmp393 = add i32 %call_ret_13, %tmp392

ST_152: temp_4_14 [1/1] 1.97ns
.preheader8.preheader:1405  %temp_4_14 = add i32 %tmp391, %tmp393

ST_152: call_ret44_14 [1/1] 2.47ns
.preheader8.preheader:1406  %call_ret44_14 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_13, i32 %B_ret40_13, i32 %C_ret41_13, i32 %D_ret42_13, i32 %temp_4_14)

ST_152: call_ret_14 [1/1] 0.00ns
.preheader8.preheader:1407  %call_ret_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 0

ST_152: A_ret39_14 [1/1] 0.00ns
.preheader8.preheader:1408  %A_ret39_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 1

ST_152: B_ret40_14 [1/1] 0.00ns
.preheader8.preheader:1409  %B_ret40_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 2

ST_152: C_ret41_14 [1/1] 0.00ns
.preheader8.preheader:1410  %C_ret41_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 3

ST_152: D_ret42_14 [1/1] 0.00ns
.preheader8.preheader:1411  %D_ret42_14 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_14, 4


 <State 153>: 7.03ns
ST_153: tmp_63_15 [1/1] 7.03ns
.preheader8.preheader:1412  %tmp_63_15 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_14)

ST_153: tmp396 [1/1] 2.44ns
.preheader8.preheader:1416  %tmp396 = add i32 -899497514, %W_76


 <State 154>: 7.03ns
ST_154: W_77 [1/1] 7.03ns
.preheader8.preheader:330  %W_77 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_60)

ST_154: tmp394 [1/1] 0.00ns (grouped into LUT with out node tmp395)
.preheader8.preheader:1413  %tmp394 = xor i32 %B_ret40_14, %D_ret42_14

ST_154: tmp_65_15 [1/1] 0.00ns (grouped into LUT with out node tmp395)
.preheader8.preheader:1414  %tmp_65_15 = xor i32 %tmp394, %C_ret41_14

ST_154: tmp395 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1415  %tmp395 = add i32 %tmp_65_15, %tmp_63_15

ST_154: tmp397 [1/1] 1.97ns
.preheader8.preheader:1417  %tmp397 = add i32 %call_ret_14, %tmp396

ST_154: temp_4_15 [1/1] 1.97ns
.preheader8.preheader:1418  %temp_4_15 = add i32 %tmp395, %tmp397

ST_154: call_ret44_15 [1/1] 2.47ns
.preheader8.preheader:1419  %call_ret44_15 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_14, i32 %B_ret40_14, i32 %C_ret41_14, i32 %D_ret42_14, i32 %temp_4_15)

ST_154: call_ret_15 [1/1] 0.00ns
.preheader8.preheader:1420  %call_ret_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 0

ST_154: A_ret39_15 [1/1] 0.00ns
.preheader8.preheader:1421  %A_ret39_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 1

ST_154: B_ret40_15 [1/1] 0.00ns
.preheader8.preheader:1422  %B_ret40_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 2

ST_154: C_ret41_15 [1/1] 0.00ns
.preheader8.preheader:1423  %C_ret41_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 3

ST_154: D_ret42_15 [1/1] 0.00ns
.preheader8.preheader:1424  %D_ret42_15 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_15, 4


 <State 155>: 7.03ns
ST_155: tmp_63_16 [1/1] 7.03ns
.preheader8.preheader:1425  %tmp_63_16 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_15)

ST_155: tmp400 [1/1] 2.44ns
.preheader8.preheader:1429  %tmp400 = add i32 -899497514, %W_77


 <State 156>: 7.03ns
ST_156: W_78 [1/1] 7.03ns
.preheader8.preheader:334  %W_78 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_61)

ST_156: tmp398 [1/1] 0.00ns (grouped into LUT with out node tmp399)
.preheader8.preheader:1426  %tmp398 = xor i32 %B_ret40_15, %D_ret42_15

ST_156: tmp_65_16 [1/1] 0.00ns (grouped into LUT with out node tmp399)
.preheader8.preheader:1427  %tmp_65_16 = xor i32 %tmp398, %C_ret41_15

ST_156: tmp399 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1428  %tmp399 = add i32 %tmp_65_16, %tmp_63_16

ST_156: tmp401 [1/1] 1.97ns
.preheader8.preheader:1430  %tmp401 = add i32 %call_ret_15, %tmp400

ST_156: temp_4_16 [1/1] 1.97ns
.preheader8.preheader:1431  %temp_4_16 = add i32 %tmp399, %tmp401

ST_156: call_ret44_16 [1/1] 2.47ns
.preheader8.preheader:1432  %call_ret44_16 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_15, i32 %B_ret40_15, i32 %C_ret41_15, i32 %D_ret42_15, i32 %temp_4_16)

ST_156: call_ret_16 [1/1] 0.00ns
.preheader8.preheader:1433  %call_ret_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 0

ST_156: A_ret39_16 [1/1] 0.00ns
.preheader8.preheader:1434  %A_ret39_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 1

ST_156: B_ret40_16 [1/1] 0.00ns
.preheader8.preheader:1435  %B_ret40_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 2

ST_156: C_ret41_16 [1/1] 0.00ns
.preheader8.preheader:1436  %C_ret41_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 3

ST_156: D_ret42_16 [1/1] 0.00ns
.preheader8.preheader:1437  %D_ret42_16 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_16, 4


 <State 157>: 7.03ns
ST_157: tmp_63_17 [1/1] 7.03ns
.preheader8.preheader:1438  %tmp_63_17 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_16)

ST_157: tmp404 [1/1] 2.44ns
.preheader8.preheader:1442  %tmp404 = add i32 -899497514, %W_78


 <State 158>: 6.88ns
ST_158: tmp402 [1/1] 0.00ns (grouped into LUT with out node tmp403)
.preheader8.preheader:1439  %tmp402 = xor i32 %B_ret40_16, %D_ret42_16

ST_158: tmp_65_17 [1/1] 0.00ns (grouped into LUT with out node tmp403)
.preheader8.preheader:1440  %tmp_65_17 = xor i32 %tmp402, %C_ret41_16

ST_158: tmp403 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1441  %tmp403 = add i32 %tmp_65_17, %tmp_63_17

ST_158: tmp405 [1/1] 1.97ns
.preheader8.preheader:1443  %tmp405 = add i32 %call_ret_16, %tmp404

ST_158: temp_4_17 [1/1] 1.97ns
.preheader8.preheader:1444  %temp_4_17 = add i32 %tmp403, %tmp405

ST_158: call_ret44_17 [1/1] 2.47ns
.preheader8.preheader:1445  %call_ret44_17 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_16, i32 %B_ret40_16, i32 %C_ret41_16, i32 %D_ret42_16, i32 %temp_4_17)

ST_158: call_ret_17 [1/1] 0.00ns
.preheader8.preheader:1446  %call_ret_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 0

ST_158: A_ret39_17 [1/1] 0.00ns
.preheader8.preheader:1447  %A_ret39_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 1

ST_158: B_ret40_17 [1/1] 0.00ns
.preheader8.preheader:1448  %B_ret40_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 2

ST_158: C_ret41_17 [1/1] 0.00ns
.preheader8.preheader:1449  %C_ret41_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 3

ST_158: D_ret42_17 [1/1] 0.00ns
.preheader8.preheader:1450  %D_ret42_17 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_17, 4


 <State 159>: 7.03ns
ST_159: W_79 [1/1] 7.03ns
.preheader8.preheader:338  %W_79 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 1, i32 %tmp_30_62)

ST_159: tmp_63_18 [1/1] 7.03ns
.preheader8.preheader:1451  %tmp_63_18 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i5 zeroext 5, i32 %A_ret39_17)


 <State 160>: 6.38ns
ST_160: tmp406 [1/1] 0.00ns (grouped into LUT with out node tmp407)
.preheader8.preheader:1452  %tmp406 = xor i32 %B_ret40_17, %D_ret42_17

ST_160: tmp_65_18 [1/1] 0.00ns (grouped into LUT with out node tmp407)
.preheader8.preheader:1453  %tmp_65_18 = xor i32 %tmp406, %C_ret41_17

ST_160: tmp407 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1454  %tmp407 = add i32 %tmp_65_18, %tmp_63_18

ST_160: tmp408 [1/1] 2.44ns
.preheader8.preheader:1455  %tmp408 = add i32 -899497514, %W_79

ST_160: tmp409 [1/1] 1.97ns
.preheader8.preheader:1456  %tmp409 = add i32 %call_ret_17, %tmp408

ST_160: temp_4_18 [1/1] 1.97ns
.preheader8.preheader:1457  %temp_4_18 = add i32 %tmp407, %tmp409


 <State 161>: 4.91ns
ST_161: stg_1618 [1/1] 0.00ns
.preheader8.preheader:0  call void (...)* @_ssdm_op_SpecBitsMap(i688* %context), !map !19

ST_161: stg_1619 [1/1] 0.00ns
.preheader8.preheader:1  call void (...)* @_ssdm_op_SpecTopModule([24 x i8]* @SHA1ProcessMessageBlock_str) nounwind

ST_161: call_ret44_18 [1/1] 2.47ns
.preheader8.preheader:1458  %call_ret44_18 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_ret39_17, i32 %B_ret40_17, i32 %C_ret41_17, i32 %D_ret42_17, i32 %temp_4_18)

ST_161: call_ret_18 [1/1] 0.00ns (grouped into LUT with out node tmp_62)
.preheader8.preheader:1459  %call_ret_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 0

ST_161: A_ret39_18 [1/1] 0.00ns (grouped into LUT with out node tmp_58)
.preheader8.preheader:1460  %A_ret39_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 1

ST_161: B_ret40_18 [1/1] 0.00ns (grouped into LUT with out node tmp_59)
.preheader8.preheader:1461  %B_ret40_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 2

ST_161: C_ret41_18 [1/1] 0.00ns (grouped into LUT with out node tmp_60)
.preheader8.preheader:1462  %C_ret41_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 3

ST_161: D_ret42_18 [1/1] 0.00ns (grouped into LUT with out node tmp_61)
.preheader8.preheader:1463  %D_ret42_18 = extractvalue { i32, i32, i32, i32, i32 } %call_ret44_18, 4

ST_161: tmp_58 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1464  %tmp_58 = add i32 %A_ret39_18, %A

ST_161: tmp_59 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1465  %tmp_59 = add i32 %B_ret40_18, %B

ST_161: tmp_60 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1466  %tmp_60 = add i32 %C_ret41_18, %C

ST_161: tmp_61 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1467  %tmp_61 = add i32 %D_ret42_18, %D

ST_161: tmp_62 [1/1] 2.44ns (out node of the LUT)
.preheader8.preheader:1468  %tmp_62 = add i32 %call_ret_18, %E

ST_161: tmp_83 [1/1] 0.00ns
.preheader8.preheader:1469  %tmp_83 = call i176 @_ssdm_op_BitConcatenate.i176.i16.i32.i32.i32.i32.i32(i16 0, i32 %tmp_62, i32 %tmp_61, i32 %tmp_60, i32 %tmp_59, i32 %tmp_58)

ST_161: context56_part_set [1/1] 0.00ns
.preheader8.preheader:1470  %context56_part_set = call i688 @_ssdm_op_PartSet.i688.i688.i176.i32.i32(i688 %context_read, i176 %tmp_83, i32 0, i32 175)

ST_161: stg_1633 [1/1] 0.00ns
.preheader8.preheader:1471  call void @_ssdm_op_Write.ap_auto.i688P(i688* %context, i688 %context56_part_set)

ST_161: stg_1634 [1/1] 0.00ns
.preheader8.preheader:1472  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158
	State 159
	State 160
	State 161


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
