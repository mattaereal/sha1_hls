

================================================================
== Vivado HLS Report for 'SHA1ProcessMessageBlock'
================================================================
* Date:           Tue Sep 13 17:20:29 2016

* Version:        2016.1 (Build 1538259 on Fri Apr 08 16:12:49 MDT 2016)
* Project:        sha1_hls
* Solution:       base
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.51|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  555|  555|  556|  556|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- loop1   |   48|   48|         3|          -|          -|    16|    no    |
        |- loop2   |  256|  256|         4|          -|          -|    64|    no    |
        |- loop3   |   60|   60|         3|          -|          -|    20|    no    |
        |- loop4   |   60|   60|         3|          -|          -|    20|    no    |
        |- loop5   |   60|   60|         3|          -|          -|    20|    no    |
        |- loop6   |   60|   60|         3|          -|          -|    20|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 25
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond5)
	5  / (exitcond5)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 
	6  / (!exitcond4)
	9  / (exitcond4)
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	5  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / (!exitcond3)
	15  / (exitcond3)
13 --> 
	14  / true
14 --> 
	12  / true
15 --> 
	16  / (!exitcond2)
	18  / (exitcond2)
16 --> 
	17  / true
17 --> 
	15  / true
18 --> 
	19  / (!exitcond1)
	21  / (exitcond1)
19 --> 
	20  / true
20 --> 
	18  / true
21 --> 
	22  / (!exitcond)
	24  / (exitcond)
22 --> 
	23  / true
23 --> 
	21  / true
24 --> 
	25  / true
25 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_26 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([5 x i32]* %context_Intermediate_Hash), !map !19

ST_1: stg_27 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i16* %context_Message_Block_Index), !map !25

ST_1: stg_28 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap([64 x i8]* %context_Message_Block), !map !31

ST_1: stg_29 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecTopModule([24 x i8]* @SHA1ProcessMessageBlock_str) nounwind

ST_1: W [1/1] 0.00ns
:4  %W = alloca [80 x i32], align 16

ST_1: stg_31 [1/1] 1.57ns
:5  br label %1


 <State 2>: 3.48ns
ST_2: t [1/1] 0.00ns
:0  %t = phi i5 [ 0, %0 ], [ %t_6, %2 ]

ST_2: exitcond5 [1/1] 1.91ns
:1  %exitcond5 = icmp eq i5 %t, -16

ST_2: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)

ST_2: t_6 [1/1] 1.72ns
:3  %t_6 = add i5 %t, 1

ST_2: stg_36 [1/1] 1.57ns
:4  br i1 %exitcond5, label %.preheader8, label %2

ST_2: tmp [1/1] 0.00ns
:1  %tmp = trunc i5 %t to i4

ST_2: tmp_1 [1/1] 0.00ns
:2  %tmp_1 = call i6 @_ssdm_op_BitConcatenate.i6.i4.i2(i4 %tmp, i2 0)

ST_2: tmp_2 [1/1] 0.00ns
:3  %tmp_2 = zext i6 %tmp_1 to i64

ST_2: context_Message_Block_addr [1/1] 0.00ns
:4  %context_Message_Block_addr = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 %tmp_2

ST_2: context_Message_Block_load [2/2] 2.39ns
:5  %context_Message_Block_load = load i8* %context_Message_Block_addr, align 1

ST_2: tmp_6 [1/1] 0.00ns
:8  %tmp_6 = or i6 %tmp_1, 1

ST_2: tmp_7 [1/1] 0.00ns
:9  %tmp_7 = zext i6 %tmp_6 to i64

ST_2: context_Message_Block_addr_1 [1/1] 0.00ns
:10  %context_Message_Block_addr_1 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 %tmp_7

ST_2: context_Message_Block_load_1 [2/2] 2.39ns
:11  %context_Message_Block_load_1 = load i8* %context_Message_Block_addr_1, align 1


 <State 3>: 2.39ns
ST_3: context_Message_Block_load [1/2] 2.39ns
:5  %context_Message_Block_load = load i8* %context_Message_Block_addr, align 1

ST_3: context_Message_Block_load_1 [1/2] 2.39ns
:11  %context_Message_Block_load_1 = load i8* %context_Message_Block_addr_1, align 1

ST_3: tmp_s [1/1] 0.00ns
:12  %tmp_s = or i6 %tmp_1, 2

ST_3: tmp_3 [1/1] 0.00ns
:13  %tmp_3 = zext i6 %tmp_s to i64

ST_3: context_Message_Block_addr_2 [1/1] 0.00ns
:14  %context_Message_Block_addr_2 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 %tmp_3

ST_3: context_Message_Block_load_2 [2/2] 2.39ns
:15  %context_Message_Block_load_2 = load i8* %context_Message_Block_addr_2, align 1

ST_3: tmp_8 [1/1] 0.00ns
:16  %tmp_8 = or i6 %tmp_1, 3

ST_3: tmp_4 [1/1] 0.00ns
:17  %tmp_4 = zext i6 %tmp_8 to i64

ST_3: context_Message_Block_addr_3 [1/1] 0.00ns
:18  %context_Message_Block_addr_3 = getelementptr [64 x i8]* %context_Message_Block, i64 0, i64 %tmp_4

ST_3: context_Message_Block_load_3 [2/2] 2.39ns
:19  %context_Message_Block_load_3 = load i8* %context_Message_Block_addr_3, align 1


 <State 4>: 5.10ns
ST_4: stg_56 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @p_str1) nounwind

ST_4: tmp_5 [1/1] 0.00ns
:6  %tmp_5 = zext i5 %t to i64

ST_4: W_addr [1/1] 0.00ns
:7  %W_addr = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_5

ST_4: context_Message_Block_load_2 [1/2] 2.39ns
:15  %context_Message_Block_load_2 = load i8* %context_Message_Block_addr_2, align 1

ST_4: context_Message_Block_load_3 [1/2] 2.39ns
:19  %context_Message_Block_load_3 = load i8* %context_Message_Block_addr_3, align 1

ST_4: tmp_9 [1/1] 0.00ns
:20  %tmp_9 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %context_Message_Block_load, i8 %context_Message_Block_load_1, i8 %context_Message_Block_load_2, i8 %context_Message_Block_load_3)

ST_4: stg_62 [1/1] 2.71ns
:21  store i32 %tmp_9, i32* %W_addr, align 4

ST_4: stg_63 [1/1] 0.00ns
:22  br label %1


 <State 5>: 4.43ns
ST_5: t_1 [1/1] 0.00ns
.preheader8:0  %t_1 = phi i7 [ %t_7, %3 ], [ 16, %1 ]

ST_5: exitcond4 [1/1] 1.97ns
.preheader8:1  %exitcond4 = icmp eq i7 %t_1, -48

ST_5: empty_17 [1/1] 0.00ns
.preheader8:2  %empty_17 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_5: stg_67 [1/1] 0.00ns
.preheader8:3  br i1 %exitcond4, label %4, label %3

ST_5: tmp_10 [1/1] 1.72ns
:1  %tmp_10 = add i7 %t_1, -3

ST_5: tmp_11 [1/1] 0.00ns
:2  %tmp_11 = zext i7 %tmp_10 to i64

ST_5: W_addr_1 [1/1] 0.00ns
:3  %W_addr_1 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_11

ST_5: W_load [2/2] 2.71ns
:4  %W_load = load i32* %W_addr_1, align 4

ST_5: tmp_12 [1/1] 1.72ns
:5  %tmp_12 = add i7 %t_1, -8

ST_5: tmp_13 [1/1] 0.00ns
:6  %tmp_13 = zext i7 %tmp_12 to i64

ST_5: W_addr_2 [1/1] 0.00ns
:7  %W_addr_2 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_13

ST_5: W_load_1 [2/2] 2.71ns
:8  %W_load_1 = load i32* %W_addr_2, align 4

ST_5: context_Intermediate_Hash_addr [1/1] 0.00ns
:0  %context_Intermediate_Hash_addr = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 0

ST_5: A [2/2] 2.39ns
:1  %A = load i32* %context_Intermediate_Hash_addr, align 4


 <State 6>: 4.43ns
ST_6: W_load [1/2] 2.71ns
:4  %W_load = load i32* %W_addr_1, align 4

ST_6: W_load_1 [1/2] 2.71ns
:8  %W_load_1 = load i32* %W_addr_2, align 4

ST_6: tmp_14 [1/1] 1.72ns
:9  %tmp_14 = add i7 %t_1, -14

ST_6: tmp_15 [1/1] 0.00ns
:10  %tmp_15 = zext i7 %tmp_14 to i64

ST_6: W_addr_3 [1/1] 0.00ns
:11  %W_addr_3 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_15

ST_6: W_load_2 [2/2] 2.71ns
:12  %W_load_2 = load i32* %W_addr_3, align 4

ST_6: tmp_16 [1/1] 1.72ns
:13  %tmp_16 = add i7 %t_1, -16

ST_6: tmp_17 [1/1] 0.00ns
:14  %tmp_17 = zext i7 %tmp_16 to i64

ST_6: W_addr_4 [1/1] 0.00ns
:15  %W_addr_4 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_17

ST_6: W_load_3 [2/2] 2.71ns
:16  %W_load_3 = load i32* %W_addr_4, align 4


 <State 7>: 4.08ns
ST_7: W_load_2 [1/2] 2.71ns
:12  %W_load_2 = load i32* %W_addr_3, align 4

ST_7: W_load_3 [1/2] 2.71ns
:16  %W_load_3 = load i32* %W_addr_4, align 4

ST_7: tmp_18 [1/1] 0.00ns (grouped into LUT with out node tmp_20)
:17  %tmp_18 = xor i32 %W_load_1, %W_load

ST_7: tmp_19 [1/1] 0.00ns (grouped into LUT with out node tmp_20)
:18  %tmp_19 = xor i32 %tmp_18, %W_load_2

ST_7: tmp_20 [1/1] 1.37ns (out node of the LUT)
:19  %tmp_20 = xor i32 %tmp_19, %W_load_3


 <State 8>: 8.51ns
ST_8: stg_93 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @p_str2) nounwind

ST_8: tmp_21 [1/1] 5.80ns
:20  %tmp_21 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 1, i32 %tmp_20)

ST_8: tmp_22 [1/1] 0.00ns
:21  %tmp_22 = zext i7 %t_1 to i64

ST_8: W_addr_5 [1/1] 0.00ns
:22  %W_addr_5 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_22

ST_8: stg_97 [1/1] 2.71ns
:23  store i32 %tmp_21, i32* %W_addr_5, align 4

ST_8: t_7 [1/1] 1.72ns
:24  %t_7 = add i7 %t_1, 1

ST_8: stg_99 [1/1] 0.00ns
:25  br label %.preheader8


 <State 9>: 2.39ns
ST_9: A [1/2] 2.39ns
:1  %A = load i32* %context_Intermediate_Hash_addr, align 4

ST_9: context_Intermediate_Hash_addr_1 [1/1] 0.00ns
:2  %context_Intermediate_Hash_addr_1 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 1

ST_9: B [2/2] 2.39ns
:3  %B = load i32* %context_Intermediate_Hash_addr_1, align 4

ST_9: context_Intermediate_Hash_addr_2 [1/1] 0.00ns
:4  %context_Intermediate_Hash_addr_2 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 2

ST_9: C [2/2] 2.39ns
:5  %C = load i32* %context_Intermediate_Hash_addr_2, align 4


 <State 10>: 2.39ns
ST_10: B [1/2] 2.39ns
:3  %B = load i32* %context_Intermediate_Hash_addr_1, align 4

ST_10: C [1/2] 2.39ns
:5  %C = load i32* %context_Intermediate_Hash_addr_2, align 4

ST_10: context_Intermediate_Hash_addr_3 [1/1] 0.00ns
:6  %context_Intermediate_Hash_addr_3 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 3

ST_10: D [2/2] 2.39ns
:7  %D = load i32* %context_Intermediate_Hash_addr_3, align 4

ST_10: context_Intermediate_Hash_addr_4 [1/1] 0.00ns
:8  %context_Intermediate_Hash_addr_4 = getelementptr [5 x i32]* %context_Intermediate_Hash, i64 0, i64 4

ST_10: E [2/2] 2.39ns
:9  %E = load i32* %context_Intermediate_Hash_addr_4, align 4


 <State 11>: 3.96ns
ST_11: D [1/2] 2.39ns
:7  %D = load i32* %context_Intermediate_Hash_addr_3, align 4

ST_11: E [1/2] 2.39ns
:9  %E = load i32* %context_Intermediate_Hash_addr_4, align 4

ST_11: stg_113 [1/1] 1.57ns
:10  br label %5


 <State 12>: 5.80ns
ST_12: E1 [1/1] 0.00ns
:0  %E1 = phi i32 [ %E, %4 ], [ %E_1, %6 ]

ST_12: D1 [1/1] 0.00ns
:1  %D1 = phi i32 [ %D, %4 ], [ %D_1, %6 ]

ST_12: C1 [1/1] 0.00ns
:2  %C1 = phi i32 [ %C, %4 ], [ %C_1, %6 ]

ST_12: B1 [1/1] 0.00ns
:3  %B1 = phi i32 [ %B, %4 ], [ %B_1, %6 ]

ST_12: A1 [1/1] 0.00ns
:4  %A1 = phi i32 [ %A, %4 ], [ %A_1, %6 ]

ST_12: t_2 [1/1] 0.00ns
:5  %t_2 = phi i5 [ 0, %4 ], [ %t_8, %6 ]

ST_12: exitcond3 [1/1] 1.91ns
:6  %exitcond3 = icmp eq i5 %t_2, -12

ST_12: empty_18 [1/1] 0.00ns
:7  %empty_18 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)

ST_12: t_8 [1/1] 1.72ns
:8  %t_8 = add i5 %t_2, 1

ST_12: stg_123 [1/1] 1.57ns
:9  br i1 %exitcond3, label %.preheader7, label %6

ST_12: tmp_23 [1/1] 5.80ns
:1  %tmp_23 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A1)

ST_12: tmp_28 [1/1] 0.00ns
:6  %tmp_28 = zext i5 %t_2 to i64

ST_12: W_addr_6 [1/1] 0.00ns
:7  %W_addr_6 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_28

ST_12: W_load_4 [2/2] 2.71ns
:8  %W_load_4 = load i32* %W_addr_6, align 4


 <State 13>: 7.88ns
ST_13: tmp_24 [1/1] 0.00ns (grouped into LUT with out node tmp_27)
:2  %tmp_24 = and i32 %C1, %B1

ST_13: tmp_25 [1/1] 0.00ns (grouped into LUT with out node tmp_27)
:3  %tmp_25 = xor i32 %B1, -1

ST_13: tmp_26 [1/1] 0.00ns (grouped into LUT with out node tmp_27)
:4  %tmp_26 = and i32 %D1, %tmp_25

ST_13: tmp_27 [1/1] 1.37ns (out node of the LUT)
:5  %tmp_27 = or i32 %tmp_26, %tmp_24

ST_13: W_load_4 [1/2] 2.71ns
:8  %W_load_4 = load i32* %W_addr_6, align 4

ST_13: tmp_29 [1/1] 1.97ns
:9  %tmp_29 = add i32 %tmp_23, 1518500249

ST_13: tmp_30 [1/1] 1.97ns
:10  %tmp_30 = add i32 %tmp_29, %E1

ST_13: tmp_31 [1/1] 1.97ns
:11  %tmp_31 = add i32 %tmp_30, %tmp_27

ST_13: temp [1/1] 1.97ns
:12  %temp = add i32 %tmp_31, %W_load_4


 <State 14>: 6.84ns
ST_14: stg_137 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @p_str3) nounwind

ST_14: call_ret1 [1/1] 6.84ns
:13  %call_ret1 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A1, i32 %B1, i32 %C1, i32 %D1, i32 %temp)

ST_14: E_1 [1/1] 0.00ns
:14  %E_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 0

ST_14: A_1 [1/1] 0.00ns
:15  %A_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 1

ST_14: B_1 [1/1] 0.00ns
:16  %B_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 2

ST_14: C_1 [1/1] 0.00ns
:17  %C_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 3

ST_14: D_1 [1/1] 0.00ns
:18  %D_1 = extractvalue { i32, i32, i32, i32, i32 } %call_ret1, 4

ST_14: stg_144 [1/1] 0.00ns
:19  br label %5


 <State 15>: 5.80ns
ST_15: E_s [1/1] 0.00ns
.preheader7:0  %E_s = phi i32 [ %E_4, %7 ], [ %E1, %5 ]

ST_15: D_s [1/1] 0.00ns
.preheader7:1  %D_s = phi i32 [ %D_4, %7 ], [ %D1, %5 ]

ST_15: C_s [1/1] 0.00ns
.preheader7:2  %C_s = phi i32 [ %C_4, %7 ], [ %C1, %5 ]

ST_15: B_s [1/1] 0.00ns
.preheader7:3  %B_s = phi i32 [ %B_4, %7 ], [ %B1, %5 ]

ST_15: A_s [1/1] 0.00ns
.preheader7:4  %A_s = phi i32 [ %A_4, %7 ], [ %A1, %5 ]

ST_15: t_3 [1/1] 0.00ns
.preheader7:5  %t_3 = phi i6 [ %t_9, %7 ], [ 20, %5 ]

ST_15: exitcond2 [1/1] 1.94ns
.preheader7:6  %exitcond2 = icmp eq i6 %t_3, -24

ST_15: empty_19 [1/1] 0.00ns
.preheader7:7  %empty_19 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)

ST_15: stg_153 [1/1] 1.57ns
.preheader7:8  br i1 %exitcond2, label %.preheader6, label %7

ST_15: tmp_32 [1/1] 5.80ns
:1  %tmp_32 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_s)

ST_15: tmp_35 [1/1] 0.00ns
:4  %tmp_35 = zext i6 %t_3 to i64

ST_15: W_addr_7 [1/1] 0.00ns
:5  %W_addr_7 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_35

ST_15: W_load_5 [2/2] 2.71ns
:6  %W_load_5 = load i32* %W_addr_7, align 4

ST_15: t_9 [1/1] 1.72ns
:17  %t_9 = add i6 %t_3, 1


 <State 16>: 7.88ns
ST_16: tmp_33 [1/1] 0.00ns (grouped into LUT with out node tmp_34)
:2  %tmp_33 = xor i32 %C_s, %B_s

ST_16: tmp_34 [1/1] 1.37ns (out node of the LUT)
:3  %tmp_34 = xor i32 %tmp_33, %D_s

ST_16: W_load_5 [1/2] 2.71ns
:6  %W_load_5 = load i32* %W_addr_7, align 4

ST_16: tmp_36 [1/1] 1.97ns
:7  %tmp_36 = add i32 %tmp_32, 1859775393

ST_16: tmp_37 [1/1] 1.97ns
:8  %tmp_37 = add i32 %tmp_36, %tmp_34

ST_16: tmp_38 [1/1] 1.97ns
:9  %tmp_38 = add i32 %tmp_37, %E_s

ST_16: temp_1 [1/1] 1.97ns
:10  %temp_1 = add i32 %tmp_38, %W_load_5


 <State 17>: 6.84ns
ST_17: stg_166 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @p_str4) nounwind

ST_17: call_ret3 [1/1] 6.84ns
:11  %call_ret3 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_s, i32 %B_s, i32 %C_s, i32 %D_s, i32 %temp_1)

ST_17: E_4 [1/1] 0.00ns
:12  %E_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 0

ST_17: A_4 [1/1] 0.00ns
:13  %A_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 1

ST_17: B_4 [1/1] 0.00ns
:14  %B_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 2

ST_17: C_4 [1/1] 0.00ns
:15  %C_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 3

ST_17: D_4 [1/1] 0.00ns
:16  %D_4 = extractvalue { i32, i32, i32, i32, i32 } %call_ret3, 4

ST_17: stg_173 [1/1] 0.00ns
:18  br label %.preheader7


 <State 18>: 5.80ns
ST_18: E_2 [1/1] 0.00ns
.preheader6:0  %E_2 = phi i32 [ %E_5, %8 ], [ %E_s, %.preheader7 ]

ST_18: D_2 [1/1] 0.00ns
.preheader6:1  %D_2 = phi i32 [ %D_5, %8 ], [ %D_s, %.preheader7 ]

ST_18: C_2 [1/1] 0.00ns
.preheader6:2  %C_2 = phi i32 [ %C_5, %8 ], [ %C_s, %.preheader7 ]

ST_18: B_2 [1/1] 0.00ns
.preheader6:3  %B_2 = phi i32 [ %B_5, %8 ], [ %B_s, %.preheader7 ]

ST_18: A_2 [1/1] 0.00ns
.preheader6:4  %A_2 = phi i32 [ %A_5, %8 ], [ %A_s, %.preheader7 ]

ST_18: t_4 [1/1] 0.00ns
.preheader6:5  %t_4 = phi i6 [ %t_10, %8 ], [ -24, %.preheader7 ]

ST_18: exitcond1 [1/1] 1.94ns
.preheader6:6  %exitcond1 = icmp eq i6 %t_4, -4

ST_18: empty_20 [1/1] 0.00ns
.preheader6:7  %empty_20 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)

ST_18: stg_182 [1/1] 1.57ns
.preheader6:8  br i1 %exitcond1, label %.preheader, label %8

ST_18: tmp_39 [1/1] 5.80ns
:1  %tmp_39 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_2)

ST_18: tmp_44 [1/1] 0.00ns
:6  %tmp_44 = zext i6 %t_4 to i64

ST_18: W_addr_8 [1/1] 0.00ns
:7  %W_addr_8 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_44

ST_18: W_load_6 [2/2] 2.71ns
:8  %W_load_6 = load i32* %W_addr_8, align 4

ST_18: t_10 [1/1] 1.72ns
:19  %t_10 = add i6 %t_4, 1


 <State 19>: 7.88ns
ST_19: tmp_40 [1/1] 0.00ns (grouped into LUT with out node tmp_43)
:2  %tmp_40 = or i32 %D_2, %C_2

ST_19: tmp_41 [1/1] 0.00ns (grouped into LUT with out node tmp_43)
:3  %tmp_41 = and i32 %tmp_40, %B_2

ST_19: tmp_42 [1/1] 0.00ns (grouped into LUT with out node tmp_43)
:4  %tmp_42 = and i32 %D_2, %C_2

ST_19: tmp_43 [1/1] 1.37ns (out node of the LUT)
:5  %tmp_43 = or i32 %tmp_41, %tmp_42

ST_19: W_load_6 [1/2] 2.71ns
:8  %W_load_6 = load i32* %W_addr_8, align 4

ST_19: tmp_45 [1/1] 1.97ns
:9  %tmp_45 = add i32 %tmp_39, -1894007588

ST_19: tmp_46 [1/1] 1.97ns
:10  %tmp_46 = add i32 %tmp_45, %E_2

ST_19: tmp_47 [1/1] 1.97ns
:11  %tmp_47 = add i32 %tmp_46, %W_load_6

ST_19: temp_2 [1/1] 1.97ns
:12  %temp_2 = add i32 %tmp_47, %tmp_43


 <State 20>: 6.84ns
ST_20: stg_197 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @p_str5) nounwind

ST_20: call_ret5 [1/1] 6.84ns
:13  %call_ret5 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_2, i32 %B_2, i32 %C_2, i32 %D_2, i32 %temp_2)

ST_20: E_5 [1/1] 0.00ns
:14  %E_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 0

ST_20: A_5 [1/1] 0.00ns
:15  %A_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 1

ST_20: B_5 [1/1] 0.00ns
:16  %B_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 2

ST_20: C_5 [1/1] 0.00ns
:17  %C_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 3

ST_20: D_5 [1/1] 0.00ns
:18  %D_5 = extractvalue { i32, i32, i32, i32, i32 } %call_ret5, 4

ST_20: stg_204 [1/1] 0.00ns
:20  br label %.preheader6


 <State 21>: 5.80ns
ST_21: E_3 [1/1] 0.00ns
.preheader:0  %E_3 = phi i32 [ %E_6, %9 ], [ %E_2, %.preheader6 ]

ST_21: D_3 [1/1] 0.00ns
.preheader:1  %D_3 = phi i32 [ %D_6, %9 ], [ %D_2, %.preheader6 ]

ST_21: C_3 [1/1] 0.00ns
.preheader:2  %C_3 = phi i32 [ %C_6, %9 ], [ %C_2, %.preheader6 ]

ST_21: B_3 [1/1] 0.00ns
.preheader:3  %B_3 = phi i32 [ %B_6, %9 ], [ %B_2, %.preheader6 ]

ST_21: A_3 [1/1] 0.00ns
.preheader:4  %A_3 = phi i32 [ %A_6, %9 ], [ %A_2, %.preheader6 ]

ST_21: t_5 [1/1] 0.00ns
.preheader:5  %t_5 = phi i7 [ %t_11, %9 ], [ 60, %.preheader6 ]

ST_21: exitcond [1/1] 1.97ns
.preheader:6  %exitcond = icmp eq i7 %t_5, -48

ST_21: empty_21 [1/1] 0.00ns
.preheader:7  %empty_21 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)

ST_21: stg_213 [1/1] 0.00ns
.preheader:8  br i1 %exitcond, label %10, label %9

ST_21: tmp_53 [1/1] 5.80ns
:1  %tmp_53 = call fastcc i32 @SHA1ProcessMessageBlock_SHA1CircularShift(i6 zeroext 5, i32 %A_3)

ST_21: tmp_56 [1/1] 0.00ns
:4  %tmp_56 = zext i7 %t_5 to i64

ST_21: W_addr_9 [1/1] 0.00ns
:5  %W_addr_9 = getelementptr inbounds [80 x i32]* %W, i64 0, i64 %tmp_56

ST_21: W_load_7 [2/2] 2.71ns
:6  %W_load_7 = load i32* %W_addr_9, align 4

ST_21: t_11 [1/1] 1.72ns
:17  %t_11 = add i7 %t_5, 1

ST_21: tmp_48 [1/1] 2.44ns
:0  %tmp_48 = add i32 %A, %A_3

ST_21: stg_220 [1/1] 2.39ns
:1  store i32 %tmp_48, i32* %context_Intermediate_Hash_addr, align 4

ST_21: tmp_49 [1/1] 2.44ns
:2  %tmp_49 = add i32 %B, %B_3

ST_21: stg_222 [1/1] 2.39ns
:3  store i32 %tmp_49, i32* %context_Intermediate_Hash_addr_1, align 4


 <State 22>: 7.88ns
ST_22: tmp_54 [1/1] 0.00ns (grouped into LUT with out node tmp_55)
:2  %tmp_54 = xor i32 %C_3, %B_3

ST_22: tmp_55 [1/1] 1.37ns (out node of the LUT)
:3  %tmp_55 = xor i32 %tmp_54, %D_3

ST_22: W_load_7 [1/2] 2.71ns
:6  %W_load_7 = load i32* %W_addr_9, align 4

ST_22: tmp_57 [1/1] 1.97ns
:7  %tmp_57 = add i32 %tmp_53, -899497514

ST_22: tmp_58 [1/1] 1.97ns
:8  %tmp_58 = add i32 %tmp_57, %tmp_55

ST_22: tmp_59 [1/1] 1.97ns
:9  %tmp_59 = add i32 %tmp_58, %E_3

ST_22: temp_3 [1/1] 1.97ns
:10  %temp_3 = add i32 %tmp_59, %W_load_7


 <State 23>: 6.84ns
ST_23: stg_230 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @p_str6) nounwind

ST_23: call_ret7 [1/1] 6.84ns
:11  %call_ret7 = call fastcc { i32, i32, i32, i32, i32 } @SHA1ProcessMessageBlock_Swapping(i32 %A_3, i32 %B_3, i32 %C_3, i32 %D_3, i32 %temp_3)

ST_23: E_6 [1/1] 0.00ns
:12  %E_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 0

ST_23: A_6 [1/1] 0.00ns
:13  %A_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 1

ST_23: B_6 [1/1] 0.00ns
:14  %B_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 2

ST_23: C_6 [1/1] 0.00ns
:15  %C_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 3

ST_23: D_6 [1/1] 0.00ns
:16  %D_6 = extractvalue { i32, i32, i32, i32, i32 } %call_ret7, 4

ST_23: stg_237 [1/1] 0.00ns
:18  br label %.preheader


 <State 24>: 4.83ns
ST_24: tmp_50 [1/1] 2.44ns
:4  %tmp_50 = add i32 %C, %C_3

ST_24: stg_239 [1/1] 2.39ns
:5  store i32 %tmp_50, i32* %context_Intermediate_Hash_addr_2, align 4

ST_24: tmp_51 [1/1] 2.44ns
:6  %tmp_51 = add i32 %D, %D_3

ST_24: stg_241 [1/1] 2.39ns
:7  store i32 %tmp_51, i32* %context_Intermediate_Hash_addr_3, align 4

ST_24: tmp_52 [1/1] 2.44ns
:8  %tmp_52 = add i32 %E, %E_3


 <State 25>: 2.39ns
ST_25: stg_243 [1/1] 2.39ns
:9  store i32 %tmp_52, i32* %context_Intermediate_Hash_addr_4, align 4

ST_25: stg_244 [1/1] 0.00ns
:10  call void @_ssdm_op_Write.ap_auto.i16P(i16* %context_Message_Block_Index, i16 0)

ST_25: stg_245 [1/1] 0.00ns
:11  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
